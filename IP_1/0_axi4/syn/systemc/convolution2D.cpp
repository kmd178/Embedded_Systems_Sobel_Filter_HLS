// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolution2D.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolution2D::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolution2D::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> convolution2D::ap_ST_fsm_state1 = "1";
const sc_lv<16> convolution2D::ap_ST_fsm_state2 = "10";
const sc_lv<16> convolution2D::ap_ST_fsm_state3 = "100";
const sc_lv<16> convolution2D::ap_ST_fsm_state4 = "1000";
const sc_lv<16> convolution2D::ap_ST_fsm_state5 = "10000";
const sc_lv<16> convolution2D::ap_ST_fsm_state6 = "100000";
const sc_lv<16> convolution2D::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> convolution2D::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> convolution2D::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> convolution2D::ap_const_lv1_0 = "0";
const sc_lv<3> convolution2D::ap_const_lv3_0 = "000";
const sc_lv<2> convolution2D::ap_const_lv2_0 = "00";
const sc_lv<4> convolution2D::ap_const_lv4_0 = "0000";
const sc_lv<8> convolution2D::ap_const_lv8_0 = "00000000";
const sc_lv<32> convolution2D::ap_const_lv32_4 = "100";
const sc_lv<32> convolution2D::ap_const_lv32_B = "1011";
const sc_lv<32> convolution2D::ap_const_lv32_1 = "1";
const sc_lv<32> convolution2D::ap_const_lv32_2 = "10";
const sc_lv<32> convolution2D::ap_const_lv32_3 = "11";
const sc_lv<32> convolution2D::ap_const_lv32_C = "1100";
const sc_lv<32> convolution2D::ap_const_lv32_E = "1110";
const sc_lv<3> convolution2D::ap_const_lv3_7 = "111";
const sc_lv<1> convolution2D::ap_const_lv1_1 = "1";
const sc_lv<32> convolution2D::ap_const_lv32_F = "1111";
const sc_lv<3> convolution2D::ap_const_lv3_2 = "10";
const sc_lv<3> convolution2D::ap_const_lv3_1 = "1";
const bool convolution2D::ap_const_boolean_1 = true;

convolution2D::convolution2D(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sobel_mul_8ns_32sbkb_U0 = new sobel_mul_8ns_32sbkb<1,3,8,32,32>("sobel_mul_8ns_32sbkb_U0");
    sobel_mul_8ns_32sbkb_U0->clk(ap_clk);
    sobel_mul_8ns_32sbkb_U0->reset(ap_rst);
    sobel_mul_8ns_32sbkb_U0->din0(grp_fu_231_p0);
    sobel_mul_8ns_32sbkb_U0->din1(operator_q0);
    sobel_mul_8ns_32sbkb_U0->ce(ap_var_for_const0);
    sobel_mul_8ns_32sbkb_U0->dout(grp_fu_231_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_129_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_129_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_129_p2 );
    sensitive << ( res_fu_52 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_input_r_ARREADY);
    sensitive << ( m_axi_input_r_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_exitcond1_fu_129_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_reg_98 );

    SC_METHOD(thread_exitcond_fu_145_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_grp_fu_231_p0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( grp_fu_231_p00 );

    SC_METHOD(thread_grp_fu_231_p00);
    sensitive << ( input_addr_read_reg_306 );

    SC_METHOD(thread_i_2_cast_cast_fu_187_p1);
    sensitive << ( i_2_fu_181_p2 );

    SC_METHOD(thread_i_2_fu_181_p2);
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_input_r_blk_n_AR);
    sensitive << ( m_axi_input_r_ARREADY );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_input_r_blk_n_R);
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_j_2_cast_fu_141_p1);
    sensitive << ( j_2_fu_135_p2 );

    SC_METHOD(thread_j_2_fu_135_p2);
    sensitive << ( j_reg_98 );

    SC_METHOD(thread_j_cast7_fu_171_p1);
    sensitive << ( j_reg_98 );

    SC_METHOD(thread_m_axi_input_r_ARADDR);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( input_addr_reg_300 );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_m_axi_input_r_ARBURST);

    SC_METHOD(thread_m_axi_input_r_ARCACHE);

    SC_METHOD(thread_m_axi_input_r_ARID);

    SC_METHOD(thread_m_axi_input_r_ARLEN);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_m_axi_input_r_ARLOCK);

    SC_METHOD(thread_m_axi_input_r_ARPROT);

    SC_METHOD(thread_m_axi_input_r_ARQOS);

    SC_METHOD(thread_m_axi_input_r_ARREGION);

    SC_METHOD(thread_m_axi_input_r_ARSIZE);

    SC_METHOD(thread_m_axi_input_r_ARUSER);

    SC_METHOD(thread_m_axi_input_r_ARVALID);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_m_axi_input_r_AWADDR);

    SC_METHOD(thread_m_axi_input_r_AWBURST);

    SC_METHOD(thread_m_axi_input_r_AWCACHE);

    SC_METHOD(thread_m_axi_input_r_AWID);

    SC_METHOD(thread_m_axi_input_r_AWLEN);

    SC_METHOD(thread_m_axi_input_r_AWLOCK);

    SC_METHOD(thread_m_axi_input_r_AWPROT);

    SC_METHOD(thread_m_axi_input_r_AWQOS);

    SC_METHOD(thread_m_axi_input_r_AWREGION);

    SC_METHOD(thread_m_axi_input_r_AWSIZE);

    SC_METHOD(thread_m_axi_input_r_AWUSER);

    SC_METHOD(thread_m_axi_input_r_AWVALID);

    SC_METHOD(thread_m_axi_input_r_BREADY);

    SC_METHOD(thread_m_axi_input_r_RREADY);
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_m_axi_input_r_WDATA);

    SC_METHOD(thread_m_axi_input_r_WID);

    SC_METHOD(thread_m_axi_input_r_WLAST);

    SC_METHOD(thread_m_axi_input_r_WSTRB);

    SC_METHOD(thread_m_axi_input_r_WUSER);

    SC_METHOD(thread_m_axi_input_r_WVALID);

    SC_METHOD(thread_operator_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_11_cast_fu_224_p1 );

    SC_METHOD(thread_operator_ce0);
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_res_1_fu_237_p2);
    sensitive << ( tmp_4_reg_326 );
    sensitive << ( res_fu_52 );

    SC_METHOD(thread_sum1_fu_213_p2);
    sensitive << ( input1 );
    sensitive << ( sum_cast_fu_210_p1 );

    SC_METHOD(thread_sum_cast_fu_210_p1);
    sensitive << ( sum_reg_285 );

    SC_METHOD(thread_sum_fu_175_p2);
    sensitive << ( j_cast7_fu_171_p1 );
    sensitive << ( tmp1_cast_fu_167_p1 );

    SC_METHOD(thread_tmp1_cast_fu_167_p1);
    sensitive << ( tmp1_fu_160_p3 );

    SC_METHOD(thread_tmp1_fu_160_p3);
    sensitive << ( posx );
    sensitive << ( tmp5_fu_155_p2 );

    SC_METHOD(thread_tmp5_fu_155_p2);
    sensitive << ( posy );
    sensitive << ( tmp_2_cast_fu_151_p1 );

    SC_METHOD(thread_tmp_11_cast_fu_224_p1);
    sensitive << ( tmp_1_reg_295 );

    SC_METHOD(thread_tmp_1_fu_205_p2);
    sensitive << ( j_2_cast_reg_277 );
    sensitive << ( tmp_s_fu_199_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_151_p1);
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_tmp_fu_191_p3);
    sensitive << ( i_2_fu_181_p2 );

    SC_METHOD(thread_tmp_s_fu_199_p2);
    sensitive << ( tmp_fu_191_p3 );
    sensitive << ( i_2_cast_cast_fu_187_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_129_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_145_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_input_r_ARREADY );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000001";
    ap_reg_ioackin_m_axi_input_r_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolution2D_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, posy, "(port)posy");
    sc_trace(mVcdFile, posx, "(port)posx");
    sc_trace(mVcdFile, m_axi_input_r_AWVALID, "(port)m_axi_input_r_AWVALID");
    sc_trace(mVcdFile, m_axi_input_r_AWREADY, "(port)m_axi_input_r_AWREADY");
    sc_trace(mVcdFile, m_axi_input_r_AWADDR, "(port)m_axi_input_r_AWADDR");
    sc_trace(mVcdFile, m_axi_input_r_AWID, "(port)m_axi_input_r_AWID");
    sc_trace(mVcdFile, m_axi_input_r_AWLEN, "(port)m_axi_input_r_AWLEN");
    sc_trace(mVcdFile, m_axi_input_r_AWSIZE, "(port)m_axi_input_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_input_r_AWBURST, "(port)m_axi_input_r_AWBURST");
    sc_trace(mVcdFile, m_axi_input_r_AWLOCK, "(port)m_axi_input_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_input_r_AWCACHE, "(port)m_axi_input_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_input_r_AWPROT, "(port)m_axi_input_r_AWPROT");
    sc_trace(mVcdFile, m_axi_input_r_AWQOS, "(port)m_axi_input_r_AWQOS");
    sc_trace(mVcdFile, m_axi_input_r_AWREGION, "(port)m_axi_input_r_AWREGION");
    sc_trace(mVcdFile, m_axi_input_r_AWUSER, "(port)m_axi_input_r_AWUSER");
    sc_trace(mVcdFile, m_axi_input_r_WVALID, "(port)m_axi_input_r_WVALID");
    sc_trace(mVcdFile, m_axi_input_r_WREADY, "(port)m_axi_input_r_WREADY");
    sc_trace(mVcdFile, m_axi_input_r_WDATA, "(port)m_axi_input_r_WDATA");
    sc_trace(mVcdFile, m_axi_input_r_WSTRB, "(port)m_axi_input_r_WSTRB");
    sc_trace(mVcdFile, m_axi_input_r_WLAST, "(port)m_axi_input_r_WLAST");
    sc_trace(mVcdFile, m_axi_input_r_WID, "(port)m_axi_input_r_WID");
    sc_trace(mVcdFile, m_axi_input_r_WUSER, "(port)m_axi_input_r_WUSER");
    sc_trace(mVcdFile, m_axi_input_r_ARVALID, "(port)m_axi_input_r_ARVALID");
    sc_trace(mVcdFile, m_axi_input_r_ARREADY, "(port)m_axi_input_r_ARREADY");
    sc_trace(mVcdFile, m_axi_input_r_ARADDR, "(port)m_axi_input_r_ARADDR");
    sc_trace(mVcdFile, m_axi_input_r_ARID, "(port)m_axi_input_r_ARID");
    sc_trace(mVcdFile, m_axi_input_r_ARLEN, "(port)m_axi_input_r_ARLEN");
    sc_trace(mVcdFile, m_axi_input_r_ARSIZE, "(port)m_axi_input_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_input_r_ARBURST, "(port)m_axi_input_r_ARBURST");
    sc_trace(mVcdFile, m_axi_input_r_ARLOCK, "(port)m_axi_input_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_input_r_ARCACHE, "(port)m_axi_input_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_input_r_ARPROT, "(port)m_axi_input_r_ARPROT");
    sc_trace(mVcdFile, m_axi_input_r_ARQOS, "(port)m_axi_input_r_ARQOS");
    sc_trace(mVcdFile, m_axi_input_r_ARREGION, "(port)m_axi_input_r_ARREGION");
    sc_trace(mVcdFile, m_axi_input_r_ARUSER, "(port)m_axi_input_r_ARUSER");
    sc_trace(mVcdFile, m_axi_input_r_RVALID, "(port)m_axi_input_r_RVALID");
    sc_trace(mVcdFile, m_axi_input_r_RREADY, "(port)m_axi_input_r_RREADY");
    sc_trace(mVcdFile, m_axi_input_r_RDATA, "(port)m_axi_input_r_RDATA");
    sc_trace(mVcdFile, m_axi_input_r_RLAST, "(port)m_axi_input_r_RLAST");
    sc_trace(mVcdFile, m_axi_input_r_RID, "(port)m_axi_input_r_RID");
    sc_trace(mVcdFile, m_axi_input_r_RUSER, "(port)m_axi_input_r_RUSER");
    sc_trace(mVcdFile, m_axi_input_r_RRESP, "(port)m_axi_input_r_RRESP");
    sc_trace(mVcdFile, m_axi_input_r_BVALID, "(port)m_axi_input_r_BVALID");
    sc_trace(mVcdFile, m_axi_input_r_BREADY, "(port)m_axi_input_r_BREADY");
    sc_trace(mVcdFile, m_axi_input_r_BRESP, "(port)m_axi_input_r_BRESP");
    sc_trace(mVcdFile, m_axi_input_r_BID, "(port)m_axi_input_r_BID");
    sc_trace(mVcdFile, m_axi_input_r_BUSER, "(port)m_axi_input_r_BUSER");
    sc_trace(mVcdFile, input1, "(port)input1");
    sc_trace(mVcdFile, operator_address0, "(port)operator_address0");
    sc_trace(mVcdFile, operator_ce0, "(port)operator_ce0");
    sc_trace(mVcdFile, operator_q0, "(port)operator_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_r_blk_n_AR, "input_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, input_r_blk_n_R, "input_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, j_2_fu_135_p2, "j_2_fu_135_p2");
    sc_trace(mVcdFile, j_2_reg_272, "j_2_reg_272");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond1_fu_129_p2, "exitcond1_fu_129_p2");
    sc_trace(mVcdFile, j_2_cast_fu_141_p1, "j_2_cast_fu_141_p1");
    sc_trace(mVcdFile, j_2_cast_reg_277, "j_2_cast_reg_277");
    sc_trace(mVcdFile, sum_fu_175_p2, "sum_fu_175_p2");
    sc_trace(mVcdFile, sum_reg_285, "sum_reg_285");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_145_p2, "exitcond_fu_145_p2");
    sc_trace(mVcdFile, i_2_fu_181_p2, "i_2_fu_181_p2");
    sc_trace(mVcdFile, i_2_reg_290, "i_2_reg_290");
    sc_trace(mVcdFile, tmp_1_fu_205_p2, "tmp_1_fu_205_p2");
    sc_trace(mVcdFile, tmp_1_reg_295, "tmp_1_reg_295");
    sc_trace(mVcdFile, input_addr_reg_300, "input_addr_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, input_addr_read_reg_306, "input_addr_read_reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_fu_231_p2, "grp_fu_231_p2");
    sc_trace(mVcdFile, tmp_4_reg_326, "tmp_4_reg_326");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, j_reg_98, "j_reg_98");
    sc_trace(mVcdFile, i_reg_110, "i_reg_110");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp_11_cast_fu_224_p1, "tmp_11_cast_fu_224_p1");
    sc_trace(mVcdFile, sum1_fu_213_p2, "sum1_fu_213_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_input_r_ARREADY, "ap_reg_ioackin_m_axi_input_r_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_input_r_ARREADY, "ap_sig_ioackin_m_axi_input_r_ARREADY");
    sc_trace(mVcdFile, res_fu_52, "res_fu_52");
    sc_trace(mVcdFile, res_1_fu_237_p2, "res_1_fu_237_p2");
    sc_trace(mVcdFile, tmp_2_cast_fu_151_p1, "tmp_2_cast_fu_151_p1");
    sc_trace(mVcdFile, tmp5_fu_155_p2, "tmp5_fu_155_p2");
    sc_trace(mVcdFile, tmp1_fu_160_p3, "tmp1_fu_160_p3");
    sc_trace(mVcdFile, j_cast7_fu_171_p1, "j_cast7_fu_171_p1");
    sc_trace(mVcdFile, tmp1_cast_fu_167_p1, "tmp1_cast_fu_167_p1");
    sc_trace(mVcdFile, tmp_fu_191_p3, "tmp_fu_191_p3");
    sc_trace(mVcdFile, i_2_cast_cast_fu_187_p1, "i_2_cast_cast_fu_187_p1");
    sc_trace(mVcdFile, tmp_s_fu_199_p2, "tmp_s_fu_199_p2");
    sc_trace(mVcdFile, sum_cast_fu_210_p1, "sum_cast_fu_210_p1");
    sc_trace(mVcdFile, grp_fu_231_p0, "grp_fu_231_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_231_p00, "grp_fu_231_p00");
#endif

    }
}

convolution2D::~convolution2D() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sobel_mul_8ns_32sbkb_U0;
}

void convolution2D::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void convolution2D::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_input_r_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_input_r_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_input_r_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_input_r_ARREADY.read())) {
                ap_reg_ioackin_m_axi_input_r_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_129_p2.read()))) {
        i_reg_110 = ap_const_lv3_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_reg_110 = i_2_reg_290.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_1))) {
        j_reg_98 = j_2_reg_272.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_98 = ap_const_lv3_7;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        res_fu_52 = res_1_fu_237_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        res_fu_52 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_145_p2.read()))) {
        i_2_reg_290 = i_2_fu_181_p2.read();
        sum_reg_285 = sum_fu_175_p2.read();
        tmp_1_reg_295 = tmp_1_fu_205_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_1))) {
        input_addr_read_reg_306 = m_axi_input_r_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_addr_reg_300 = sum1_fu_213_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_129_p2.read()))) {
        j_2_cast_reg_277 = j_2_cast_fu_141_p1.read();
        j_2_reg_272 = j_2_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp_4_reg_326 = grp_fu_231_p2.read();
    }
}

void convolution2D::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolution2D::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void convolution2D::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void convolution2D::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void convolution2D::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void convolution2D::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolution2D::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolution2D::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void convolution2D::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void convolution2D::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_129_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolution2D::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolution2D::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_129_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolution2D::thread_ap_return() {
    ap_return = res_fu_52.read();
}

void convolution2D::thread_ap_sig_ioackin_m_axi_input_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input_r_ARREADY.read())) {
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_input_r_ARREADY = ap_const_logic_1;
    }
}

void convolution2D::thread_exitcond1_fu_129_p2() {
    exitcond1_fu_129_p2 = (!j_reg_98.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_98.read() == ap_const_lv3_2);
}

void convolution2D::thread_exitcond_fu_145_p2() {
    exitcond_fu_145_p2 = (!i_reg_110.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_110.read() == ap_const_lv3_2);
}

void convolution2D::thread_grp_fu_231_p0() {
    grp_fu_231_p0 =  (sc_lv<8>) (grp_fu_231_p00.read());
}

void convolution2D::thread_grp_fu_231_p00() {
    grp_fu_231_p00 = esl_zext<32,8>(input_addr_read_reg_306.read());
}

void convolution2D::thread_i_2_cast_cast_fu_187_p1() {
    i_2_cast_cast_fu_187_p1 = esl_zext<5,3>(i_2_fu_181_p2.read());
}

void convolution2D::thread_i_2_fu_181_p2() {
    i_2_fu_181_p2 = (!i_reg_110.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_110.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void convolution2D::thread_input_r_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        input_r_blk_n_AR = m_axi_input_r_ARREADY.read();
    } else {
        input_r_blk_n_AR = ap_const_logic_1;
    }
}

void convolution2D::thread_input_r_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        input_r_blk_n_R = m_axi_input_r_RVALID.read();
    } else {
        input_r_blk_n_R = ap_const_logic_1;
    }
}

void convolution2D::thread_j_2_cast_fu_141_p1() {
    j_2_cast_fu_141_p1 = esl_zext<5,3>(j_2_fu_135_p2.read());
}

void convolution2D::thread_j_2_fu_135_p2() {
    j_2_fu_135_p2 = (!j_reg_98.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_98.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void convolution2D::thread_j_cast7_fu_171_p1() {
    j_cast7_fu_171_p1 = esl_sext<22,3>(j_reg_98.read());
}

void convolution2D::thread_m_axi_input_r_ARADDR() {
    m_axi_input_r_ARADDR = input_addr_reg_300.read();
}

void convolution2D::thread_m_axi_input_r_ARBURST() {
    m_axi_input_r_ARBURST = ap_const_lv2_0;
}

void convolution2D::thread_m_axi_input_r_ARCACHE() {
    m_axi_input_r_ARCACHE = ap_const_lv4_0;
}

void convolution2D::thread_m_axi_input_r_ARID() {
    m_axi_input_r_ARID = ap_const_lv1_0;
}

void convolution2D::thread_m_axi_input_r_ARLEN() {
    m_axi_input_r_ARLEN = ap_const_lv32_1;
}

void convolution2D::thread_m_axi_input_r_ARLOCK() {
    m_axi_input_r_ARLOCK = ap_const_lv2_0;
}

void convolution2D::thread_m_axi_input_r_ARPROT() {
    m_axi_input_r_ARPROT = ap_const_lv3_0;
}

void convolution2D::thread_m_axi_input_r_ARQOS() {
    m_axi_input_r_ARQOS = ap_const_lv4_0;
}

void convolution2D::thread_m_axi_input_r_ARREGION() {
    m_axi_input_r_ARREGION = ap_const_lv4_0;
}

void convolution2D::thread_m_axi_input_r_ARSIZE() {
    m_axi_input_r_ARSIZE = ap_const_lv3_0;
}

void convolution2D::thread_m_axi_input_r_ARUSER() {
    m_axi_input_r_ARUSER = ap_const_lv1_0;
}

void convolution2D::thread_m_axi_input_r_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input_r_ARREADY.read()))) {
        m_axi_input_r_ARVALID = ap_const_logic_1;
    } else {
        m_axi_input_r_ARVALID = ap_const_logic_0;
    }
}

void convolution2D::thread_m_axi_input_r_AWADDR() {
    m_axi_input_r_AWADDR = ap_const_lv32_0;
}

void convolution2D::thread_m_axi_input_r_AWBURST() {
    m_axi_input_r_AWBURST = ap_const_lv2_0;
}

void convolution2D::thread_m_axi_input_r_AWCACHE() {
    m_axi_input_r_AWCACHE = ap_const_lv4_0;
}

void convolution2D::thread_m_axi_input_r_AWID() {
    m_axi_input_r_AWID = ap_const_lv1_0;
}

void convolution2D::thread_m_axi_input_r_AWLEN() {
    m_axi_input_r_AWLEN = ap_const_lv32_0;
}

void convolution2D::thread_m_axi_input_r_AWLOCK() {
    m_axi_input_r_AWLOCK = ap_const_lv2_0;
}

void convolution2D::thread_m_axi_input_r_AWPROT() {
    m_axi_input_r_AWPROT = ap_const_lv3_0;
}

void convolution2D::thread_m_axi_input_r_AWQOS() {
    m_axi_input_r_AWQOS = ap_const_lv4_0;
}

void convolution2D::thread_m_axi_input_r_AWREGION() {
    m_axi_input_r_AWREGION = ap_const_lv4_0;
}

void convolution2D::thread_m_axi_input_r_AWSIZE() {
    m_axi_input_r_AWSIZE = ap_const_lv3_0;
}

void convolution2D::thread_m_axi_input_r_AWUSER() {
    m_axi_input_r_AWUSER = ap_const_lv1_0;
}

void convolution2D::thread_m_axi_input_r_AWVALID() {
    m_axi_input_r_AWVALID = ap_const_logic_0;
}

void convolution2D::thread_m_axi_input_r_BREADY() {
    m_axi_input_r_BREADY = ap_const_logic_0;
}

void convolution2D::thread_m_axi_input_r_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_1))) {
        m_axi_input_r_RREADY = ap_const_logic_1;
    } else {
        m_axi_input_r_RREADY = ap_const_logic_0;
    }
}

void convolution2D::thread_m_axi_input_r_WDATA() {
    m_axi_input_r_WDATA = ap_const_lv8_0;
}

void convolution2D::thread_m_axi_input_r_WID() {
    m_axi_input_r_WID = ap_const_lv1_0;
}

void convolution2D::thread_m_axi_input_r_WLAST() {
    m_axi_input_r_WLAST = ap_const_logic_0;
}

void convolution2D::thread_m_axi_input_r_WSTRB() {
    m_axi_input_r_WSTRB = ap_const_lv1_0;
}

void convolution2D::thread_m_axi_input_r_WUSER() {
    m_axi_input_r_WUSER = ap_const_lv1_0;
}

void convolution2D::thread_m_axi_input_r_WVALID() {
    m_axi_input_r_WVALID = ap_const_logic_0;
}

void convolution2D::thread_operator_address0() {
    operator_address0 =  (sc_lv<4>) (tmp_11_cast_fu_224_p1.read());
}

void convolution2D::thread_operator_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_1))) {
        operator_ce0 = ap_const_logic_1;
    } else {
        operator_ce0 = ap_const_logic_0;
    }
}

void convolution2D::thread_res_1_fu_237_p2() {
    res_1_fu_237_p2 = (!res_fu_52.read().is_01() || !tmp_4_reg_326.read().is_01())? sc_lv<32>(): (sc_biguint<32>(res_fu_52.read()) + sc_biguint<32>(tmp_4_reg_326.read()));
}

void convolution2D::thread_sum1_fu_213_p2() {
    sum1_fu_213_p2 = (!input1.read().is_01() || !sum_cast_fu_210_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(input1.read()) + sc_biguint<32>(sum_cast_fu_210_p1.read()));
}

void convolution2D::thread_sum_cast_fu_210_p1() {
    sum_cast_fu_210_p1 = esl_zext<32,22>(sum_reg_285.read());
}

void convolution2D::thread_sum_fu_175_p2() {
    sum_fu_175_p2 = (!j_cast7_fu_171_p1.read().is_01() || !tmp1_cast_fu_167_p1.read().is_01())? sc_lv<22>(): (sc_bigint<22>(j_cast7_fu_171_p1.read()) + sc_biguint<22>(tmp1_cast_fu_167_p1.read()));
}

void convolution2D::thread_tmp1_cast_fu_167_p1() {
    tmp1_cast_fu_167_p1 = esl_zext<22,20>(tmp1_fu_160_p3.read());
}

void convolution2D::thread_tmp1_fu_160_p3() {
    tmp1_fu_160_p3 = esl_concat<10,10>(tmp5_fu_155_p2.read(), posx.read());
}

void convolution2D::thread_tmp5_fu_155_p2() {
    tmp5_fu_155_p2 = (!posy.read().is_01() || !tmp_2_cast_fu_151_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(posy.read()) + sc_bigint<10>(tmp_2_cast_fu_151_p1.read()));
}

void convolution2D::thread_tmp_11_cast_fu_224_p1() {
    tmp_11_cast_fu_224_p1 = esl_zext<32,5>(tmp_1_reg_295.read());
}

void convolution2D::thread_tmp_1_fu_205_p2() {
    tmp_1_fu_205_p2 = (!tmp_s_fu_199_p2.read().is_01() || !j_2_cast_reg_277.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_s_fu_199_p2.read()) + sc_biguint<5>(j_2_cast_reg_277.read()));
}

void convolution2D::thread_tmp_2_cast_fu_151_p1() {
    tmp_2_cast_fu_151_p1 = esl_sext<10,3>(i_reg_110.read());
}

void convolution2D::thread_tmp_fu_191_p3() {
    tmp_fu_191_p3 = esl_concat<3,2>(i_2_fu_181_p2.read(), ap_const_lv2_0);
}

void convolution2D::thread_tmp_s_fu_199_p2() {
    tmp_s_fu_199_p2 = (!tmp_fu_191_p3.read().is_01() || !i_2_cast_cast_fu_187_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_fu_191_p3.read()) - sc_biguint<5>(i_2_cast_cast_fu_187_p1.read()));
}

void convolution2D::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_129_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_input_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXX";
            break;
    }
}

}

