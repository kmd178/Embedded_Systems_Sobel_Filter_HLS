// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _convolution2D_HH_
#define _convolution2D_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sobel_mul_8ns_32sbkb.h"

namespace ap_rtl {

struct convolution2D : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<10> > posy;
    sc_in< sc_lv<10> > posx;
    sc_out< sc_logic > m_axi_input_r_AWVALID;
    sc_in< sc_logic > m_axi_input_r_AWREADY;
    sc_out< sc_lv<32> > m_axi_input_r_AWADDR;
    sc_out< sc_lv<1> > m_axi_input_r_AWID;
    sc_out< sc_lv<32> > m_axi_input_r_AWLEN;
    sc_out< sc_lv<3> > m_axi_input_r_AWSIZE;
    sc_out< sc_lv<2> > m_axi_input_r_AWBURST;
    sc_out< sc_lv<2> > m_axi_input_r_AWLOCK;
    sc_out< sc_lv<4> > m_axi_input_r_AWCACHE;
    sc_out< sc_lv<3> > m_axi_input_r_AWPROT;
    sc_out< sc_lv<4> > m_axi_input_r_AWQOS;
    sc_out< sc_lv<4> > m_axi_input_r_AWREGION;
    sc_out< sc_lv<1> > m_axi_input_r_AWUSER;
    sc_out< sc_logic > m_axi_input_r_WVALID;
    sc_in< sc_logic > m_axi_input_r_WREADY;
    sc_out< sc_lv<8> > m_axi_input_r_WDATA;
    sc_out< sc_lv<1> > m_axi_input_r_WSTRB;
    sc_out< sc_logic > m_axi_input_r_WLAST;
    sc_out< sc_lv<1> > m_axi_input_r_WID;
    sc_out< sc_lv<1> > m_axi_input_r_WUSER;
    sc_out< sc_logic > m_axi_input_r_ARVALID;
    sc_in< sc_logic > m_axi_input_r_ARREADY;
    sc_out< sc_lv<32> > m_axi_input_r_ARADDR;
    sc_out< sc_lv<1> > m_axi_input_r_ARID;
    sc_out< sc_lv<32> > m_axi_input_r_ARLEN;
    sc_out< sc_lv<3> > m_axi_input_r_ARSIZE;
    sc_out< sc_lv<2> > m_axi_input_r_ARBURST;
    sc_out< sc_lv<2> > m_axi_input_r_ARLOCK;
    sc_out< sc_lv<4> > m_axi_input_r_ARCACHE;
    sc_out< sc_lv<3> > m_axi_input_r_ARPROT;
    sc_out< sc_lv<4> > m_axi_input_r_ARQOS;
    sc_out< sc_lv<4> > m_axi_input_r_ARREGION;
    sc_out< sc_lv<1> > m_axi_input_r_ARUSER;
    sc_in< sc_logic > m_axi_input_r_RVALID;
    sc_out< sc_logic > m_axi_input_r_RREADY;
    sc_in< sc_lv<8> > m_axi_input_r_RDATA;
    sc_in< sc_logic > m_axi_input_r_RLAST;
    sc_in< sc_lv<1> > m_axi_input_r_RID;
    sc_in< sc_lv<1> > m_axi_input_r_RUSER;
    sc_in< sc_lv<2> > m_axi_input_r_RRESP;
    sc_in< sc_logic > m_axi_input_r_BVALID;
    sc_out< sc_logic > m_axi_input_r_BREADY;
    sc_in< sc_lv<2> > m_axi_input_r_BRESP;
    sc_in< sc_lv<1> > m_axi_input_r_BID;
    sc_in< sc_lv<1> > m_axi_input_r_BUSER;
    sc_in< sc_lv<32> > input1;
    sc_out< sc_lv<4> > operator_address0;
    sc_out< sc_logic > operator_ce0;
    sc_in< sc_lv<32> > operator_q0;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    convolution2D(sc_module_name name);
    SC_HAS_PROCESS(convolution2D);

    ~convolution2D();

    sc_trace_file* mVcdFile;

    sobel_mul_8ns_32sbkb<1,3,8,32,32>* sobel_mul_8ns_32sbkb_U0;
    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_r_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > input_r_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<3> > j_2_fu_135_p2;
    sc_signal< sc_lv<3> > j_2_reg_272;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond1_fu_129_p2;
    sc_signal< sc_lv<5> > j_2_cast_fu_141_p1;
    sc_signal< sc_lv<5> > j_2_cast_reg_277;
    sc_signal< sc_lv<22> > sum_fu_175_p2;
    sc_signal< sc_lv<22> > sum_reg_285;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_145_p2;
    sc_signal< sc_lv<3> > i_2_fu_181_p2;
    sc_signal< sc_lv<3> > i_2_reg_290;
    sc_signal< sc_lv<5> > tmp_1_fu_205_p2;
    sc_signal< sc_lv<5> > tmp_1_reg_295;
    sc_signal< sc_lv<32> > input_addr_reg_300;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > input_addr_read_reg_306;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<32> > grp_fu_231_p2;
    sc_signal< sc_lv<32> > tmp_4_reg_326;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<3> > j_reg_98;
    sc_signal< sc_lv<3> > i_reg_110;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<32> > tmp_11_cast_fu_224_p1;
    sc_signal< sc_lv<32> > sum1_fu_213_p2;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_input_r_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_input_r_ARREADY;
    sc_signal< sc_lv<32> > res_fu_52;
    sc_signal< sc_lv<32> > res_1_fu_237_p2;
    sc_signal< sc_lv<10> > tmp_2_cast_fu_151_p1;
    sc_signal< sc_lv<10> > tmp5_fu_155_p2;
    sc_signal< sc_lv<20> > tmp1_fu_160_p3;
    sc_signal< sc_lv<22> > j_cast7_fu_171_p1;
    sc_signal< sc_lv<22> > tmp1_cast_fu_167_p1;
    sc_signal< sc_lv<5> > tmp_fu_191_p3;
    sc_signal< sc_lv<5> > i_2_cast_cast_fu_187_p1;
    sc_signal< sc_lv<5> > tmp_s_fu_199_p2;
    sc_signal< sc_lv<32> > sum_cast_fu_210_p1;
    sc_signal< sc_lv<8> > grp_fu_231_p0;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    sc_signal< sc_lv<32> > grp_fu_231_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_fsm_state1;
    static const sc_lv<16> ap_ST_fsm_state2;
    static const sc_lv<16> ap_ST_fsm_state3;
    static const sc_lv<16> ap_ST_fsm_state4;
    static const sc_lv<16> ap_ST_fsm_state5;
    static const sc_lv<16> ap_ST_fsm_state6;
    static const sc_lv<16> ap_ST_fsm_state7;
    static const sc_lv<16> ap_ST_fsm_state8;
    static const sc_lv<16> ap_ST_fsm_state9;
    static const sc_lv<16> ap_ST_fsm_state10;
    static const sc_lv<16> ap_ST_fsm_state11;
    static const sc_lv<16> ap_ST_fsm_state12;
    static const sc_lv<16> ap_ST_fsm_state13;
    static const sc_lv<16> ap_ST_fsm_state14;
    static const sc_lv<16> ap_ST_fsm_state15;
    static const sc_lv<16> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_ioackin_m_axi_input_r_ARREADY();
    void thread_exitcond1_fu_129_p2();
    void thread_exitcond_fu_145_p2();
    void thread_grp_fu_231_p0();
    void thread_grp_fu_231_p00();
    void thread_i_2_cast_cast_fu_187_p1();
    void thread_i_2_fu_181_p2();
    void thread_input_r_blk_n_AR();
    void thread_input_r_blk_n_R();
    void thread_j_2_cast_fu_141_p1();
    void thread_j_2_fu_135_p2();
    void thread_j_cast7_fu_171_p1();
    void thread_m_axi_input_r_ARADDR();
    void thread_m_axi_input_r_ARBURST();
    void thread_m_axi_input_r_ARCACHE();
    void thread_m_axi_input_r_ARID();
    void thread_m_axi_input_r_ARLEN();
    void thread_m_axi_input_r_ARLOCK();
    void thread_m_axi_input_r_ARPROT();
    void thread_m_axi_input_r_ARQOS();
    void thread_m_axi_input_r_ARREGION();
    void thread_m_axi_input_r_ARSIZE();
    void thread_m_axi_input_r_ARUSER();
    void thread_m_axi_input_r_ARVALID();
    void thread_m_axi_input_r_AWADDR();
    void thread_m_axi_input_r_AWBURST();
    void thread_m_axi_input_r_AWCACHE();
    void thread_m_axi_input_r_AWID();
    void thread_m_axi_input_r_AWLEN();
    void thread_m_axi_input_r_AWLOCK();
    void thread_m_axi_input_r_AWPROT();
    void thread_m_axi_input_r_AWQOS();
    void thread_m_axi_input_r_AWREGION();
    void thread_m_axi_input_r_AWSIZE();
    void thread_m_axi_input_r_AWUSER();
    void thread_m_axi_input_r_AWVALID();
    void thread_m_axi_input_r_BREADY();
    void thread_m_axi_input_r_RREADY();
    void thread_m_axi_input_r_WDATA();
    void thread_m_axi_input_r_WID();
    void thread_m_axi_input_r_WLAST();
    void thread_m_axi_input_r_WSTRB();
    void thread_m_axi_input_r_WUSER();
    void thread_m_axi_input_r_WVALID();
    void thread_operator_address0();
    void thread_operator_ce0();
    void thread_res_1_fu_237_p2();
    void thread_sum1_fu_213_p2();
    void thread_sum_cast_fu_210_p1();
    void thread_sum_fu_175_p2();
    void thread_tmp1_cast_fu_167_p1();
    void thread_tmp1_fu_160_p3();
    void thread_tmp5_fu_155_p2();
    void thread_tmp_11_cast_fu_224_p1();
    void thread_tmp_1_fu_205_p2();
    void thread_tmp_2_cast_fu_151_p1();
    void thread_tmp_fu_191_p3();
    void thread_tmp_s_fu_199_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
