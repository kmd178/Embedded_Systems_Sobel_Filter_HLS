// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sobel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sobel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sobel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<62> sobel::ap_ST_fsm_state1 = "1";
const sc_lv<62> sobel::ap_ST_fsm_state2 = "10";
const sc_lv<62> sobel::ap_ST_fsm_state3 = "100";
const sc_lv<62> sobel::ap_ST_fsm_state4 = "1000";
const sc_lv<62> sobel::ap_ST_fsm_state5 = "10000";
const sc_lv<62> sobel::ap_ST_fsm_state6 = "100000";
const sc_lv<62> sobel::ap_ST_fsm_state7 = "1000000";
const sc_lv<62> sobel::ap_ST_fsm_state8 = "10000000";
const sc_lv<62> sobel::ap_ST_fsm_state9 = "100000000";
const sc_lv<62> sobel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<62> sobel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<62> sobel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<62> sobel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> sobel::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> sobel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sobel::ap_const_lv32_38 = "111000";
const sc_lv<32> sobel::ap_const_lv32_39 = "111001";
const sc_lv<32> sobel::ap_const_lv32_37 = "110111";
const sc_lv<1> sobel::ap_const_lv1_1 = "1";
const sc_lv<32> sobel::ap_const_lv32_31 = "110001";
const sc_lv<32> sobel::ap_const_lv32_32 = "110010";
const sc_lv<1> sobel::ap_const_lv1_0 = "0";
const int sobel::C_S_AXI_DATA_WIDTH = "100000";
const int sobel::C_M_AXI_INPUT_BUNDLE_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_INPUT_BUNDLE_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_INPUT_BUNDLE_CACHE_VALUE = "11";
const int sobel::C_M_AXI_DATA_WIDTH = "100000";
const int sobel::C_M_AXI_OUTPUT_BUNDLE_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE = "11";
const sc_lv<32> sobel::ap_const_lv32_2 = "10";
const sc_lv<32> sobel::ap_const_lv32_3 = "11";
const sc_lv<32> sobel::ap_const_lv32_5 = "101";
const sc_lv<32> sobel::ap_const_lv32_7 = "111";
const sc_lv<32> sobel::ap_const_lv32_8 = "1000";
const sc_lv<32> sobel::ap_const_lv32_E = "1110";
const sc_lv<32> sobel::ap_const_lv32_2D = "101101";
const sc_lv<32> sobel::ap_const_lv32_2E = "101110";
const sc_lv<32> sobel::ap_const_lv32_2F = "101111";
const sc_lv<32> sobel::ap_const_lv32_30 = "110000";
const sc_lv<10> sobel::ap_const_lv10_1 = "1";
const sc_lv<32> sobel::ap_const_lv32_1 = "1";
const sc_lv<32> sobel::ap_const_lv32_4 = "100";
const sc_lv<3> sobel::ap_const_lv3_0 = "000";
const sc_lv<2> sobel::ap_const_lv2_0 = "00";
const sc_lv<4> sobel::ap_const_lv4_0 = "0000";
const sc_lv<8> sobel::ap_const_lv8_FF = "11111111";
const sc_lv<32> sobel::ap_const_lv32_9 = "1001";
const sc_lv<32> sobel::ap_const_lv32_F = "1111";
const sc_lv<10> sobel::ap_const_lv10_3FF = "1111111111";
const sc_lv<32> sobel::ap_const_lv32_3F = "111111";
const sc_lv<32> sobel::ap_const_lv32_34 = "110100";
const sc_lv<32> sobel::ap_const_lv32_3E = "111110";
const sc_lv<12> sobel::ap_const_lv12_C01 = "110000000001";
const sc_lv<32> sobel::ap_const_lv32_B = "1011";
const sc_lv<11> sobel::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> sobel::ap_const_lv32_35 = "110101";
const sc_lv<32> sobel::ap_const_lv32_53 = "1010011";
const sc_lv<32> sobel::ap_const_lv32_1F = "11111";
const sc_lv<24> sobel::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<32> sobel::ap_const_lv32_6 = "110";
const sc_lv<8> sobel::ap_const_lv8_0 = "00000000";
const sc_lv<64> sobel::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool sobel::ap_const_boolean_1 = true;

sobel::sobel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    horiz_operator_U = new sobel_horiz_operacud("horiz_operator_U");
    horiz_operator_U->clk(ap_clk);
    horiz_operator_U->reset(ap_rst_n_inv);
    horiz_operator_U->address0(grp_convolution2D_fu_160_operator_address0);
    horiz_operator_U->ce0(horiz_operator_ce0);
    horiz_operator_U->q0(horiz_operator_q0);
    vert_operator_U = new sobel_vert_operator("vert_operator_U");
    vert_operator_U->clk(ap_clk);
    vert_operator_U->reset(ap_rst_n_inv);
    vert_operator_U->address0(grp_convolution2D_fu_160_operator_address0);
    vert_operator_U->ce0(vert_operator_ce0);
    vert_operator_U->q0(vert_operator_q0);
    sobel_AXILiteS_s_axi_U = new sobel_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sobel_AXILiteS_s_axi_U");
    sobel_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sobel_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sobel_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sobel_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sobel_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sobel_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sobel_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sobel_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sobel_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sobel_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sobel_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sobel_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sobel_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sobel_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sobel_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sobel_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sobel_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sobel_AXILiteS_s_axi_U->ACLK(ap_clk);
    sobel_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sobel_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_AXILiteS_s_axi_U->ap_start(ap_start);
    sobel_AXILiteS_s_axi_U->interrupt(interrupt);
    sobel_AXILiteS_s_axi_U->ap_ready(ap_ready);
    sobel_AXILiteS_s_axi_U->ap_done(ap_done);
    sobel_AXILiteS_s_axi_U->ap_idle(ap_idle);
    sobel_AXILiteS_s_axi_U->input_r(input_r);
    sobel_AXILiteS_s_axi_U->output_r(output_r);
    sobel_INPUT_BUNDLE_m_axi_U = new sobel_INPUT_BUNDLE_m_axi<8,32,5,16,16,16,16,C_M_AXI_INPUT_BUNDLE_ID_WIDTH,C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH,C_M_AXI_INPUT_BUNDLE_DATA_WIDTH,C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_USER_VALUE,C_M_AXI_INPUT_BUNDLE_PROT_VALUE,C_M_AXI_INPUT_BUNDLE_CACHE_VALUE>("sobel_INPUT_BUNDLE_m_axi_U");
    sobel_INPUT_BUNDLE_m_axi_U->AWVALID(m_axi_INPUT_BUNDLE_AWVALID);
    sobel_INPUT_BUNDLE_m_axi_U->AWREADY(m_axi_INPUT_BUNDLE_AWREADY);
    sobel_INPUT_BUNDLE_m_axi_U->AWADDR(m_axi_INPUT_BUNDLE_AWADDR);
    sobel_INPUT_BUNDLE_m_axi_U->AWID(m_axi_INPUT_BUNDLE_AWID);
    sobel_INPUT_BUNDLE_m_axi_U->AWLEN(m_axi_INPUT_BUNDLE_AWLEN);
    sobel_INPUT_BUNDLE_m_axi_U->AWSIZE(m_axi_INPUT_BUNDLE_AWSIZE);
    sobel_INPUT_BUNDLE_m_axi_U->AWBURST(m_axi_INPUT_BUNDLE_AWBURST);
    sobel_INPUT_BUNDLE_m_axi_U->AWLOCK(m_axi_INPUT_BUNDLE_AWLOCK);
    sobel_INPUT_BUNDLE_m_axi_U->AWCACHE(m_axi_INPUT_BUNDLE_AWCACHE);
    sobel_INPUT_BUNDLE_m_axi_U->AWPROT(m_axi_INPUT_BUNDLE_AWPROT);
    sobel_INPUT_BUNDLE_m_axi_U->AWQOS(m_axi_INPUT_BUNDLE_AWQOS);
    sobel_INPUT_BUNDLE_m_axi_U->AWREGION(m_axi_INPUT_BUNDLE_AWREGION);
    sobel_INPUT_BUNDLE_m_axi_U->AWUSER(m_axi_INPUT_BUNDLE_AWUSER);
    sobel_INPUT_BUNDLE_m_axi_U->WVALID(m_axi_INPUT_BUNDLE_WVALID);
    sobel_INPUT_BUNDLE_m_axi_U->WREADY(m_axi_INPUT_BUNDLE_WREADY);
    sobel_INPUT_BUNDLE_m_axi_U->WDATA(m_axi_INPUT_BUNDLE_WDATA);
    sobel_INPUT_BUNDLE_m_axi_U->WSTRB(m_axi_INPUT_BUNDLE_WSTRB);
    sobel_INPUT_BUNDLE_m_axi_U->WLAST(m_axi_INPUT_BUNDLE_WLAST);
    sobel_INPUT_BUNDLE_m_axi_U->WID(m_axi_INPUT_BUNDLE_WID);
    sobel_INPUT_BUNDLE_m_axi_U->WUSER(m_axi_INPUT_BUNDLE_WUSER);
    sobel_INPUT_BUNDLE_m_axi_U->ARVALID(m_axi_INPUT_BUNDLE_ARVALID);
    sobel_INPUT_BUNDLE_m_axi_U->ARREADY(m_axi_INPUT_BUNDLE_ARREADY);
    sobel_INPUT_BUNDLE_m_axi_U->ARADDR(m_axi_INPUT_BUNDLE_ARADDR);
    sobel_INPUT_BUNDLE_m_axi_U->ARID(m_axi_INPUT_BUNDLE_ARID);
    sobel_INPUT_BUNDLE_m_axi_U->ARLEN(m_axi_INPUT_BUNDLE_ARLEN);
    sobel_INPUT_BUNDLE_m_axi_U->ARSIZE(m_axi_INPUT_BUNDLE_ARSIZE);
    sobel_INPUT_BUNDLE_m_axi_U->ARBURST(m_axi_INPUT_BUNDLE_ARBURST);
    sobel_INPUT_BUNDLE_m_axi_U->ARLOCK(m_axi_INPUT_BUNDLE_ARLOCK);
    sobel_INPUT_BUNDLE_m_axi_U->ARCACHE(m_axi_INPUT_BUNDLE_ARCACHE);
    sobel_INPUT_BUNDLE_m_axi_U->ARPROT(m_axi_INPUT_BUNDLE_ARPROT);
    sobel_INPUT_BUNDLE_m_axi_U->ARQOS(m_axi_INPUT_BUNDLE_ARQOS);
    sobel_INPUT_BUNDLE_m_axi_U->ARREGION(m_axi_INPUT_BUNDLE_ARREGION);
    sobel_INPUT_BUNDLE_m_axi_U->ARUSER(m_axi_INPUT_BUNDLE_ARUSER);
    sobel_INPUT_BUNDLE_m_axi_U->RVALID(m_axi_INPUT_BUNDLE_RVALID);
    sobel_INPUT_BUNDLE_m_axi_U->RREADY(m_axi_INPUT_BUNDLE_RREADY);
    sobel_INPUT_BUNDLE_m_axi_U->RDATA(m_axi_INPUT_BUNDLE_RDATA);
    sobel_INPUT_BUNDLE_m_axi_U->RLAST(m_axi_INPUT_BUNDLE_RLAST);
    sobel_INPUT_BUNDLE_m_axi_U->RID(m_axi_INPUT_BUNDLE_RID);
    sobel_INPUT_BUNDLE_m_axi_U->RUSER(m_axi_INPUT_BUNDLE_RUSER);
    sobel_INPUT_BUNDLE_m_axi_U->RRESP(m_axi_INPUT_BUNDLE_RRESP);
    sobel_INPUT_BUNDLE_m_axi_U->BVALID(m_axi_INPUT_BUNDLE_BVALID);
    sobel_INPUT_BUNDLE_m_axi_U->BREADY(m_axi_INPUT_BUNDLE_BREADY);
    sobel_INPUT_BUNDLE_m_axi_U->BRESP(m_axi_INPUT_BUNDLE_BRESP);
    sobel_INPUT_BUNDLE_m_axi_U->BID(m_axi_INPUT_BUNDLE_BID);
    sobel_INPUT_BUNDLE_m_axi_U->BUSER(m_axi_INPUT_BUNDLE_BUSER);
    sobel_INPUT_BUNDLE_m_axi_U->ACLK(ap_clk);
    sobel_INPUT_BUNDLE_m_axi_U->ARESET(ap_rst_n_inv);
    sobel_INPUT_BUNDLE_m_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARVALID(INPUT_BUNDLE_ARVALID);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARREADY(INPUT_BUNDLE_ARREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARADDR(grp_convolution2D_fu_160_m_axi_input_r_ARADDR);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARID(grp_convolution2D_fu_160_m_axi_input_r_ARID);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARLEN(grp_convolution2D_fu_160_m_axi_input_r_ARLEN);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARSIZE(grp_convolution2D_fu_160_m_axi_input_r_ARSIZE);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARLOCK(grp_convolution2D_fu_160_m_axi_input_r_ARLOCK);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARCACHE(grp_convolution2D_fu_160_m_axi_input_r_ARCACHE);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARQOS(grp_convolution2D_fu_160_m_axi_input_r_ARQOS);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARPROT(grp_convolution2D_fu_160_m_axi_input_r_ARPROT);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARUSER(grp_convolution2D_fu_160_m_axi_input_r_ARUSER);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARBURST(grp_convolution2D_fu_160_m_axi_input_r_ARBURST);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARREGION(grp_convolution2D_fu_160_m_axi_input_r_ARREGION);
    sobel_INPUT_BUNDLE_m_axi_U->I_RVALID(INPUT_BUNDLE_RVALID);
    sobel_INPUT_BUNDLE_m_axi_U->I_RREADY(INPUT_BUNDLE_RREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_RDATA(INPUT_BUNDLE_RDATA);
    sobel_INPUT_BUNDLE_m_axi_U->I_RID(INPUT_BUNDLE_RID);
    sobel_INPUT_BUNDLE_m_axi_U->I_RUSER(INPUT_BUNDLE_RUSER);
    sobel_INPUT_BUNDLE_m_axi_U->I_RRESP(INPUT_BUNDLE_RRESP);
    sobel_INPUT_BUNDLE_m_axi_U->I_RLAST(INPUT_BUNDLE_RLAST);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWVALID(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWREADY(INPUT_BUNDLE_AWREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWADDR(ap_var_for_const2);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWID(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWLEN(ap_var_for_const2);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWSIZE(ap_var_for_const4);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWLOCK(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWCACHE(ap_var_for_const6);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWQOS(ap_var_for_const6);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWPROT(ap_var_for_const4);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWUSER(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWBURST(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWREGION(ap_var_for_const6);
    sobel_INPUT_BUNDLE_m_axi_U->I_WVALID(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_WREADY(INPUT_BUNDLE_WREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_WDATA(ap_var_for_const7);
    sobel_INPUT_BUNDLE_m_axi_U->I_WID(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_WUSER(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_WLAST(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_WSTRB(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_BVALID(INPUT_BUNDLE_BVALID);
    sobel_INPUT_BUNDLE_m_axi_U->I_BREADY(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_BRESP(INPUT_BUNDLE_BRESP);
    sobel_INPUT_BUNDLE_m_axi_U->I_BID(INPUT_BUNDLE_BID);
    sobel_INPUT_BUNDLE_m_axi_U->I_BUSER(INPUT_BUNDLE_BUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U = new sobel_OUTPUT_BUNDLE_m_axi<8,32,5,16,16,16,16,C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH,C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH,C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH,C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_USER_VALUE,C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE,C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE>("sobel_OUTPUT_BUNDLE_m_axi_U");
    sobel_OUTPUT_BUNDLE_m_axi_U->AWVALID(m_axi_OUTPUT_BUNDLE_AWVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWREADY(m_axi_OUTPUT_BUNDLE_AWREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWADDR(m_axi_OUTPUT_BUNDLE_AWADDR);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWID(m_axi_OUTPUT_BUNDLE_AWID);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWLEN(m_axi_OUTPUT_BUNDLE_AWLEN);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWSIZE(m_axi_OUTPUT_BUNDLE_AWSIZE);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWBURST(m_axi_OUTPUT_BUNDLE_AWBURST);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWLOCK(m_axi_OUTPUT_BUNDLE_AWLOCK);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWCACHE(m_axi_OUTPUT_BUNDLE_AWCACHE);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWPROT(m_axi_OUTPUT_BUNDLE_AWPROT);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWQOS(m_axi_OUTPUT_BUNDLE_AWQOS);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWREGION(m_axi_OUTPUT_BUNDLE_AWREGION);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWUSER(m_axi_OUTPUT_BUNDLE_AWUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->WVALID(m_axi_OUTPUT_BUNDLE_WVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->WREADY(m_axi_OUTPUT_BUNDLE_WREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->WDATA(m_axi_OUTPUT_BUNDLE_WDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->WSTRB(m_axi_OUTPUT_BUNDLE_WSTRB);
    sobel_OUTPUT_BUNDLE_m_axi_U->WLAST(m_axi_OUTPUT_BUNDLE_WLAST);
    sobel_OUTPUT_BUNDLE_m_axi_U->WID(m_axi_OUTPUT_BUNDLE_WID);
    sobel_OUTPUT_BUNDLE_m_axi_U->WUSER(m_axi_OUTPUT_BUNDLE_WUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARVALID(m_axi_OUTPUT_BUNDLE_ARVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARREADY(m_axi_OUTPUT_BUNDLE_ARREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARADDR(m_axi_OUTPUT_BUNDLE_ARADDR);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARID(m_axi_OUTPUT_BUNDLE_ARID);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARLEN(m_axi_OUTPUT_BUNDLE_ARLEN);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARSIZE(m_axi_OUTPUT_BUNDLE_ARSIZE);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARBURST(m_axi_OUTPUT_BUNDLE_ARBURST);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARLOCK(m_axi_OUTPUT_BUNDLE_ARLOCK);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARCACHE(m_axi_OUTPUT_BUNDLE_ARCACHE);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARPROT(m_axi_OUTPUT_BUNDLE_ARPROT);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARQOS(m_axi_OUTPUT_BUNDLE_ARQOS);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARREGION(m_axi_OUTPUT_BUNDLE_ARREGION);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARUSER(m_axi_OUTPUT_BUNDLE_ARUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->RVALID(m_axi_OUTPUT_BUNDLE_RVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->RREADY(m_axi_OUTPUT_BUNDLE_RREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->RDATA(m_axi_OUTPUT_BUNDLE_RDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->RLAST(m_axi_OUTPUT_BUNDLE_RLAST);
    sobel_OUTPUT_BUNDLE_m_axi_U->RID(m_axi_OUTPUT_BUNDLE_RID);
    sobel_OUTPUT_BUNDLE_m_axi_U->RUSER(m_axi_OUTPUT_BUNDLE_RUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->RRESP(m_axi_OUTPUT_BUNDLE_RRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->BVALID(m_axi_OUTPUT_BUNDLE_BVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->BREADY(m_axi_OUTPUT_BUNDLE_BREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->BRESP(m_axi_OUTPUT_BUNDLE_BRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->BID(m_axi_OUTPUT_BUNDLE_BID);
    sobel_OUTPUT_BUNDLE_m_axi_U->BUSER(m_axi_OUTPUT_BUNDLE_BUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->ACLK(ap_clk);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARESET(ap_rst_n_inv);
    sobel_OUTPUT_BUNDLE_m_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARVALID(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARREADY(OUTPUT_BUNDLE_ARREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARADDR(ap_var_for_const2);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARID(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARLEN(ap_var_for_const2);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARSIZE(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARLOCK(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARCACHE(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARQOS(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARPROT(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARUSER(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARBURST(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARREGION(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RVALID(OUTPUT_BUNDLE_RVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RREADY(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RDATA(OUTPUT_BUNDLE_RDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RID(OUTPUT_BUNDLE_RID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RUSER(OUTPUT_BUNDLE_RUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RRESP(OUTPUT_BUNDLE_RRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RLAST(OUTPUT_BUNDLE_RLAST);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWVALID(OUTPUT_BUNDLE_AWVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWREADY(OUTPUT_BUNDLE_AWREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWADDR(OUTPUT_BUNDLE_AWADDR);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWID(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWLEN(ap_var_for_const8);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWSIZE(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWLOCK(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWCACHE(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWQOS(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWPROT(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWUSER(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWBURST(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWREGION(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WVALID(OUTPUT_BUNDLE_WVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WREADY(OUTPUT_BUNDLE_WREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WDATA(OUTPUT_BUNDLE_WDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WID(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WUSER(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WLAST(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WSTRB(ap_var_for_const9);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BVALID(OUTPUT_BUNDLE_BVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BREADY(OUTPUT_BUNDLE_BREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BRESP(OUTPUT_BUNDLE_BRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BID(OUTPUT_BUNDLE_BID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BUSER(OUTPUT_BUNDLE_BUSER);
    grp_convolution2D_fu_160 = new convolution2D("grp_convolution2D_fu_160");
    grp_convolution2D_fu_160->ap_clk(ap_clk);
    grp_convolution2D_fu_160->ap_rst(ap_rst_n_inv);
    grp_convolution2D_fu_160->ap_start(grp_convolution2D_fu_160_ap_start);
    grp_convolution2D_fu_160->ap_done(grp_convolution2D_fu_160_ap_done);
    grp_convolution2D_fu_160->ap_idle(grp_convolution2D_fu_160_ap_idle);
    grp_convolution2D_fu_160->ap_ready(grp_convolution2D_fu_160_ap_ready);
    grp_convolution2D_fu_160->posy(i_reg_148);
    grp_convolution2D_fu_160->posx(j_reg_136);
    grp_convolution2D_fu_160->m_axi_input_r_AWVALID(grp_convolution2D_fu_160_m_axi_input_r_AWVALID);
    grp_convolution2D_fu_160->m_axi_input_r_AWREADY(ap_var_for_const1);
    grp_convolution2D_fu_160->m_axi_input_r_AWADDR(grp_convolution2D_fu_160_m_axi_input_r_AWADDR);
    grp_convolution2D_fu_160->m_axi_input_r_AWID(grp_convolution2D_fu_160_m_axi_input_r_AWID);
    grp_convolution2D_fu_160->m_axi_input_r_AWLEN(grp_convolution2D_fu_160_m_axi_input_r_AWLEN);
    grp_convolution2D_fu_160->m_axi_input_r_AWSIZE(grp_convolution2D_fu_160_m_axi_input_r_AWSIZE);
    grp_convolution2D_fu_160->m_axi_input_r_AWBURST(grp_convolution2D_fu_160_m_axi_input_r_AWBURST);
    grp_convolution2D_fu_160->m_axi_input_r_AWLOCK(grp_convolution2D_fu_160_m_axi_input_r_AWLOCK);
    grp_convolution2D_fu_160->m_axi_input_r_AWCACHE(grp_convolution2D_fu_160_m_axi_input_r_AWCACHE);
    grp_convolution2D_fu_160->m_axi_input_r_AWPROT(grp_convolution2D_fu_160_m_axi_input_r_AWPROT);
    grp_convolution2D_fu_160->m_axi_input_r_AWQOS(grp_convolution2D_fu_160_m_axi_input_r_AWQOS);
    grp_convolution2D_fu_160->m_axi_input_r_AWREGION(grp_convolution2D_fu_160_m_axi_input_r_AWREGION);
    grp_convolution2D_fu_160->m_axi_input_r_AWUSER(grp_convolution2D_fu_160_m_axi_input_r_AWUSER);
    grp_convolution2D_fu_160->m_axi_input_r_WVALID(grp_convolution2D_fu_160_m_axi_input_r_WVALID);
    grp_convolution2D_fu_160->m_axi_input_r_WREADY(ap_var_for_const1);
    grp_convolution2D_fu_160->m_axi_input_r_WDATA(grp_convolution2D_fu_160_m_axi_input_r_WDATA);
    grp_convolution2D_fu_160->m_axi_input_r_WSTRB(grp_convolution2D_fu_160_m_axi_input_r_WSTRB);
    grp_convolution2D_fu_160->m_axi_input_r_WLAST(grp_convolution2D_fu_160_m_axi_input_r_WLAST);
    grp_convolution2D_fu_160->m_axi_input_r_WID(grp_convolution2D_fu_160_m_axi_input_r_WID);
    grp_convolution2D_fu_160->m_axi_input_r_WUSER(grp_convolution2D_fu_160_m_axi_input_r_WUSER);
    grp_convolution2D_fu_160->m_axi_input_r_ARVALID(grp_convolution2D_fu_160_m_axi_input_r_ARVALID);
    grp_convolution2D_fu_160->m_axi_input_r_ARREADY(INPUT_BUNDLE_ARREADY);
    grp_convolution2D_fu_160->m_axi_input_r_ARADDR(grp_convolution2D_fu_160_m_axi_input_r_ARADDR);
    grp_convolution2D_fu_160->m_axi_input_r_ARID(grp_convolution2D_fu_160_m_axi_input_r_ARID);
    grp_convolution2D_fu_160->m_axi_input_r_ARLEN(grp_convolution2D_fu_160_m_axi_input_r_ARLEN);
    grp_convolution2D_fu_160->m_axi_input_r_ARSIZE(grp_convolution2D_fu_160_m_axi_input_r_ARSIZE);
    grp_convolution2D_fu_160->m_axi_input_r_ARBURST(grp_convolution2D_fu_160_m_axi_input_r_ARBURST);
    grp_convolution2D_fu_160->m_axi_input_r_ARLOCK(grp_convolution2D_fu_160_m_axi_input_r_ARLOCK);
    grp_convolution2D_fu_160->m_axi_input_r_ARCACHE(grp_convolution2D_fu_160_m_axi_input_r_ARCACHE);
    grp_convolution2D_fu_160->m_axi_input_r_ARPROT(grp_convolution2D_fu_160_m_axi_input_r_ARPROT);
    grp_convolution2D_fu_160->m_axi_input_r_ARQOS(grp_convolution2D_fu_160_m_axi_input_r_ARQOS);
    grp_convolution2D_fu_160->m_axi_input_r_ARREGION(grp_convolution2D_fu_160_m_axi_input_r_ARREGION);
    grp_convolution2D_fu_160->m_axi_input_r_ARUSER(grp_convolution2D_fu_160_m_axi_input_r_ARUSER);
    grp_convolution2D_fu_160->m_axi_input_r_RVALID(INPUT_BUNDLE_RVALID);
    grp_convolution2D_fu_160->m_axi_input_r_RREADY(grp_convolution2D_fu_160_m_axi_input_r_RREADY);
    grp_convolution2D_fu_160->m_axi_input_r_RDATA(INPUT_BUNDLE_RDATA);
    grp_convolution2D_fu_160->m_axi_input_r_RLAST(INPUT_BUNDLE_RLAST);
    grp_convolution2D_fu_160->m_axi_input_r_RID(INPUT_BUNDLE_RID);
    grp_convolution2D_fu_160->m_axi_input_r_RUSER(INPUT_BUNDLE_RUSER);
    grp_convolution2D_fu_160->m_axi_input_r_RRESP(INPUT_BUNDLE_RRESP);
    grp_convolution2D_fu_160->m_axi_input_r_BVALID(ap_var_for_const1);
    grp_convolution2D_fu_160->m_axi_input_r_BREADY(grp_convolution2D_fu_160_m_axi_input_r_BREADY);
    grp_convolution2D_fu_160->m_axi_input_r_BRESP(ap_var_for_const5);
    grp_convolution2D_fu_160->m_axi_input_r_BID(ap_var_for_const3);
    grp_convolution2D_fu_160->m_axi_input_r_BUSER(ap_var_for_const3);
    grp_convolution2D_fu_160->input1(input_read_reg_435);
    grp_convolution2D_fu_160->operator_address0(grp_convolution2D_fu_160_operator_address0);
    grp_convolution2D_fu_160->operator_ce0(grp_convolution2D_fu_160_operator_ce0);
    grp_convolution2D_fu_160->operator_q0(grp_convolution2D_fu_160_operator_q0);
    grp_convolution2D_fu_160->ap_return(grp_convolution2D_fu_160_ap_return);
    sobel_sitodp_32nsdEe_U6 = new sobel_sitodp_32nsdEe<1,6,32,64>("sobel_sitodp_32nsdEe_U6");
    sobel_sitodp_32nsdEe_U6->clk(ap_clk);
    sobel_sitodp_32nsdEe_U6->reset(ap_rst_n_inv);
    sobel_sitodp_32nsdEe_U6->din0(tmp_6_reg_473);
    sobel_sitodp_32nsdEe_U6->ce(ap_var_for_const0);
    sobel_sitodp_32nsdEe_U6->dout(grp_fu_175_p1);
    sobel_dsqrt_64ns_eOg_U7 = new sobel_dsqrt_64ns_eOg<1,31,64,64,64>("sobel_dsqrt_64ns_eOg_U7");
    sobel_dsqrt_64ns_eOg_U7->clk(ap_clk);
    sobel_dsqrt_64ns_eOg_U7->reset(ap_rst_n_inv);
    sobel_dsqrt_64ns_eOg_U7->din0(ap_var_for_const10);
    sobel_dsqrt_64ns_eOg_U7->din1(p_reg_478);
    sobel_dsqrt_64ns_eOg_U7->ce(ap_var_for_const0);
    sobel_dsqrt_64ns_eOg_U7->dout(grp_fu_178_p2);
    sobel_mul_32s_32sfYi_U8 = new sobel_mul_32s_32sfYi<1,3,32,32,32>("sobel_mul_32s_32sfYi_U8");
    sobel_mul_32s_32sfYi_U8->clk(ap_clk);
    sobel_mul_32s_32sfYi_U8->reset(ap_rst_n_inv);
    sobel_mul_32s_32sfYi_U8->din0(tmp_reg_451);
    sobel_mul_32s_32sfYi_U8->din1(tmp_reg_451);
    sobel_mul_32s_32sfYi_U8->ce(grp_fu_201_ce);
    sobel_mul_32s_32sfYi_U8->dout(grp_fu_201_p2);
    sobel_mul_32s_32sfYi_U9 = new sobel_mul_32s_32sfYi<1,3,32,32,32>("sobel_mul_32s_32sfYi_U9");
    sobel_mul_32s_32sfYi_U9->clk(ap_clk);
    sobel_mul_32s_32sfYi_U9->reset(ap_rst_n_inv);
    sobel_mul_32s_32sfYi_U9->din0(grp_convolution2D_fu_160_ap_return);
    sobel_mul_32s_32sfYi_U9->din1(grp_convolution2D_fu_160_ap_return);
    sobel_mul_32s_32sfYi_U9->ce(grp_fu_205_ce);
    sobel_mul_32s_32sfYi_U9->dout(grp_fu_205_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_INPUT_BUNDLE_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_189_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_convolution2D_fu_160_m_axi_input_r_ARVALID );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_INPUT_BUNDLE_RREADY);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_189_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_convolution2D_fu_160_m_axi_input_r_RREADY );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_OUTPUT_BUNDLE_AWADDR);
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( OUTPUT_BUNDLE_addr_1_reg_522 );
    sensitive << ( OUTPUT_BUNDLE_addr_reg_527 );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY );

    SC_METHOD(thread_OUTPUT_BUNDLE_AWVALID);
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY );

    SC_METHOD(thread_OUTPUT_BUNDLE_BREADY);
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( icmp_reg_513 );
    sensitive << ( OUTPUT_BUNDLE_BVALID );

    SC_METHOD(thread_OUTPUT_BUNDLE_WDATA);
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( tmp_12_reg_517 );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_METHOD(thread_OUTPUT_BUNDLE_WVALID);
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_METHOD(thread_OUTPUT_BUNDLE_blk_n_AW);
    sensitive << ( m_axi_OUTPUT_BUNDLE_AWREADY );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_OUTPUT_BUNDLE_blk_n_B);
    sensitive << ( m_axi_OUTPUT_BUNDLE_BVALID );
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( icmp_reg_513 );

    SC_METHOD(thread_OUTPUT_BUNDLE_blk_n_W);
    sensitive << ( m_axi_OUTPUT_BUNDLE_WREADY );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state56);
    sensitive << ( icmp_reg_513 );
    sensitive << ( OUTPUT_BUNDLE_BVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_183_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_183_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY);
    sensitive << ( OUTPUT_BUNDLE_AWREADY );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_OUTPUT_BUNDLE_WREADY);
    sensitive << ( OUTPUT_BUNDLE_WREADY );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_METHOD(thread_exitcond1_fu_183_p2);
    sensitive << ( j_reg_136 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_exitcond_fu_189_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_148 );

    SC_METHOD(thread_grp_convolution2D_fu_160_ap_start);
    sensitive << ( ap_reg_grp_convolution2D_fu_160_ap_start );

    SC_METHOD(thread_grp_convolution2D_fu_160_operator_q0);
    sensitive << ( horiz_operator_q0 );
    sensitive << ( vert_operator_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_201_ce);
    sensitive << ( grp_convolution2D_fu_160_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_205_ce);
    sensitive << ( grp_convolution2D_fu_160_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_horiz_operator_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_convolution2D_fu_160_operator_ce0 );

    SC_METHOD(thread_i_1_fu_423_p2);
    sensitive << ( i_reg_148 );

    SC_METHOD(thread_icmp_fu_367_p2);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( tmp_11_fu_357_p4 );

    SC_METHOD(thread_isNeg_fu_250_p3);
    sensitive << ( sh_assign_fu_244_p2 );

    SC_METHOD(thread_j_1_fu_195_p2);
    sensitive << ( j_reg_136 );

    SC_METHOD(thread_loc_V_1_fu_236_p1);
    sensitive << ( p_Val2_1_fu_215_p1 );

    SC_METHOD(thread_loc_V_fu_226_p4);
    sensitive << ( p_Val2_1_fu_215_p1 );

    SC_METHOD(thread_output4_sum5_fu_412_p2);
    sensitive << ( output_read_reg_429 );
    sensitive << ( sum_cast_fu_408_p1 );

    SC_METHOD(thread_output4_sum_fu_389_p2);
    sensitive << ( output_read_reg_429 );
    sensitive << ( sum3_cast_fu_385_p1 );

    SC_METHOD(thread_p_Val2_1_fu_215_p1);
    sensitive << ( x_assign_reg_483 );

    SC_METHOD(thread_p_Val2_3_fu_334_p3);
    sensitive << ( isNeg_reg_498 );
    sensitive << ( tmp_4_fu_320_p1 );
    sensitive << ( tmp_7_fu_324_p4 );

    SC_METHOD(thread_p_Val2_s_fu_350_p3);
    sensitive << ( p_Result_s_reg_488 );
    sensitive << ( tmp_9_i_i_i_fu_341_p1 );
    sensitive << ( tmp_12_i_i_i_fu_344_p2 );

    SC_METHOD(thread_sh_assign_1_cast_fu_289_p1);
    sensitive << ( sh_assign_1_reg_503 );

    SC_METHOD(thread_sh_assign_1_fu_268_p3);
    sensitive << ( isNeg_fu_250_p3 );
    sensitive << ( sh_assign_fu_244_p2 );
    sensitive << ( tmp_4_i_i_i_cast_fu_264_p1 );

    SC_METHOD(thread_sh_assign_fu_244_p2);
    sensitive << ( tmp_i_i_i_i_cast1_fu_240_p1 );

    SC_METHOD(thread_sum3_cast_fu_385_p1);
    sensitive << ( sum3_fu_377_p3 );

    SC_METHOD(thread_sum3_fu_377_p3);
    sensitive << ( j_reg_136 );
    sensitive << ( i_reg_148 );

    SC_METHOD(thread_sum_cast_fu_408_p1);
    sensitive << ( sum_fu_400_p3 );

    SC_METHOD(thread_sum_fu_400_p3);
    sensitive << ( j_reg_136 );
    sensitive << ( i_reg_148 );

    SC_METHOD(thread_tmp_10_fu_312_p3);
    sensitive << ( tmp_6_i_i_i_fu_300_p2 );

    SC_METHOD(thread_tmp_11_fu_357_p4);
    sensitive << ( p_Val2_s_fu_350_p3 );

    SC_METHOD(thread_tmp_12_fu_373_p1);
    sensitive << ( p_Val2_s_fu_350_p3 );

    SC_METHOD(thread_tmp_12_i_i_i_fu_344_p2);
    sensitive << ( tmp_9_i_i_i_fu_341_p1 );

    SC_METHOD(thread_tmp_4_fu_320_p1);
    sensitive << ( tmp_10_fu_312_p3 );

    SC_METHOD(thread_tmp_4_i_i_i_cast_fu_264_p1);
    sensitive << ( tmp_4_i_i_i_fu_258_p2 );

    SC_METHOD(thread_tmp_4_i_i_i_fu_258_p2);
    sensitive << ( loc_V_fu_226_p4 );

    SC_METHOD(thread_tmp_5_i_i_i_cast_fu_296_p1);
    sensitive << ( sh_assign_1_cast_fu_289_p1 );

    SC_METHOD(thread_tmp_5_i_i_i_fu_292_p1);
    sensitive << ( sh_assign_1_cast_fu_289_p1 );

    SC_METHOD(thread_tmp_6_fu_211_p2);
    sensitive << ( tmp_2_reg_463 );
    sensitive << ( tmp_5_reg_468 );

    SC_METHOD(thread_tmp_6_i_i_i_fu_300_p2);
    sensitive << ( tmp_i_i_i_fu_276_p4 );
    sensitive << ( tmp_5_i_i_i_cast_fu_296_p1 );

    SC_METHOD(thread_tmp_7_fu_324_p4);
    sensitive << ( tmp_7_i_i_i_fu_306_p2 );

    SC_METHOD(thread_tmp_7_i_i_i_fu_306_p2);
    sensitive << ( tmp_i_i_i_cast_fu_285_p1 );
    sensitive << ( tmp_5_i_i_i_fu_292_p1 );

    SC_METHOD(thread_tmp_9_i_i_i_fu_341_p1);
    sensitive << ( p_Val2_3_reg_508 );

    SC_METHOD(thread_tmp_i_i_i_cast_fu_285_p1);
    sensitive << ( tmp_i_i_i_fu_276_p4 );

    SC_METHOD(thread_tmp_i_i_i_fu_276_p4);
    sensitive << ( loc_V_1_reg_493 );

    SC_METHOD(thread_tmp_i_i_i_i_cast1_fu_240_p1);
    sensitive << ( loc_V_fu_226_p4 );

    SC_METHOD(thread_vert_operator_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_convolution2D_fu_160_operator_ce0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( icmp_reg_513 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( OUTPUT_BUNDLE_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_189_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_convolution2D_fu_160_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_fu_367_p2 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_183_p2 );
    sensitive << ( ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY );
    sensitive << ( ap_sig_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const10);

    ap_CS_fsm = "00000000000000000000000000000000000000000000000000000000000001";
    ap_reg_grp_convolution2D_fu_160_ap_start = SC_LOGIC_0;
    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sobel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWVALID, "(port)m_axi_INPUT_BUNDLE_AWVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWREADY, "(port)m_axi_INPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWADDR, "(port)m_axi_INPUT_BUNDLE_AWADDR");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWID, "(port)m_axi_INPUT_BUNDLE_AWID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWLEN, "(port)m_axi_INPUT_BUNDLE_AWLEN");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWSIZE, "(port)m_axi_INPUT_BUNDLE_AWSIZE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWBURST, "(port)m_axi_INPUT_BUNDLE_AWBURST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWLOCK, "(port)m_axi_INPUT_BUNDLE_AWLOCK");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWCACHE, "(port)m_axi_INPUT_BUNDLE_AWCACHE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWPROT, "(port)m_axi_INPUT_BUNDLE_AWPROT");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWQOS, "(port)m_axi_INPUT_BUNDLE_AWQOS");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWREGION, "(port)m_axi_INPUT_BUNDLE_AWREGION");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWUSER, "(port)m_axi_INPUT_BUNDLE_AWUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WVALID, "(port)m_axi_INPUT_BUNDLE_WVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WREADY, "(port)m_axi_INPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WDATA, "(port)m_axi_INPUT_BUNDLE_WDATA");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WSTRB, "(port)m_axi_INPUT_BUNDLE_WSTRB");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WLAST, "(port)m_axi_INPUT_BUNDLE_WLAST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WID, "(port)m_axi_INPUT_BUNDLE_WID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WUSER, "(port)m_axi_INPUT_BUNDLE_WUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARVALID, "(port)m_axi_INPUT_BUNDLE_ARVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARREADY, "(port)m_axi_INPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARADDR, "(port)m_axi_INPUT_BUNDLE_ARADDR");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARID, "(port)m_axi_INPUT_BUNDLE_ARID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARLEN, "(port)m_axi_INPUT_BUNDLE_ARLEN");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARSIZE, "(port)m_axi_INPUT_BUNDLE_ARSIZE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARBURST, "(port)m_axi_INPUT_BUNDLE_ARBURST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARLOCK, "(port)m_axi_INPUT_BUNDLE_ARLOCK");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARCACHE, "(port)m_axi_INPUT_BUNDLE_ARCACHE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARPROT, "(port)m_axi_INPUT_BUNDLE_ARPROT");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARQOS, "(port)m_axi_INPUT_BUNDLE_ARQOS");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARREGION, "(port)m_axi_INPUT_BUNDLE_ARREGION");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARUSER, "(port)m_axi_INPUT_BUNDLE_ARUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RVALID, "(port)m_axi_INPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RREADY, "(port)m_axi_INPUT_BUNDLE_RREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RDATA, "(port)m_axi_INPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RLAST, "(port)m_axi_INPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RID, "(port)m_axi_INPUT_BUNDLE_RID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RUSER, "(port)m_axi_INPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RRESP, "(port)m_axi_INPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BVALID, "(port)m_axi_INPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BREADY, "(port)m_axi_INPUT_BUNDLE_BREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BRESP, "(port)m_axi_INPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BID, "(port)m_axi_INPUT_BUNDLE_BID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BUSER, "(port)m_axi_INPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWVALID, "(port)m_axi_OUTPUT_BUNDLE_AWVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWREADY, "(port)m_axi_OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWADDR, "(port)m_axi_OUTPUT_BUNDLE_AWADDR");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWID, "(port)m_axi_OUTPUT_BUNDLE_AWID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWLEN, "(port)m_axi_OUTPUT_BUNDLE_AWLEN");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWSIZE, "(port)m_axi_OUTPUT_BUNDLE_AWSIZE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWBURST, "(port)m_axi_OUTPUT_BUNDLE_AWBURST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWLOCK, "(port)m_axi_OUTPUT_BUNDLE_AWLOCK");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWCACHE, "(port)m_axi_OUTPUT_BUNDLE_AWCACHE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWPROT, "(port)m_axi_OUTPUT_BUNDLE_AWPROT");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWQOS, "(port)m_axi_OUTPUT_BUNDLE_AWQOS");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWREGION, "(port)m_axi_OUTPUT_BUNDLE_AWREGION");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWUSER, "(port)m_axi_OUTPUT_BUNDLE_AWUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WVALID, "(port)m_axi_OUTPUT_BUNDLE_WVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WREADY, "(port)m_axi_OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WDATA, "(port)m_axi_OUTPUT_BUNDLE_WDATA");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WSTRB, "(port)m_axi_OUTPUT_BUNDLE_WSTRB");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WLAST, "(port)m_axi_OUTPUT_BUNDLE_WLAST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WID, "(port)m_axi_OUTPUT_BUNDLE_WID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WUSER, "(port)m_axi_OUTPUT_BUNDLE_WUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARVALID, "(port)m_axi_OUTPUT_BUNDLE_ARVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARREADY, "(port)m_axi_OUTPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARADDR, "(port)m_axi_OUTPUT_BUNDLE_ARADDR");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARID, "(port)m_axi_OUTPUT_BUNDLE_ARID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARLEN, "(port)m_axi_OUTPUT_BUNDLE_ARLEN");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARSIZE, "(port)m_axi_OUTPUT_BUNDLE_ARSIZE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARBURST, "(port)m_axi_OUTPUT_BUNDLE_ARBURST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARLOCK, "(port)m_axi_OUTPUT_BUNDLE_ARLOCK");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARCACHE, "(port)m_axi_OUTPUT_BUNDLE_ARCACHE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARPROT, "(port)m_axi_OUTPUT_BUNDLE_ARPROT");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARQOS, "(port)m_axi_OUTPUT_BUNDLE_ARQOS");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARREGION, "(port)m_axi_OUTPUT_BUNDLE_ARREGION");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARUSER, "(port)m_axi_OUTPUT_BUNDLE_ARUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RVALID, "(port)m_axi_OUTPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RREADY, "(port)m_axi_OUTPUT_BUNDLE_RREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RDATA, "(port)m_axi_OUTPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RLAST, "(port)m_axi_OUTPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RID, "(port)m_axi_OUTPUT_BUNDLE_RID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RUSER, "(port)m_axi_OUTPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RRESP, "(port)m_axi_OUTPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BVALID, "(port)m_axi_OUTPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BREADY, "(port)m_axi_OUTPUT_BUNDLE_BREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BRESP, "(port)m_axi_OUTPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BID, "(port)m_axi_OUTPUT_BUNDLE_BID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BUSER, "(port)m_axi_OUTPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_r, "input_r");
    sc_trace(mVcdFile, output_r, "output_r");
    sc_trace(mVcdFile, horiz_operator_ce0, "horiz_operator_ce0");
    sc_trace(mVcdFile, horiz_operator_q0, "horiz_operator_q0");
    sc_trace(mVcdFile, vert_operator_ce0, "vert_operator_ce0");
    sc_trace(mVcdFile, vert_operator_q0, "vert_operator_q0");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_blk_n_AW, "OUTPUT_BUNDLE_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_blk_n_W, "OUTPUT_BUNDLE_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_blk_n_B, "OUTPUT_BUNDLE_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state56, "ap_CS_fsm_state56");
    sc_trace(mVcdFile, icmp_reg_513, "icmp_reg_513");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, INPUT_BUNDLE_AWREADY, "INPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_WREADY, "INPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_ARVALID, "INPUT_BUNDLE_ARVALID");
    sc_trace(mVcdFile, INPUT_BUNDLE_ARREADY, "INPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_RVALID, "INPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, INPUT_BUNDLE_RREADY, "INPUT_BUNDLE_RREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_RDATA, "INPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, INPUT_BUNDLE_RLAST, "INPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, INPUT_BUNDLE_RID, "INPUT_BUNDLE_RID");
    sc_trace(mVcdFile, INPUT_BUNDLE_RUSER, "INPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, INPUT_BUNDLE_RRESP, "INPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, INPUT_BUNDLE_BVALID, "INPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, INPUT_BUNDLE_BRESP, "INPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, INPUT_BUNDLE_BID, "INPUT_BUNDLE_BID");
    sc_trace(mVcdFile, INPUT_BUNDLE_BUSER, "INPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_AWVALID, "OUTPUT_BUNDLE_AWVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_AWREADY, "OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_AWADDR, "OUTPUT_BUNDLE_AWADDR");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_WVALID, "OUTPUT_BUNDLE_WVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_WREADY, "OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_WDATA, "OUTPUT_BUNDLE_WDATA");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_ARREADY, "OUTPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RVALID, "OUTPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RDATA, "OUTPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RLAST, "OUTPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RID, "OUTPUT_BUNDLE_RID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RUSER, "OUTPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RRESP, "OUTPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BVALID, "OUTPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BREADY, "OUTPUT_BUNDLE_BREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BRESP, "OUTPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BID, "OUTPUT_BUNDLE_BID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BUSER, "OUTPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, output_read_reg_429, "output_read_reg_429");
    sc_trace(mVcdFile, input_read_reg_435, "input_read_reg_435");
    sc_trace(mVcdFile, j_1_fu_195_p2, "j_1_fu_195_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_189_p2, "exitcond_fu_189_p2");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_ap_return, "grp_convolution2D_fu_160_ap_return");
    sc_trace(mVcdFile, tmp_reg_451, "tmp_reg_451");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_ap_done, "grp_convolution2D_fu_160_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_201_p2, "grp_fu_201_p2");
    sc_trace(mVcdFile, tmp_2_reg_463, "tmp_2_reg_463");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_205_p2, "grp_fu_205_p2");
    sc_trace(mVcdFile, tmp_5_reg_468, "tmp_5_reg_468");
    sc_trace(mVcdFile, tmp_6_fu_211_p2, "tmp_6_fu_211_p2");
    sc_trace(mVcdFile, tmp_6_reg_473, "tmp_6_reg_473");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_175_p1, "grp_fu_175_p1");
    sc_trace(mVcdFile, p_reg_478, "p_reg_478");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_178_p2, "grp_fu_178_p2");
    sc_trace(mVcdFile, x_assign_reg_483, "x_assign_reg_483");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, p_Result_s_reg_488, "p_Result_s_reg_488");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, loc_V_1_fu_236_p1, "loc_V_1_fu_236_p1");
    sc_trace(mVcdFile, loc_V_1_reg_493, "loc_V_1_reg_493");
    sc_trace(mVcdFile, isNeg_fu_250_p3, "isNeg_fu_250_p3");
    sc_trace(mVcdFile, isNeg_reg_498, "isNeg_reg_498");
    sc_trace(mVcdFile, sh_assign_1_fu_268_p3, "sh_assign_1_fu_268_p3");
    sc_trace(mVcdFile, sh_assign_1_reg_503, "sh_assign_1_reg_503");
    sc_trace(mVcdFile, p_Val2_3_fu_334_p3, "p_Val2_3_fu_334_p3");
    sc_trace(mVcdFile, p_Val2_3_reg_508, "p_Val2_3_reg_508");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, icmp_fu_367_p2, "icmp_fu_367_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, tmp_12_fu_373_p1, "tmp_12_fu_373_p1");
    sc_trace(mVcdFile, tmp_12_reg_517, "tmp_12_reg_517");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_addr_1_reg_522, "OUTPUT_BUNDLE_addr_1_reg_522");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_addr_reg_527, "OUTPUT_BUNDLE_addr_reg_527");
    sc_trace(mVcdFile, i_1_fu_423_p2, "i_1_fu_423_p2");
    sc_trace(mVcdFile, ap_block_state56, "ap_block_state56");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_ap_start, "grp_convolution2D_fu_160_ap_start");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_ap_idle, "grp_convolution2D_fu_160_ap_idle");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_ap_ready, "grp_convolution2D_fu_160_ap_ready");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWVALID, "grp_convolution2D_fu_160_m_axi_input_r_AWVALID");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWADDR, "grp_convolution2D_fu_160_m_axi_input_r_AWADDR");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWID, "grp_convolution2D_fu_160_m_axi_input_r_AWID");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWLEN, "grp_convolution2D_fu_160_m_axi_input_r_AWLEN");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWSIZE, "grp_convolution2D_fu_160_m_axi_input_r_AWSIZE");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWBURST, "grp_convolution2D_fu_160_m_axi_input_r_AWBURST");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWLOCK, "grp_convolution2D_fu_160_m_axi_input_r_AWLOCK");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWCACHE, "grp_convolution2D_fu_160_m_axi_input_r_AWCACHE");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWPROT, "grp_convolution2D_fu_160_m_axi_input_r_AWPROT");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWQOS, "grp_convolution2D_fu_160_m_axi_input_r_AWQOS");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWREGION, "grp_convolution2D_fu_160_m_axi_input_r_AWREGION");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_AWUSER, "grp_convolution2D_fu_160_m_axi_input_r_AWUSER");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_WVALID, "grp_convolution2D_fu_160_m_axi_input_r_WVALID");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_WDATA, "grp_convolution2D_fu_160_m_axi_input_r_WDATA");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_WSTRB, "grp_convolution2D_fu_160_m_axi_input_r_WSTRB");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_WLAST, "grp_convolution2D_fu_160_m_axi_input_r_WLAST");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_WID, "grp_convolution2D_fu_160_m_axi_input_r_WID");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_WUSER, "grp_convolution2D_fu_160_m_axi_input_r_WUSER");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARVALID, "grp_convolution2D_fu_160_m_axi_input_r_ARVALID");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARADDR, "grp_convolution2D_fu_160_m_axi_input_r_ARADDR");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARID, "grp_convolution2D_fu_160_m_axi_input_r_ARID");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARLEN, "grp_convolution2D_fu_160_m_axi_input_r_ARLEN");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARSIZE, "grp_convolution2D_fu_160_m_axi_input_r_ARSIZE");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARBURST, "grp_convolution2D_fu_160_m_axi_input_r_ARBURST");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARLOCK, "grp_convolution2D_fu_160_m_axi_input_r_ARLOCK");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARCACHE, "grp_convolution2D_fu_160_m_axi_input_r_ARCACHE");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARPROT, "grp_convolution2D_fu_160_m_axi_input_r_ARPROT");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARQOS, "grp_convolution2D_fu_160_m_axi_input_r_ARQOS");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARREGION, "grp_convolution2D_fu_160_m_axi_input_r_ARREGION");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_ARUSER, "grp_convolution2D_fu_160_m_axi_input_r_ARUSER");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_RREADY, "grp_convolution2D_fu_160_m_axi_input_r_RREADY");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_m_axi_input_r_BREADY, "grp_convolution2D_fu_160_m_axi_input_r_BREADY");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_operator_address0, "grp_convolution2D_fu_160_operator_address0");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_operator_ce0, "grp_convolution2D_fu_160_operator_ce0");
    sc_trace(mVcdFile, grp_convolution2D_fu_160_operator_q0, "grp_convolution2D_fu_160_operator_q0");
    sc_trace(mVcdFile, j_reg_136, "j_reg_136");
    sc_trace(mVcdFile, i_reg_148, "i_reg_148");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond1_fu_183_p2, "exitcond1_fu_183_p2");
    sc_trace(mVcdFile, ap_reg_grp_convolution2D_fu_160_ap_start, "ap_reg_grp_convolution2D_fu_160_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, output4_sum_fu_389_p2, "output4_sum_fu_389_p2");
    sc_trace(mVcdFile, output4_sum5_fu_412_p2, "output4_sum5_fu_412_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY, "ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY, "ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY, "ap_reg_ioackin_OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_OUTPUT_BUNDLE_WREADY, "ap_sig_ioackin_OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, p_Val2_1_fu_215_p1, "p_Val2_1_fu_215_p1");
    sc_trace(mVcdFile, loc_V_fu_226_p4, "loc_V_fu_226_p4");
    sc_trace(mVcdFile, tmp_i_i_i_i_cast1_fu_240_p1, "tmp_i_i_i_i_cast1_fu_240_p1");
    sc_trace(mVcdFile, sh_assign_fu_244_p2, "sh_assign_fu_244_p2");
    sc_trace(mVcdFile, tmp_4_i_i_i_fu_258_p2, "tmp_4_i_i_i_fu_258_p2");
    sc_trace(mVcdFile, tmp_4_i_i_i_cast_fu_264_p1, "tmp_4_i_i_i_cast_fu_264_p1");
    sc_trace(mVcdFile, tmp_i_i_i_fu_276_p4, "tmp_i_i_i_fu_276_p4");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_289_p1, "sh_assign_1_cast_fu_289_p1");
    sc_trace(mVcdFile, tmp_5_i_i_i_cast_fu_296_p1, "tmp_5_i_i_i_cast_fu_296_p1");
    sc_trace(mVcdFile, tmp_i_i_i_cast_fu_285_p1, "tmp_i_i_i_cast_fu_285_p1");
    sc_trace(mVcdFile, tmp_5_i_i_i_fu_292_p1, "tmp_5_i_i_i_fu_292_p1");
    sc_trace(mVcdFile, tmp_6_i_i_i_fu_300_p2, "tmp_6_i_i_i_fu_300_p2");
    sc_trace(mVcdFile, tmp_10_fu_312_p3, "tmp_10_fu_312_p3");
    sc_trace(mVcdFile, tmp_7_i_i_i_fu_306_p2, "tmp_7_i_i_i_fu_306_p2");
    sc_trace(mVcdFile, tmp_4_fu_320_p1, "tmp_4_fu_320_p1");
    sc_trace(mVcdFile, tmp_7_fu_324_p4, "tmp_7_fu_324_p4");
    sc_trace(mVcdFile, tmp_9_i_i_i_fu_341_p1, "tmp_9_i_i_i_fu_341_p1");
    sc_trace(mVcdFile, tmp_12_i_i_i_fu_344_p2, "tmp_12_i_i_i_fu_344_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_350_p3, "p_Val2_s_fu_350_p3");
    sc_trace(mVcdFile, tmp_11_fu_357_p4, "tmp_11_fu_357_p4");
    sc_trace(mVcdFile, sum3_fu_377_p3, "sum3_fu_377_p3");
    sc_trace(mVcdFile, sum3_cast_fu_385_p1, "sum3_cast_fu_385_p1");
    sc_trace(mVcdFile, sum_fu_400_p3, "sum_fu_400_p3");
    sc_trace(mVcdFile, sum_cast_fu_408_p1, "sum_cast_fu_408_p1");
    sc_trace(mVcdFile, grp_fu_201_ce, "grp_fu_201_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_205_ce, "grp_fu_205_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sobel.hdltvin.dat");
    mHdltvoutHandle.open("sobel.hdltvout.dat");
}

sobel::~sobel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete horiz_operator_U;
    delete vert_operator_U;
    delete sobel_AXILiteS_s_axi_U;
    delete sobel_INPUT_BUNDLE_m_axi_U;
    delete sobel_OUTPUT_BUNDLE_m_axi_U;
    delete grp_convolution2D_fu_160;
    delete sobel_sitodp_32nsdEe_U6;
    delete sobel_dsqrt_64ns_eOg_U7;
    delete sobel_mul_32s_32sfYi_U8;
    delete sobel_mul_32s_32sfYi_U9;
}

void sobel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sobel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void sobel::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void sobel::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv1_1;
}

void sobel::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void sobel::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv32_1;
}

void sobel::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void sobel::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void sobel::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void sobel::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv8_0;
}

void sobel::thread_ap_var_for_const10() {
    ap_var_for_const10 = ap_const_lv64_0;
}

void sobel::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_convolution2D_fu_160_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_189_p2.read())) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
            ap_reg_grp_convolution2D_fu_160_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_convolution2D_fu_160_ap_ready.read())) {
            ap_reg_grp_convolution2D_fu_160_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_AWREADY.read())))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_WREADY.read())))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_183_p2.read()))) {
        i_reg_148 = ap_const_lv10_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
                !((esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read()))))) {
        i_reg_148 = i_1_fu_423_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_136 = ap_const_lv10_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_189_p2.read()))) {
        j_reg_136 = j_1_fu_195_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_367_p2.read()))) {
        OUTPUT_BUNDLE_addr_1_reg_522 = output4_sum_fu_389_p2.read();
        tmp_12_reg_517 = tmp_12_fu_373_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_367_p2.read()))) {
        OUTPUT_BUNDLE_addr_reg_527 = output4_sum5_fu_412_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        icmp_reg_513 = icmp_fu_367_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        input_read_reg_435 = input_r.read();
        output_read_reg_429 = output_r.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        isNeg_reg_498 = sh_assign_fu_244_p2.read().range(11, 11);
        loc_V_1_reg_493 = loc_V_1_fu_236_p1.read();
        p_Result_s_reg_488 = p_Val2_1_fu_215_p1.read().range(63, 63);
        sh_assign_1_reg_503 = sh_assign_1_fu_268_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        p_Val2_3_reg_508 = p_Val2_3_fu_334_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        p_reg_478 = grp_fu_175_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_2_reg_463 = grp_fu_201_p2.read();
        tmp_5_reg_468 = grp_fu_205_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_6_reg_473 = tmp_6_fu_211_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_convolution2D_fu_160_ap_done.read(), ap_const_logic_1))) {
        tmp_reg_451 = grp_convolution2D_fu_160_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        x_assign_reg_483 = grp_fu_178_p2.read();
    }
}

void sobel::thread_INPUT_BUNDLE_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_189_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        INPUT_BUNDLE_ARVALID = grp_convolution2D_fu_160_m_axi_input_r_ARVALID.read();
    } else {
        INPUT_BUNDLE_ARVALID = ap_const_logic_0;
    }
}

void sobel::thread_INPUT_BUNDLE_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_189_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        INPUT_BUNDLE_RREADY = grp_convolution2D_fu_160_m_axi_input_r_RREADY.read();
    } else {
        INPUT_BUNDLE_RREADY = ap_const_logic_0;
    }
}

void sobel::thread_OUTPUT_BUNDLE_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) {
            OUTPUT_BUNDLE_AWADDR = OUTPUT_BUNDLE_addr_reg_527.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
            OUTPUT_BUNDLE_AWADDR = OUTPUT_BUNDLE_addr_1_reg_522.read();
        } else {
            OUTPUT_BUNDLE_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        OUTPUT_BUNDLE_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sobel::thread_OUTPUT_BUNDLE_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY.read())))) {
        OUTPUT_BUNDLE_AWVALID = ap_const_logic_1;
    } else {
        OUTPUT_BUNDLE_AWVALID = ap_const_logic_0;
    }
}

void sobel::thread_OUTPUT_BUNDLE_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
          esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_0) && 
          !((esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
          esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_1) && 
          !((esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())))))) {
        OUTPUT_BUNDLE_BREADY = ap_const_logic_1;
    } else {
        OUTPUT_BUNDLE_BREADY = ap_const_logic_0;
    }
}

void sobel::thread_OUTPUT_BUNDLE_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
            OUTPUT_BUNDLE_WDATA = ap_const_lv8_FF;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
            OUTPUT_BUNDLE_WDATA = tmp_12_reg_517.read();
        } else {
            OUTPUT_BUNDLE_WDATA =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        OUTPUT_BUNDLE_WDATA =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sobel::thread_OUTPUT_BUNDLE_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())))) {
        OUTPUT_BUNDLE_WVALID = ap_const_logic_1;
    } else {
        OUTPUT_BUNDLE_WVALID = ap_const_logic_0;
    }
}

void sobel::thread_OUTPUT_BUNDLE_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        OUTPUT_BUNDLE_blk_n_AW = m_axi_OUTPUT_BUNDLE_AWREADY.read();
    } else {
        OUTPUT_BUNDLE_blk_n_AW = ap_const_logic_1;
    }
}

void sobel::thread_OUTPUT_BUNDLE_blk_n_B() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
          esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && 
          esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_0)))) {
        OUTPUT_BUNDLE_blk_n_B = m_axi_OUTPUT_BUNDLE_BVALID.read();
    } else {
        OUTPUT_BUNDLE_blk_n_B = ap_const_logic_1;
    }
}

void sobel::thread_OUTPUT_BUNDLE_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        OUTPUT_BUNDLE_blk_n_W = m_axi_OUTPUT_BUNDLE_WREADY.read();
    } else {
        OUTPUT_BUNDLE_blk_n_W = ap_const_logic_1;
    }
}

void sobel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sobel::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sobel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void sobel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void sobel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sobel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sobel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sobel::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void sobel::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void sobel::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void sobel::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void sobel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sobel::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void sobel::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void sobel::thread_ap_CS_fsm_state56() {
    ap_CS_fsm_state56 = ap_CS_fsm.read()[55];
}

void sobel::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void sobel::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void sobel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sobel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sobel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sobel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sobel::thread_ap_block_state56() {
    ap_block_state56 = ((esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())));
}

void sobel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_183_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sobel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sobel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_183_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sobel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sobel::thread_ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY.read())) {
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = OUTPUT_BUNDLE_AWREADY.read();
    } else {
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1;
    }
}

void sobel::thread_ap_sig_ioackin_OUTPUT_BUNDLE_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())) {
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = OUTPUT_BUNDLE_WREADY.read();
    } else {
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1;
    }
}

void sobel::thread_exitcond1_fu_183_p2() {
    exitcond1_fu_183_p2 = (!j_reg_136.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_136.read() == ap_const_lv10_3FF);
}

void sobel::thread_exitcond_fu_189_p2() {
    exitcond_fu_189_p2 = (!i_reg_148.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_148.read() == ap_const_lv10_3FF);
}

void sobel::thread_grp_convolution2D_fu_160_ap_start() {
    grp_convolution2D_fu_160_ap_start = ap_reg_grp_convolution2D_fu_160_ap_start.read();
}

void sobel::thread_grp_convolution2D_fu_160_operator_q0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_convolution2D_fu_160_operator_q0 = vert_operator_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_convolution2D_fu_160_operator_q0 = horiz_operator_q0.read();
    } else {
        grp_convolution2D_fu_160_operator_q0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sobel::thread_grp_fu_201_ce() {
    if (((esl_seteq<1,1,1>(grp_convolution2D_fu_160_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        grp_fu_201_ce = ap_const_logic_1;
    } else {
        grp_fu_201_ce = ap_const_logic_0;
    }
}

void sobel::thread_grp_fu_205_ce() {
    if (((esl_seteq<1,1,1>(grp_convolution2D_fu_160_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        grp_fu_205_ce = ap_const_logic_1;
    } else {
        grp_fu_205_ce = ap_const_logic_0;
    }
}

void sobel::thread_horiz_operator_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        horiz_operator_ce0 = grp_convolution2D_fu_160_operator_ce0.read();
    } else {
        horiz_operator_ce0 = ap_const_logic_0;
    }
}

void sobel::thread_i_1_fu_423_p2() {
    i_1_fu_423_p2 = (!i_reg_148.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_148.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sobel::thread_icmp_fu_367_p2() {
    icmp_fu_367_p2 = (!tmp_11_fu_357_p4.read().is_01() || !ap_const_lv24_0.is_01())? sc_lv<1>(): (sc_bigint<24>(tmp_11_fu_357_p4.read()) > sc_bigint<24>(ap_const_lv24_0));
}

void sobel::thread_isNeg_fu_250_p3() {
    isNeg_fu_250_p3 = sh_assign_fu_244_p2.read().range(11, 11);
}

void sobel::thread_j_1_fu_195_p2() {
    j_1_fu_195_p2 = (!j_reg_136.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_136.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sobel::thread_loc_V_1_fu_236_p1() {
    loc_V_1_fu_236_p1 = p_Val2_1_fu_215_p1.read().range(52-1, 0);
}

void sobel::thread_loc_V_fu_226_p4() {
    loc_V_fu_226_p4 = p_Val2_1_fu_215_p1.read().range(62, 52);
}

void sobel::thread_output4_sum5_fu_412_p2() {
    output4_sum5_fu_412_p2 = (!sum_cast_fu_408_p1.read().is_01() || !output_read_reg_429.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_cast_fu_408_p1.read()) + sc_biguint<32>(output_read_reg_429.read()));
}

void sobel::thread_output4_sum_fu_389_p2() {
    output4_sum_fu_389_p2 = (!output_read_reg_429.read().is_01() || !sum3_cast_fu_385_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(output_read_reg_429.read()) + sc_biguint<32>(sum3_cast_fu_385_p1.read()));
}

void sobel::thread_p_Val2_1_fu_215_p1() {
    p_Val2_1_fu_215_p1 = x_assign_reg_483.read();
}

void sobel::thread_p_Val2_3_fu_334_p3() {
    p_Val2_3_fu_334_p3 = (!isNeg_reg_498.read()[0].is_01())? sc_lv<31>(): ((isNeg_reg_498.read()[0].to_bool())? tmp_4_fu_320_p1.read(): tmp_7_fu_324_p4.read());
}

void sobel::thread_p_Val2_s_fu_350_p3() {
    p_Val2_s_fu_350_p3 = (!p_Result_s_reg_488.read()[0].is_01())? sc_lv<32>(): ((p_Result_s_reg_488.read()[0].to_bool())? tmp_12_i_i_i_fu_344_p2.read(): tmp_9_i_i_i_fu_341_p1.read());
}

void sobel::thread_sh_assign_1_cast_fu_289_p1() {
    sh_assign_1_cast_fu_289_p1 = esl_sext<32,12>(sh_assign_1_reg_503.read());
}

void sobel::thread_sh_assign_1_fu_268_p3() {
    sh_assign_1_fu_268_p3 = (!isNeg_fu_250_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_250_p3.read()[0].to_bool())? tmp_4_i_i_i_cast_fu_264_p1.read(): sh_assign_fu_244_p2.read());
}

void sobel::thread_sh_assign_fu_244_p2() {
    sh_assign_fu_244_p2 = (!ap_const_lv12_C01.is_01() || !tmp_i_i_i_i_cast1_fu_240_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(tmp_i_i_i_i_cast1_fu_240_p1.read()));
}

void sobel::thread_sum3_cast_fu_385_p1() {
    sum3_cast_fu_385_p1 = esl_zext<32,20>(sum3_fu_377_p3.read());
}

void sobel::thread_sum3_fu_377_p3() {
    sum3_fu_377_p3 = esl_concat<10,10>(i_reg_148.read(), j_reg_136.read());
}

void sobel::thread_sum_cast_fu_408_p1() {
    sum_cast_fu_408_p1 = esl_zext<32,20>(sum_fu_400_p3.read());
}

void sobel::thread_sum_fu_400_p3() {
    sum_fu_400_p3 = esl_concat<10,10>(i_reg_148.read(), j_reg_136.read());
}

void sobel::thread_tmp_10_fu_312_p3() {
    tmp_10_fu_312_p3 = tmp_6_i_i_i_fu_300_p2.read().range(53, 53);
}

void sobel::thread_tmp_11_fu_357_p4() {
    tmp_11_fu_357_p4 = p_Val2_s_fu_350_p3.read().range(31, 8);
}

void sobel::thread_tmp_12_fu_373_p1() {
    tmp_12_fu_373_p1 = p_Val2_s_fu_350_p3.read().range(8-1, 0);
}

void sobel::thread_tmp_12_i_i_i_fu_344_p2() {
    tmp_12_i_i_i_fu_344_p2 = (!ap_const_lv32_0.is_01() || !tmp_9_i_i_i_fu_341_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_9_i_i_i_fu_341_p1.read()));
}

void sobel::thread_tmp_4_fu_320_p1() {
    tmp_4_fu_320_p1 = esl_zext<31,1>(tmp_10_fu_312_p3.read());
}

void sobel::thread_tmp_4_i_i_i_cast_fu_264_p1() {
    tmp_4_i_i_i_cast_fu_264_p1 = esl_sext<12,11>(tmp_4_i_i_i_fu_258_p2.read());
}

void sobel::thread_tmp_4_i_i_i_fu_258_p2() {
    tmp_4_i_i_i_fu_258_p2 = (!ap_const_lv11_3FF.is_01() || !loc_V_fu_226_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(loc_V_fu_226_p4.read()));
}

void sobel::thread_tmp_5_i_i_i_cast_fu_296_p1() {
    tmp_5_i_i_i_cast_fu_296_p1 = esl_zext<54,32>(sh_assign_1_cast_fu_289_p1.read());
}

void sobel::thread_tmp_5_i_i_i_fu_292_p1() {
    tmp_5_i_i_i_fu_292_p1 = esl_zext<137,32>(sh_assign_1_cast_fu_289_p1.read());
}

void sobel::thread_tmp_6_fu_211_p2() {
    tmp_6_fu_211_p2 = (!tmp_5_reg_468.read().is_01() || !tmp_2_reg_463.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_5_reg_468.read()) + sc_biguint<32>(tmp_2_reg_463.read()));
}

void sobel::thread_tmp_6_i_i_i_fu_300_p2() {
    tmp_6_i_i_i_fu_300_p2 = (!tmp_5_i_i_i_cast_fu_296_p1.read().is_01())? sc_lv<54>(): tmp_i_i_i_fu_276_p4.read() >> (unsigned short)tmp_5_i_i_i_cast_fu_296_p1.read().to_uint();
}

void sobel::thread_tmp_7_fu_324_p4() {
    tmp_7_fu_324_p4 = tmp_7_i_i_i_fu_306_p2.read().range(83, 53);
}

void sobel::thread_tmp_7_i_i_i_fu_306_p2() {
    tmp_7_i_i_i_fu_306_p2 = (!tmp_5_i_i_i_fu_292_p1.read().is_01())? sc_lv<137>(): tmp_i_i_i_cast_fu_285_p1.read() << (unsigned short)tmp_5_i_i_i_fu_292_p1.read().to_uint();
}

void sobel::thread_tmp_9_i_i_i_fu_341_p1() {
    tmp_9_i_i_i_fu_341_p1 = esl_zext<32,31>(p_Val2_3_reg_508.read());
}

void sobel::thread_tmp_i_i_i_cast_fu_285_p1() {
    tmp_i_i_i_cast_fu_285_p1 = esl_zext<137,54>(tmp_i_i_i_fu_276_p4.read());
}

void sobel::thread_tmp_i_i_i_fu_276_p4() {
    tmp_i_i_i_fu_276_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, loc_V_1_reg_493.read()), ap_const_lv1_0);
}

void sobel::thread_tmp_i_i_i_i_cast1_fu_240_p1() {
    tmp_i_i_i_i_cast1_fu_240_p1 = esl_zext<12,11>(loc_V_fu_226_p4.read());
}

void sobel::thread_vert_operator_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        vert_operator_ce0 = grp_convolution2D_fu_160_operator_ce0.read();
    } else {
        vert_operator_ce0 = ap_const_logic_0;
    }
}

void sobel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_183_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_189_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_convolution2D_fu_160_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_convolution2D_fu_160_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_367_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state57;
            } else {
                ap_NS_fsm = ap_ST_fsm_state50;
            }
            break;
        case 562949953421312 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state51;
            } else {
                ap_NS_fsm = ap_ST_fsm_state50;
            }
            break;
        case 1125899906842624 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state52;
            } else {
                ap_NS_fsm = ap_ST_fsm_state51;
            }
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) && !((esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_513.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state56;
            }
            break;
        case 72057594037927936 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state58;
            } else {
                ap_NS_fsm = ap_ST_fsm_state57;
            }
            break;
        case 144115188075855872 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state59;
            } else {
                ap_NS_fsm = ap_ST_fsm_state58;
            }
            break;
        case 288230376151711744 : 
            ap_NS_fsm = ap_ST_fsm_state60;
            break;
        case 576460752303423488 : 
            ap_NS_fsm = ap_ST_fsm_state61;
            break;
        case 1152921504606846976 : 
            ap_NS_fsm = ap_ST_fsm_state62;
            break;
        case 2305843009213693952 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<62>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void sobel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_INPUT_BUNDLE_AWVALID\" :  \"" << m_axi_INPUT_BUNDLE_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWREADY\" :  \"" << m_axi_INPUT_BUNDLE_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWADDR\" :  \"" << m_axi_INPUT_BUNDLE_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWID\" :  \"" << m_axi_INPUT_BUNDLE_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWLEN\" :  \"" << m_axi_INPUT_BUNDLE_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWSIZE\" :  \"" << m_axi_INPUT_BUNDLE_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWBURST\" :  \"" << m_axi_INPUT_BUNDLE_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWLOCK\" :  \"" << m_axi_INPUT_BUNDLE_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWCACHE\" :  \"" << m_axi_INPUT_BUNDLE_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWPROT\" :  \"" << m_axi_INPUT_BUNDLE_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWQOS\" :  \"" << m_axi_INPUT_BUNDLE_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWREGION\" :  \"" << m_axi_INPUT_BUNDLE_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWUSER\" :  \"" << m_axi_INPUT_BUNDLE_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WVALID\" :  \"" << m_axi_INPUT_BUNDLE_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WREADY\" :  \"" << m_axi_INPUT_BUNDLE_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WDATA\" :  \"" << m_axi_INPUT_BUNDLE_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WSTRB\" :  \"" << m_axi_INPUT_BUNDLE_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WLAST\" :  \"" << m_axi_INPUT_BUNDLE_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WID\" :  \"" << m_axi_INPUT_BUNDLE_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WUSER\" :  \"" << m_axi_INPUT_BUNDLE_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARVALID\" :  \"" << m_axi_INPUT_BUNDLE_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARREADY\" :  \"" << m_axi_INPUT_BUNDLE_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARADDR\" :  \"" << m_axi_INPUT_BUNDLE_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARID\" :  \"" << m_axi_INPUT_BUNDLE_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARLEN\" :  \"" << m_axi_INPUT_BUNDLE_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARSIZE\" :  \"" << m_axi_INPUT_BUNDLE_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARBURST\" :  \"" << m_axi_INPUT_BUNDLE_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARLOCK\" :  \"" << m_axi_INPUT_BUNDLE_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARCACHE\" :  \"" << m_axi_INPUT_BUNDLE_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARPROT\" :  \"" << m_axi_INPUT_BUNDLE_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARQOS\" :  \"" << m_axi_INPUT_BUNDLE_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARREGION\" :  \"" << m_axi_INPUT_BUNDLE_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARUSER\" :  \"" << m_axi_INPUT_BUNDLE_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RVALID\" :  \"" << m_axi_INPUT_BUNDLE_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RREADY\" :  \"" << m_axi_INPUT_BUNDLE_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RDATA\" :  \"" << m_axi_INPUT_BUNDLE_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RLAST\" :  \"" << m_axi_INPUT_BUNDLE_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RID\" :  \"" << m_axi_INPUT_BUNDLE_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RUSER\" :  \"" << m_axi_INPUT_BUNDLE_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RRESP\" :  \"" << m_axi_INPUT_BUNDLE_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BVALID\" :  \"" << m_axi_INPUT_BUNDLE_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BREADY\" :  \"" << m_axi_INPUT_BUNDLE_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BRESP\" :  \"" << m_axi_INPUT_BUNDLE_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BID\" :  \"" << m_axi_INPUT_BUNDLE_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BUSER\" :  \"" << m_axi_INPUT_BUNDLE_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWADDR\" :  \"" << m_axi_OUTPUT_BUNDLE_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWID\" :  \"" << m_axi_OUTPUT_BUNDLE_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWLEN\" :  \"" << m_axi_OUTPUT_BUNDLE_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWSIZE\" :  \"" << m_axi_OUTPUT_BUNDLE_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWBURST\" :  \"" << m_axi_OUTPUT_BUNDLE_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWLOCK\" :  \"" << m_axi_OUTPUT_BUNDLE_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWCACHE\" :  \"" << m_axi_OUTPUT_BUNDLE_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWPROT\" :  \"" << m_axi_OUTPUT_BUNDLE_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWQOS\" :  \"" << m_axi_OUTPUT_BUNDLE_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWREGION\" :  \"" << m_axi_OUTPUT_BUNDLE_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WDATA\" :  \"" << m_axi_OUTPUT_BUNDLE_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WSTRB\" :  \"" << m_axi_OUTPUT_BUNDLE_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WLAST\" :  \"" << m_axi_OUTPUT_BUNDLE_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WID\" :  \"" << m_axi_OUTPUT_BUNDLE_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARADDR\" :  \"" << m_axi_OUTPUT_BUNDLE_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARID\" :  \"" << m_axi_OUTPUT_BUNDLE_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARLEN\" :  \"" << m_axi_OUTPUT_BUNDLE_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARSIZE\" :  \"" << m_axi_OUTPUT_BUNDLE_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARBURST\" :  \"" << m_axi_OUTPUT_BUNDLE_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARLOCK\" :  \"" << m_axi_OUTPUT_BUNDLE_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARCACHE\" :  \"" << m_axi_OUTPUT_BUNDLE_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARPROT\" :  \"" << m_axi_OUTPUT_BUNDLE_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARQOS\" :  \"" << m_axi_OUTPUT_BUNDLE_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARREGION\" :  \"" << m_axi_OUTPUT_BUNDLE_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RDATA\" :  \"" << m_axi_OUTPUT_BUNDLE_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RLAST\" :  \"" << m_axi_OUTPUT_BUNDLE_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RID\" :  \"" << m_axi_OUTPUT_BUNDLE_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RRESP\" :  \"" << m_axi_OUTPUT_BUNDLE_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BRESP\" :  \"" << m_axi_OUTPUT_BUNDLE_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BID\" :  \"" << m_axi_OUTPUT_BUNDLE_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

