-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
generic (
    C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_BUNDLE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_BUNDLE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_WREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_BUNDLE_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_BUNDLE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RVALID : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RLAST : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_BVALID : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_BUNDLE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_BUNDLE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=334236925,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=12,HLS_SYN_FF=5274,HLS_SYN_LUT=6231}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (61 downto 0) := "00000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (61 downto 0) := "00000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (61 downto 0) := "00000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (61 downto 0) := "00000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (61 downto 0) := "00000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (61 downto 0) := "00000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (61 downto 0) := "00001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (61 downto 0) := "00010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (61 downto 0) := "00100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (61 downto 0) := "01000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (61 downto 0) := "10000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal horiz_operator_ce0 : STD_LOGIC;
    signal horiz_operator_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vert_operator_ce0 : STD_LOGIC;
    signal vert_operator_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_BUNDLE_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal OUTPUT_BUNDLE_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal OUTPUT_BUNDLE_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal icmp_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal INPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal INPUT_BUNDLE_WREADY : STD_LOGIC;
    signal INPUT_BUNDLE_ARVALID : STD_LOGIC;
    signal INPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal INPUT_BUNDLE_RVALID : STD_LOGIC;
    signal INPUT_BUNDLE_RREADY : STD_LOGIC;
    signal INPUT_BUNDLE_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_BUNDLE_RLAST : STD_LOGIC;
    signal INPUT_BUNDLE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_BUNDLE_BVALID : STD_LOGIC;
    signal INPUT_BUNDLE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_BUNDLE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_AWVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_BUNDLE_WVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_WREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_RVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_BUNDLE_RLAST : STD_LOGIC;
    signal OUTPUT_BUNDLE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_BUNDLE_BVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_BREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_BUNDLE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_read_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_read_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_convolution2D_fu_160_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_483 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal p_Result_s_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal loc_V_1_fu_236_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_493 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_250_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_268_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_503 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_3_fu_334_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_3_reg_508 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_12_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_BUNDLE_addr_1_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_BUNDLE_addr_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_423_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state56 : BOOLEAN;
    signal grp_convolution2D_fu_160_ap_start : STD_LOGIC;
    signal grp_convolution2D_fu_160_ap_idle : STD_LOGIC;
    signal grp_convolution2D_fu_160_ap_ready : STD_LOGIC;
    signal grp_convolution2D_fu_160_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_convolution2D_fu_160_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_convolution2D_fu_160_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_convolution2D_fu_160_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_convolution2D_fu_160_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_160_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_convolution2D_fu_160_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_convolution2D_fu_160_operator_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_160_operator_ce0 : STD_LOGIC;
    signal grp_convolution2D_fu_160_operator_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_convolution2D_fu_160_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output4_sum_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal output4_sum5_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal ap_reg_ioackin_OUTPUT_BUNDLE_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_OUTPUT_BUNDLE_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_1_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_fu_226_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast1_fu_240_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_244_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_i_i_i_fu_258_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_i_i_i_cast_fu_264_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_276_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_1_cast_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_i_cast_fu_296_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_285_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_5_i_i_i_fu_292_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_6_i_i_i_fu_300_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_10_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i_i_fu_306_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_4_fu_320_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_324_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_i_i_i_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_i_i_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_357_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum3_fu_377_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum3_cast_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_400_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_cast_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_205_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (61 downto 0);

    component convolution2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        posy : IN STD_LOGIC_VECTOR (9 downto 0);
        posx : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input1 : IN STD_LOGIC_VECTOR (31 downto 0);
        operator_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        operator_ce0 : OUT STD_LOGIC;
        operator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_sitodp_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_dsqrt_64ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_mul_32s_32sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_horiz_operacud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_vert_operator IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_INPUT_BUNDLE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sobel_OUTPUT_BUNDLE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    horiz_operator_U : component sobel_horiz_operacud
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_convolution2D_fu_160_operator_address0,
        ce0 => horiz_operator_ce0,
        q0 => horiz_operator_q0);

    vert_operator_U : component sobel_vert_operator
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_convolution2D_fu_160_operator_address0,
        ce0 => vert_operator_ce0,
        q0 => vert_operator_q0);

    sobel_AXILiteS_s_axi_U : component sobel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r => input_r,
        output_r => output_r);

    sobel_INPUT_BUNDLE_m_axi_U : component sobel_INPUT_BUNDLE_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_BUNDLE_AWVALID,
        AWREADY => m_axi_INPUT_BUNDLE_AWREADY,
        AWADDR => m_axi_INPUT_BUNDLE_AWADDR,
        AWID => m_axi_INPUT_BUNDLE_AWID,
        AWLEN => m_axi_INPUT_BUNDLE_AWLEN,
        AWSIZE => m_axi_INPUT_BUNDLE_AWSIZE,
        AWBURST => m_axi_INPUT_BUNDLE_AWBURST,
        AWLOCK => m_axi_INPUT_BUNDLE_AWLOCK,
        AWCACHE => m_axi_INPUT_BUNDLE_AWCACHE,
        AWPROT => m_axi_INPUT_BUNDLE_AWPROT,
        AWQOS => m_axi_INPUT_BUNDLE_AWQOS,
        AWREGION => m_axi_INPUT_BUNDLE_AWREGION,
        AWUSER => m_axi_INPUT_BUNDLE_AWUSER,
        WVALID => m_axi_INPUT_BUNDLE_WVALID,
        WREADY => m_axi_INPUT_BUNDLE_WREADY,
        WDATA => m_axi_INPUT_BUNDLE_WDATA,
        WSTRB => m_axi_INPUT_BUNDLE_WSTRB,
        WLAST => m_axi_INPUT_BUNDLE_WLAST,
        WID => m_axi_INPUT_BUNDLE_WID,
        WUSER => m_axi_INPUT_BUNDLE_WUSER,
        ARVALID => m_axi_INPUT_BUNDLE_ARVALID,
        ARREADY => m_axi_INPUT_BUNDLE_ARREADY,
        ARADDR => m_axi_INPUT_BUNDLE_ARADDR,
        ARID => m_axi_INPUT_BUNDLE_ARID,
        ARLEN => m_axi_INPUT_BUNDLE_ARLEN,
        ARSIZE => m_axi_INPUT_BUNDLE_ARSIZE,
        ARBURST => m_axi_INPUT_BUNDLE_ARBURST,
        ARLOCK => m_axi_INPUT_BUNDLE_ARLOCK,
        ARCACHE => m_axi_INPUT_BUNDLE_ARCACHE,
        ARPROT => m_axi_INPUT_BUNDLE_ARPROT,
        ARQOS => m_axi_INPUT_BUNDLE_ARQOS,
        ARREGION => m_axi_INPUT_BUNDLE_ARREGION,
        ARUSER => m_axi_INPUT_BUNDLE_ARUSER,
        RVALID => m_axi_INPUT_BUNDLE_RVALID,
        RREADY => m_axi_INPUT_BUNDLE_RREADY,
        RDATA => m_axi_INPUT_BUNDLE_RDATA,
        RLAST => m_axi_INPUT_BUNDLE_RLAST,
        RID => m_axi_INPUT_BUNDLE_RID,
        RUSER => m_axi_INPUT_BUNDLE_RUSER,
        RRESP => m_axi_INPUT_BUNDLE_RRESP,
        BVALID => m_axi_INPUT_BUNDLE_BVALID,
        BREADY => m_axi_INPUT_BUNDLE_BREADY,
        BRESP => m_axi_INPUT_BUNDLE_BRESP,
        BID => m_axi_INPUT_BUNDLE_BID,
        BUSER => m_axi_INPUT_BUNDLE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_BUNDLE_ARVALID,
        I_ARREADY => INPUT_BUNDLE_ARREADY,
        I_ARADDR => grp_convolution2D_fu_160_m_axi_input_r_ARADDR,
        I_ARID => grp_convolution2D_fu_160_m_axi_input_r_ARID,
        I_ARLEN => grp_convolution2D_fu_160_m_axi_input_r_ARLEN,
        I_ARSIZE => grp_convolution2D_fu_160_m_axi_input_r_ARSIZE,
        I_ARLOCK => grp_convolution2D_fu_160_m_axi_input_r_ARLOCK,
        I_ARCACHE => grp_convolution2D_fu_160_m_axi_input_r_ARCACHE,
        I_ARQOS => grp_convolution2D_fu_160_m_axi_input_r_ARQOS,
        I_ARPROT => grp_convolution2D_fu_160_m_axi_input_r_ARPROT,
        I_ARUSER => grp_convolution2D_fu_160_m_axi_input_r_ARUSER,
        I_ARBURST => grp_convolution2D_fu_160_m_axi_input_r_ARBURST,
        I_ARREGION => grp_convolution2D_fu_160_m_axi_input_r_ARREGION,
        I_RVALID => INPUT_BUNDLE_RVALID,
        I_RREADY => INPUT_BUNDLE_RREADY,
        I_RDATA => INPUT_BUNDLE_RDATA,
        I_RID => INPUT_BUNDLE_RID,
        I_RUSER => INPUT_BUNDLE_RUSER,
        I_RRESP => INPUT_BUNDLE_RRESP,
        I_RLAST => INPUT_BUNDLE_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_BUNDLE_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_BUNDLE_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => INPUT_BUNDLE_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_BUNDLE_BRESP,
        I_BID => INPUT_BUNDLE_BID,
        I_BUSER => INPUT_BUNDLE_BUSER);

    sobel_OUTPUT_BUNDLE_m_axi_U : component sobel_OUTPUT_BUNDLE_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_BUNDLE_AWVALID,
        AWREADY => m_axi_OUTPUT_BUNDLE_AWREADY,
        AWADDR => m_axi_OUTPUT_BUNDLE_AWADDR,
        AWID => m_axi_OUTPUT_BUNDLE_AWID,
        AWLEN => m_axi_OUTPUT_BUNDLE_AWLEN,
        AWSIZE => m_axi_OUTPUT_BUNDLE_AWSIZE,
        AWBURST => m_axi_OUTPUT_BUNDLE_AWBURST,
        AWLOCK => m_axi_OUTPUT_BUNDLE_AWLOCK,
        AWCACHE => m_axi_OUTPUT_BUNDLE_AWCACHE,
        AWPROT => m_axi_OUTPUT_BUNDLE_AWPROT,
        AWQOS => m_axi_OUTPUT_BUNDLE_AWQOS,
        AWREGION => m_axi_OUTPUT_BUNDLE_AWREGION,
        AWUSER => m_axi_OUTPUT_BUNDLE_AWUSER,
        WVALID => m_axi_OUTPUT_BUNDLE_WVALID,
        WREADY => m_axi_OUTPUT_BUNDLE_WREADY,
        WDATA => m_axi_OUTPUT_BUNDLE_WDATA,
        WSTRB => m_axi_OUTPUT_BUNDLE_WSTRB,
        WLAST => m_axi_OUTPUT_BUNDLE_WLAST,
        WID => m_axi_OUTPUT_BUNDLE_WID,
        WUSER => m_axi_OUTPUT_BUNDLE_WUSER,
        ARVALID => m_axi_OUTPUT_BUNDLE_ARVALID,
        ARREADY => m_axi_OUTPUT_BUNDLE_ARREADY,
        ARADDR => m_axi_OUTPUT_BUNDLE_ARADDR,
        ARID => m_axi_OUTPUT_BUNDLE_ARID,
        ARLEN => m_axi_OUTPUT_BUNDLE_ARLEN,
        ARSIZE => m_axi_OUTPUT_BUNDLE_ARSIZE,
        ARBURST => m_axi_OUTPUT_BUNDLE_ARBURST,
        ARLOCK => m_axi_OUTPUT_BUNDLE_ARLOCK,
        ARCACHE => m_axi_OUTPUT_BUNDLE_ARCACHE,
        ARPROT => m_axi_OUTPUT_BUNDLE_ARPROT,
        ARQOS => m_axi_OUTPUT_BUNDLE_ARQOS,
        ARREGION => m_axi_OUTPUT_BUNDLE_ARREGION,
        ARUSER => m_axi_OUTPUT_BUNDLE_ARUSER,
        RVALID => m_axi_OUTPUT_BUNDLE_RVALID,
        RREADY => m_axi_OUTPUT_BUNDLE_RREADY,
        RDATA => m_axi_OUTPUT_BUNDLE_RDATA,
        RLAST => m_axi_OUTPUT_BUNDLE_RLAST,
        RID => m_axi_OUTPUT_BUNDLE_RID,
        RUSER => m_axi_OUTPUT_BUNDLE_RUSER,
        RRESP => m_axi_OUTPUT_BUNDLE_RRESP,
        BVALID => m_axi_OUTPUT_BUNDLE_BVALID,
        BREADY => m_axi_OUTPUT_BUNDLE_BREADY,
        BRESP => m_axi_OUTPUT_BUNDLE_BRESP,
        BID => m_axi_OUTPUT_BUNDLE_BID,
        BUSER => m_axi_OUTPUT_BUNDLE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_BUNDLE_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_BUNDLE_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_BUNDLE_RDATA,
        I_RID => OUTPUT_BUNDLE_RID,
        I_RUSER => OUTPUT_BUNDLE_RUSER,
        I_RRESP => OUTPUT_BUNDLE_RRESP,
        I_RLAST => OUTPUT_BUNDLE_RLAST,
        I_AWVALID => OUTPUT_BUNDLE_AWVALID,
        I_AWREADY => OUTPUT_BUNDLE_AWREADY,
        I_AWADDR => OUTPUT_BUNDLE_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_BUNDLE_WVALID,
        I_WREADY => OUTPUT_BUNDLE_WREADY,
        I_WDATA => OUTPUT_BUNDLE_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => OUTPUT_BUNDLE_BVALID,
        I_BREADY => OUTPUT_BUNDLE_BREADY,
        I_BRESP => OUTPUT_BUNDLE_BRESP,
        I_BID => OUTPUT_BUNDLE_BID,
        I_BUSER => OUTPUT_BUNDLE_BUSER);

    grp_convolution2D_fu_160 : component convolution2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution2D_fu_160_ap_start,
        ap_done => grp_convolution2D_fu_160_ap_done,
        ap_idle => grp_convolution2D_fu_160_ap_idle,
        ap_ready => grp_convolution2D_fu_160_ap_ready,
        posy => i_reg_148,
        posx => j_reg_136,
        m_axi_input_r_AWVALID => grp_convolution2D_fu_160_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_convolution2D_fu_160_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_convolution2D_fu_160_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_convolution2D_fu_160_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_convolution2D_fu_160_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_convolution2D_fu_160_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_convolution2D_fu_160_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_convolution2D_fu_160_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_convolution2D_fu_160_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_convolution2D_fu_160_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_convolution2D_fu_160_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_convolution2D_fu_160_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_convolution2D_fu_160_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_convolution2D_fu_160_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_convolution2D_fu_160_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_convolution2D_fu_160_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_convolution2D_fu_160_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_convolution2D_fu_160_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_convolution2D_fu_160_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => INPUT_BUNDLE_ARREADY,
        m_axi_input_r_ARADDR => grp_convolution2D_fu_160_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_convolution2D_fu_160_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_convolution2D_fu_160_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_convolution2D_fu_160_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_convolution2D_fu_160_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_convolution2D_fu_160_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_convolution2D_fu_160_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_convolution2D_fu_160_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_convolution2D_fu_160_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_convolution2D_fu_160_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_convolution2D_fu_160_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => INPUT_BUNDLE_RVALID,
        m_axi_input_r_RREADY => grp_convolution2D_fu_160_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => INPUT_BUNDLE_RDATA,
        m_axi_input_r_RLAST => INPUT_BUNDLE_RLAST,
        m_axi_input_r_RID => INPUT_BUNDLE_RID,
        m_axi_input_r_RUSER => INPUT_BUNDLE_RUSER,
        m_axi_input_r_RRESP => INPUT_BUNDLE_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_convolution2D_fu_160_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input1 => input_read_reg_435,
        operator_address0 => grp_convolution2D_fu_160_operator_address0,
        operator_ce0 => grp_convolution2D_fu_160_operator_ce0,
        operator_q0 => grp_convolution2D_fu_160_operator_q0,
        ap_return => grp_convolution2D_fu_160_ap_return);

    sobel_sitodp_32nsdEe_U6 : component sobel_sitodp_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_6_reg_473,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p1);

    sobel_dsqrt_64ns_eOg_U7 : component sobel_dsqrt_64ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => p_reg_478,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    sobel_mul_32s_32sfYi_U8 : component sobel_mul_32s_32sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_451,
        din1 => tmp_reg_451,
        ce => grp_fu_201_ce,
        dout => grp_fu_201_p2);

    sobel_mul_32s_32sfYi_U9 : component sobel_mul_32s_32sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_convolution2D_fu_160_ap_return,
        din1 => grp_convolution2D_fu_160_ap_return,
        ce => grp_fu_205_ce,
        dout => grp_fu_205_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_convolution2D_fu_160_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_convolution2D_fu_160_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_189_p2)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_reg_grp_convolution2D_fu_160_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_convolution2D_fu_160_ap_ready)) then 
                    ap_reg_grp_convolution2D_fu_160_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_1 = OUTPUT_BUNDLE_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_const_logic_1 = OUTPUT_BUNDLE_AWREADY)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state51) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state51) and (ap_const_logic_1 = OUTPUT_BUNDLE_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_logic_1 = OUTPUT_BUNDLE_WREADY)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_183_p2))) then 
                i_reg_148 <= ap_const_lv10_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and not((((icmp_reg_513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)))))) then 
                i_reg_148 <= i_1_fu_423_p2;
            end if; 
        end if;
    end process;

    j_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_136 <= ap_const_lv10_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond_fu_189_p2))) then 
                j_reg_136 <= j_1_fu_195_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = icmp_fu_367_p2))) then
                OUTPUT_BUNDLE_addr_1_reg_522 <= output4_sum_fu_389_p2;
                tmp_12_reg_517 <= tmp_12_fu_373_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_1 = icmp_fu_367_p2))) then
                OUTPUT_BUNDLE_addr_reg_527 <= output4_sum5_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                icmp_reg_513 <= icmp_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_read_reg_435 <= input_r;
                output_read_reg_429 <= output_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                isNeg_reg_498 <= sh_assign_fu_244_p2(11 downto 11);
                loc_V_1_reg_493 <= loc_V_1_fu_236_p1;
                p_Result_s_reg_488 <= p_Val2_1_fu_215_p1(63 downto 63);
                sh_assign_1_reg_503 <= sh_assign_1_fu_268_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                p_Val2_3_reg_508 <= p_Val2_3_fu_334_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                p_reg_478 <= grp_fu_175_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_2_reg_463 <= grp_fu_201_p2;
                tmp_5_reg_468 <= grp_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_6_reg_473 <= tmp_6_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_convolution2D_fu_160_ap_done = ap_const_logic_1))) then
                tmp_reg_451 <= grp_convolution2D_fu_160_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                x_assign_reg_483 <= grp_fu_178_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state56, icmp_reg_513, ap_CS_fsm_state50, ap_CS_fsm_state51, OUTPUT_BUNDLE_BVALID, ap_CS_fsm_state3, exitcond_fu_189_p2, ap_CS_fsm_state4, grp_convolution2D_fu_160_ap_done, ap_CS_fsm_state6, icmp_fu_367_p2, ap_CS_fsm_state49, ap_CS_fsm_state2, exitcond1_fu_183_p2, ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY, ap_sig_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_183_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond_fu_189_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_convolution2D_fu_160_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_convolution2D_fu_160_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_1 = icmp_fu_367_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and not((((icmp_reg_513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_BUNDLE_ARVALID_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_189_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_convolution2D_fu_160_m_axi_input_r_ARVALID, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_189_p2)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_BUNDLE_ARVALID <= grp_convolution2D_fu_160_m_axi_input_r_ARVALID;
        else 
            INPUT_BUNDLE_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_BUNDLE_RREADY_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_189_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_convolution2D_fu_160_m_axi_input_r_RREADY, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_189_p2)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_BUNDLE_RREADY <= grp_convolution2D_fu_160_m_axi_input_r_RREADY;
        else 
            INPUT_BUNDLE_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_AWADDR_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state50, OUTPUT_BUNDLE_addr_1_reg_522, OUTPUT_BUNDLE_addr_reg_527, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                OUTPUT_BUNDLE_AWADDR <= OUTPUT_BUNDLE_addr_reg_527;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                OUTPUT_BUNDLE_AWADDR <= OUTPUT_BUNDLE_addr_1_reg_522;
            else 
                OUTPUT_BUNDLE_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUTPUT_BUNDLE_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_BUNDLE_AWVALID_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state50, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)))) then 
            OUTPUT_BUNDLE_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_BREADY_assign_proc : process(ap_CS_fsm_state56, icmp_reg_513, OUTPUT_BUNDLE_BVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_reg_513 = ap_const_lv1_0) and not((((icmp_reg_513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID))))) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_reg_513 = ap_const_lv1_1) and not((((icmp_reg_513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID))))))) then 
            OUTPUT_BUNDLE_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_WDATA_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state51, tmp_12_reg_517, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                OUTPUT_BUNDLE_WDATA <= ap_const_lv8_FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                OUTPUT_BUNDLE_WDATA <= tmp_12_reg_517;
            else 
                OUTPUT_BUNDLE_WDATA <= "XXXXXXXX";
            end if;
        else 
            OUTPUT_BUNDLE_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    OUTPUT_BUNDLE_WVALID_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state51, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state51) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)))) then 
            OUTPUT_BUNDLE_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_AW_assign_proc : process(m_axi_OUTPUT_BUNDLE_AWREADY, ap_CS_fsm_state57, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            OUTPUT_BUNDLE_blk_n_AW <= m_axi_OUTPUT_BUNDLE_AWREADY;
        else 
            OUTPUT_BUNDLE_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_B_assign_proc : process(m_axi_OUTPUT_BUNDLE_BVALID, ap_CS_fsm_state56, icmp_reg_513)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_reg_513 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_reg_513 = ap_const_lv1_0)))) then 
            OUTPUT_BUNDLE_blk_n_B <= m_axi_OUTPUT_BUNDLE_BVALID;
        else 
            OUTPUT_BUNDLE_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_W_assign_proc : process(m_axi_OUTPUT_BUNDLE_WREADY, ap_CS_fsm_state58, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            OUTPUT_BUNDLE_blk_n_W <= m_axi_OUTPUT_BUNDLE_WREADY;
        else 
            OUTPUT_BUNDLE_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state56_assign_proc : process(icmp_reg_513, OUTPUT_BUNDLE_BVALID)
    begin
                ap_block_state56 <= (((icmp_reg_513 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_513 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_183_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_183_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_183_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_183_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY_assign_proc : process(OUTPUT_BUNDLE_AWREADY, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) then 
            ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY <= OUTPUT_BUNDLE_AWREADY;
        else 
            ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_BUNDLE_WREADY_assign_proc : process(OUTPUT_BUNDLE_WREADY, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) then 
            ap_sig_ioackin_OUTPUT_BUNDLE_WREADY <= OUTPUT_BUNDLE_WREADY;
        else 
            ap_sig_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_183_p2 <= "1" when (j_reg_136 = ap_const_lv10_3FF) else "0";
    exitcond_fu_189_p2 <= "1" when (i_reg_148 = ap_const_lv10_3FF) else "0";
    grp_convolution2D_fu_160_ap_start <= ap_reg_grp_convolution2D_fu_160_ap_start;

    grp_convolution2D_fu_160_operator_q0_assign_proc : process(horiz_operator_q0, vert_operator_q0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_convolution2D_fu_160_operator_q0 <= vert_operator_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_convolution2D_fu_160_operator_q0 <= horiz_operator_q0;
        else 
            grp_convolution2D_fu_160_operator_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_ce_assign_proc : process(grp_convolution2D_fu_160_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((((grp_convolution2D_fu_160_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_201_ce <= ap_const_logic_1;
        else 
            grp_fu_201_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_205_ce_assign_proc : process(grp_convolution2D_fu_160_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((((grp_convolution2D_fu_160_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_205_ce <= ap_const_logic_1;
        else 
            grp_fu_205_ce <= ap_const_logic_0;
        end if; 
    end process;


    horiz_operator_ce0_assign_proc : process(ap_CS_fsm_state4, grp_convolution2D_fu_160_operator_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            horiz_operator_ce0 <= grp_convolution2D_fu_160_operator_ce0;
        else 
            horiz_operator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_423_p2 <= std_logic_vector(unsigned(i_reg_148) + unsigned(ap_const_lv10_1));
    icmp_fu_367_p2 <= "1" when (signed(tmp_11_fu_357_p4) > signed(ap_const_lv24_0)) else "0";
    isNeg_fu_250_p3 <= sh_assign_fu_244_p2(11 downto 11);
    j_1_fu_195_p2 <= std_logic_vector(unsigned(j_reg_136) + unsigned(ap_const_lv10_1));
    loc_V_1_fu_236_p1 <= p_Val2_1_fu_215_p1(52 - 1 downto 0);
    loc_V_fu_226_p4 <= p_Val2_1_fu_215_p1(62 downto 52);
    output4_sum5_fu_412_p2 <= std_logic_vector(unsigned(sum_cast_fu_408_p1) + unsigned(output_read_reg_429));
    output4_sum_fu_389_p2 <= std_logic_vector(unsigned(output_read_reg_429) + unsigned(sum3_cast_fu_385_p1));
    p_Val2_1_fu_215_p1 <= x_assign_reg_483;
    p_Val2_3_fu_334_p3 <= 
        tmp_4_fu_320_p1 when (isNeg_reg_498(0) = '1') else 
        tmp_7_fu_324_p4;
    p_Val2_s_fu_350_p3 <= 
        tmp_12_i_i_i_fu_344_p2 when (p_Result_s_reg_488(0) = '1') else 
        tmp_9_i_i_i_fu_341_p1;
        sh_assign_1_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_503),32));

    sh_assign_1_fu_268_p3 <= 
        tmp_4_i_i_i_cast_fu_264_p1 when (isNeg_fu_250_p3(0) = '1') else 
        sh_assign_fu_244_p2;
    sh_assign_fu_244_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast1_fu_240_p1));
    sum3_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_377_p3),32));
    sum3_fu_377_p3 <= (i_reg_148 & j_reg_136);
    sum_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_400_p3),32));
    sum_fu_400_p3 <= (i_reg_148 & j_reg_136);
    tmp_10_fu_312_p3 <= tmp_6_i_i_i_fu_300_p2(53 downto 53);
    tmp_11_fu_357_p4 <= p_Val2_s_fu_350_p3(31 downto 8);
    tmp_12_fu_373_p1 <= p_Val2_s_fu_350_p3(8 - 1 downto 0);
    tmp_12_i_i_i_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_9_i_i_i_fu_341_p1));
    tmp_4_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_312_p3),31));
        tmp_4_i_i_i_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_i_i_i_fu_258_p2),12));

    tmp_4_i_i_i_fu_258_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_226_p4));
    tmp_5_i_i_i_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_289_p1),54));
    tmp_5_i_i_i_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_289_p1),137));
    tmp_6_fu_211_p2 <= std_logic_vector(unsigned(tmp_5_reg_468) + unsigned(tmp_2_reg_463));
    tmp_6_i_i_i_fu_300_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_276_p4),to_integer(unsigned('0' & tmp_5_i_i_i_cast_fu_296_p1(31-1 downto 0)))));
    tmp_7_fu_324_p4 <= tmp_7_i_i_i_fu_306_p2(83 downto 53);
    tmp_7_i_i_i_fu_306_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_285_p1),to_integer(unsigned('0' & tmp_5_i_i_i_fu_292_p1(31-1 downto 0)))));
    tmp_9_i_i_i_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_reg_508),32));
    tmp_i_i_i_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_276_p4),137));
    tmp_i_i_i_fu_276_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_493) & ap_const_lv1_0);
    tmp_i_i_i_i_cast1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_226_p4),12));

    vert_operator_ce0_assign_proc : process(ap_CS_fsm_state6, grp_convolution2D_fu_160_operator_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vert_operator_ce0 <= grp_convolution2D_fu_160_operator_ce0;
        else 
            vert_operator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
