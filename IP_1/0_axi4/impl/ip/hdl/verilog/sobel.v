// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=334236925,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=12,HLS_SYN_FF=5274,HLS_SYN_LUT=6231}" *)

module sobel (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_BUNDLE_AWVALID,
        m_axi_INPUT_BUNDLE_AWREADY,
        m_axi_INPUT_BUNDLE_AWADDR,
        m_axi_INPUT_BUNDLE_AWID,
        m_axi_INPUT_BUNDLE_AWLEN,
        m_axi_INPUT_BUNDLE_AWSIZE,
        m_axi_INPUT_BUNDLE_AWBURST,
        m_axi_INPUT_BUNDLE_AWLOCK,
        m_axi_INPUT_BUNDLE_AWCACHE,
        m_axi_INPUT_BUNDLE_AWPROT,
        m_axi_INPUT_BUNDLE_AWQOS,
        m_axi_INPUT_BUNDLE_AWREGION,
        m_axi_INPUT_BUNDLE_AWUSER,
        m_axi_INPUT_BUNDLE_WVALID,
        m_axi_INPUT_BUNDLE_WREADY,
        m_axi_INPUT_BUNDLE_WDATA,
        m_axi_INPUT_BUNDLE_WSTRB,
        m_axi_INPUT_BUNDLE_WLAST,
        m_axi_INPUT_BUNDLE_WID,
        m_axi_INPUT_BUNDLE_WUSER,
        m_axi_INPUT_BUNDLE_ARVALID,
        m_axi_INPUT_BUNDLE_ARREADY,
        m_axi_INPUT_BUNDLE_ARADDR,
        m_axi_INPUT_BUNDLE_ARID,
        m_axi_INPUT_BUNDLE_ARLEN,
        m_axi_INPUT_BUNDLE_ARSIZE,
        m_axi_INPUT_BUNDLE_ARBURST,
        m_axi_INPUT_BUNDLE_ARLOCK,
        m_axi_INPUT_BUNDLE_ARCACHE,
        m_axi_INPUT_BUNDLE_ARPROT,
        m_axi_INPUT_BUNDLE_ARQOS,
        m_axi_INPUT_BUNDLE_ARREGION,
        m_axi_INPUT_BUNDLE_ARUSER,
        m_axi_INPUT_BUNDLE_RVALID,
        m_axi_INPUT_BUNDLE_RREADY,
        m_axi_INPUT_BUNDLE_RDATA,
        m_axi_INPUT_BUNDLE_RLAST,
        m_axi_INPUT_BUNDLE_RID,
        m_axi_INPUT_BUNDLE_RUSER,
        m_axi_INPUT_BUNDLE_RRESP,
        m_axi_INPUT_BUNDLE_BVALID,
        m_axi_INPUT_BUNDLE_BREADY,
        m_axi_INPUT_BUNDLE_BRESP,
        m_axi_INPUT_BUNDLE_BID,
        m_axi_INPUT_BUNDLE_BUSER,
        m_axi_OUTPUT_BUNDLE_AWVALID,
        m_axi_OUTPUT_BUNDLE_AWREADY,
        m_axi_OUTPUT_BUNDLE_AWADDR,
        m_axi_OUTPUT_BUNDLE_AWID,
        m_axi_OUTPUT_BUNDLE_AWLEN,
        m_axi_OUTPUT_BUNDLE_AWSIZE,
        m_axi_OUTPUT_BUNDLE_AWBURST,
        m_axi_OUTPUT_BUNDLE_AWLOCK,
        m_axi_OUTPUT_BUNDLE_AWCACHE,
        m_axi_OUTPUT_BUNDLE_AWPROT,
        m_axi_OUTPUT_BUNDLE_AWQOS,
        m_axi_OUTPUT_BUNDLE_AWREGION,
        m_axi_OUTPUT_BUNDLE_AWUSER,
        m_axi_OUTPUT_BUNDLE_WVALID,
        m_axi_OUTPUT_BUNDLE_WREADY,
        m_axi_OUTPUT_BUNDLE_WDATA,
        m_axi_OUTPUT_BUNDLE_WSTRB,
        m_axi_OUTPUT_BUNDLE_WLAST,
        m_axi_OUTPUT_BUNDLE_WID,
        m_axi_OUTPUT_BUNDLE_WUSER,
        m_axi_OUTPUT_BUNDLE_ARVALID,
        m_axi_OUTPUT_BUNDLE_ARREADY,
        m_axi_OUTPUT_BUNDLE_ARADDR,
        m_axi_OUTPUT_BUNDLE_ARID,
        m_axi_OUTPUT_BUNDLE_ARLEN,
        m_axi_OUTPUT_BUNDLE_ARSIZE,
        m_axi_OUTPUT_BUNDLE_ARBURST,
        m_axi_OUTPUT_BUNDLE_ARLOCK,
        m_axi_OUTPUT_BUNDLE_ARCACHE,
        m_axi_OUTPUT_BUNDLE_ARPROT,
        m_axi_OUTPUT_BUNDLE_ARQOS,
        m_axi_OUTPUT_BUNDLE_ARREGION,
        m_axi_OUTPUT_BUNDLE_ARUSER,
        m_axi_OUTPUT_BUNDLE_RVALID,
        m_axi_OUTPUT_BUNDLE_RREADY,
        m_axi_OUTPUT_BUNDLE_RDATA,
        m_axi_OUTPUT_BUNDLE_RLAST,
        m_axi_OUTPUT_BUNDLE_RID,
        m_axi_OUTPUT_BUNDLE_RUSER,
        m_axi_OUTPUT_BUNDLE_RRESP,
        m_axi_OUTPUT_BUNDLE_BVALID,
        m_axi_OUTPUT_BUNDLE_BREADY,
        m_axi_OUTPUT_BUNDLE_BRESP,
        m_axi_OUTPUT_BUNDLE_BID,
        m_axi_OUTPUT_BUNDLE_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 62'd1;
parameter    ap_ST_fsm_state2 = 62'd2;
parameter    ap_ST_fsm_state3 = 62'd4;
parameter    ap_ST_fsm_state4 = 62'd8;
parameter    ap_ST_fsm_state5 = 62'd16;
parameter    ap_ST_fsm_state6 = 62'd32;
parameter    ap_ST_fsm_state7 = 62'd64;
parameter    ap_ST_fsm_state8 = 62'd128;
parameter    ap_ST_fsm_state9 = 62'd256;
parameter    ap_ST_fsm_state10 = 62'd512;
parameter    ap_ST_fsm_state11 = 62'd1024;
parameter    ap_ST_fsm_state12 = 62'd2048;
parameter    ap_ST_fsm_state13 = 62'd4096;
parameter    ap_ST_fsm_state14 = 62'd8192;
parameter    ap_ST_fsm_state15 = 62'd16384;
parameter    ap_ST_fsm_state16 = 62'd32768;
parameter    ap_ST_fsm_state17 = 62'd65536;
parameter    ap_ST_fsm_state18 = 62'd131072;
parameter    ap_ST_fsm_state19 = 62'd262144;
parameter    ap_ST_fsm_state20 = 62'd524288;
parameter    ap_ST_fsm_state21 = 62'd1048576;
parameter    ap_ST_fsm_state22 = 62'd2097152;
parameter    ap_ST_fsm_state23 = 62'd4194304;
parameter    ap_ST_fsm_state24 = 62'd8388608;
parameter    ap_ST_fsm_state25 = 62'd16777216;
parameter    ap_ST_fsm_state26 = 62'd33554432;
parameter    ap_ST_fsm_state27 = 62'd67108864;
parameter    ap_ST_fsm_state28 = 62'd134217728;
parameter    ap_ST_fsm_state29 = 62'd268435456;
parameter    ap_ST_fsm_state30 = 62'd536870912;
parameter    ap_ST_fsm_state31 = 62'd1073741824;
parameter    ap_ST_fsm_state32 = 62'd2147483648;
parameter    ap_ST_fsm_state33 = 62'd4294967296;
parameter    ap_ST_fsm_state34 = 62'd8589934592;
parameter    ap_ST_fsm_state35 = 62'd17179869184;
parameter    ap_ST_fsm_state36 = 62'd34359738368;
parameter    ap_ST_fsm_state37 = 62'd68719476736;
parameter    ap_ST_fsm_state38 = 62'd137438953472;
parameter    ap_ST_fsm_state39 = 62'd274877906944;
parameter    ap_ST_fsm_state40 = 62'd549755813888;
parameter    ap_ST_fsm_state41 = 62'd1099511627776;
parameter    ap_ST_fsm_state42 = 62'd2199023255552;
parameter    ap_ST_fsm_state43 = 62'd4398046511104;
parameter    ap_ST_fsm_state44 = 62'd8796093022208;
parameter    ap_ST_fsm_state45 = 62'd17592186044416;
parameter    ap_ST_fsm_state46 = 62'd35184372088832;
parameter    ap_ST_fsm_state47 = 62'd70368744177664;
parameter    ap_ST_fsm_state48 = 62'd140737488355328;
parameter    ap_ST_fsm_state49 = 62'd281474976710656;
parameter    ap_ST_fsm_state50 = 62'd562949953421312;
parameter    ap_ST_fsm_state51 = 62'd1125899906842624;
parameter    ap_ST_fsm_state52 = 62'd2251799813685248;
parameter    ap_ST_fsm_state53 = 62'd4503599627370496;
parameter    ap_ST_fsm_state54 = 62'd9007199254740992;
parameter    ap_ST_fsm_state55 = 62'd18014398509481984;
parameter    ap_ST_fsm_state56 = 62'd36028797018963968;
parameter    ap_ST_fsm_state57 = 62'd72057594037927936;
parameter    ap_ST_fsm_state58 = 62'd144115188075855872;
parameter    ap_ST_fsm_state59 = 62'd288230376151711744;
parameter    ap_ST_fsm_state60 = 62'd576460752303423488;
parameter    ap_ST_fsm_state61 = 62'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 62'd2305843009213693952;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_BUNDLE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_BUNDLE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_BUNDLE_AWVALID;
input   m_axi_INPUT_BUNDLE_AWREADY;
output  [C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWADDR;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWID;
output  [7:0] m_axi_INPUT_BUNDLE_AWLEN;
output  [2:0] m_axi_INPUT_BUNDLE_AWSIZE;
output  [1:0] m_axi_INPUT_BUNDLE_AWBURST;
output  [1:0] m_axi_INPUT_BUNDLE_AWLOCK;
output  [3:0] m_axi_INPUT_BUNDLE_AWCACHE;
output  [2:0] m_axi_INPUT_BUNDLE_AWPROT;
output  [3:0] m_axi_INPUT_BUNDLE_AWQOS;
output  [3:0] m_axi_INPUT_BUNDLE_AWREGION;
output  [C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWUSER;
output   m_axi_INPUT_BUNDLE_WVALID;
input   m_axi_INPUT_BUNDLE_WREADY;
output  [C_M_AXI_INPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WDATA;
output  [C_M_AXI_INPUT_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WSTRB;
output   m_axi_INPUT_BUNDLE_WLAST;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WID;
output  [C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WUSER;
output   m_axi_INPUT_BUNDLE_ARVALID;
input   m_axi_INPUT_BUNDLE_ARREADY;
output  [C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARADDR;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARID;
output  [7:0] m_axi_INPUT_BUNDLE_ARLEN;
output  [2:0] m_axi_INPUT_BUNDLE_ARSIZE;
output  [1:0] m_axi_INPUT_BUNDLE_ARBURST;
output  [1:0] m_axi_INPUT_BUNDLE_ARLOCK;
output  [3:0] m_axi_INPUT_BUNDLE_ARCACHE;
output  [2:0] m_axi_INPUT_BUNDLE_ARPROT;
output  [3:0] m_axi_INPUT_BUNDLE_ARQOS;
output  [3:0] m_axi_INPUT_BUNDLE_ARREGION;
output  [C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARUSER;
input   m_axi_INPUT_BUNDLE_RVALID;
output   m_axi_INPUT_BUNDLE_RREADY;
input  [C_M_AXI_INPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RDATA;
input   m_axi_INPUT_BUNDLE_RLAST;
input  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RID;
input  [C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RUSER;
input  [1:0] m_axi_INPUT_BUNDLE_RRESP;
input   m_axi_INPUT_BUNDLE_BVALID;
output   m_axi_INPUT_BUNDLE_BREADY;
input  [1:0] m_axi_INPUT_BUNDLE_BRESP;
input  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_BID;
input  [C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_BUSER;
output   m_axi_OUTPUT_BUNDLE_AWVALID;
input   m_axi_OUTPUT_BUNDLE_AWREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWADDR;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWID;
output  [7:0] m_axi_OUTPUT_BUNDLE_AWLEN;
output  [2:0] m_axi_OUTPUT_BUNDLE_AWSIZE;
output  [1:0] m_axi_OUTPUT_BUNDLE_AWBURST;
output  [1:0] m_axi_OUTPUT_BUNDLE_AWLOCK;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWCACHE;
output  [2:0] m_axi_OUTPUT_BUNDLE_AWPROT;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWQOS;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWREGION;
output  [C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWUSER;
output   m_axi_OUTPUT_BUNDLE_WVALID;
input   m_axi_OUTPUT_BUNDLE_WREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WDATA;
output  [C_M_AXI_OUTPUT_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WSTRB;
output   m_axi_OUTPUT_BUNDLE_WLAST;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WID;
output  [C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WUSER;
output   m_axi_OUTPUT_BUNDLE_ARVALID;
input   m_axi_OUTPUT_BUNDLE_ARREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARADDR;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARID;
output  [7:0] m_axi_OUTPUT_BUNDLE_ARLEN;
output  [2:0] m_axi_OUTPUT_BUNDLE_ARSIZE;
output  [1:0] m_axi_OUTPUT_BUNDLE_ARBURST;
output  [1:0] m_axi_OUTPUT_BUNDLE_ARLOCK;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARCACHE;
output  [2:0] m_axi_OUTPUT_BUNDLE_ARPROT;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARQOS;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARREGION;
output  [C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARUSER;
input   m_axi_OUTPUT_BUNDLE_RVALID;
output   m_axi_OUTPUT_BUNDLE_RREADY;
input  [C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RDATA;
input   m_axi_OUTPUT_BUNDLE_RLAST;
input  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RID;
input  [C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RUSER;
input  [1:0] m_axi_OUTPUT_BUNDLE_RRESP;
input   m_axi_OUTPUT_BUNDLE_BVALID;
output   m_axi_OUTPUT_BUNDLE_BREADY;
input  [1:0] m_axi_OUTPUT_BUNDLE_BRESP;
input  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_BID;
input  [C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [61:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] output_r;
reg    horiz_operator_ce0;
wire   [31:0] horiz_operator_q0;
reg    vert_operator_ce0;
wire   [31:0] vert_operator_q0;
reg    OUTPUT_BUNDLE_blk_n_AW;
wire    ap_CS_fsm_state57;
reg    OUTPUT_BUNDLE_blk_n_W;
wire    ap_CS_fsm_state58;
reg    OUTPUT_BUNDLE_blk_n_B;
wire    ap_CS_fsm_state56;
reg   [0:0] icmp_reg_513;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    INPUT_BUNDLE_AWREADY;
wire    INPUT_BUNDLE_WREADY;
reg    INPUT_BUNDLE_ARVALID;
wire    INPUT_BUNDLE_ARREADY;
wire    INPUT_BUNDLE_RVALID;
reg    INPUT_BUNDLE_RREADY;
wire   [7:0] INPUT_BUNDLE_RDATA;
wire    INPUT_BUNDLE_RLAST;
wire   [0:0] INPUT_BUNDLE_RID;
wire   [0:0] INPUT_BUNDLE_RUSER;
wire   [1:0] INPUT_BUNDLE_RRESP;
wire    INPUT_BUNDLE_BVALID;
wire   [1:0] INPUT_BUNDLE_BRESP;
wire   [0:0] INPUT_BUNDLE_BID;
wire   [0:0] INPUT_BUNDLE_BUSER;
reg    OUTPUT_BUNDLE_AWVALID;
wire    OUTPUT_BUNDLE_AWREADY;
reg   [31:0] OUTPUT_BUNDLE_AWADDR;
reg    OUTPUT_BUNDLE_WVALID;
wire    OUTPUT_BUNDLE_WREADY;
reg   [7:0] OUTPUT_BUNDLE_WDATA;
wire    OUTPUT_BUNDLE_ARREADY;
wire    OUTPUT_BUNDLE_RVALID;
wire   [7:0] OUTPUT_BUNDLE_RDATA;
wire    OUTPUT_BUNDLE_RLAST;
wire   [0:0] OUTPUT_BUNDLE_RID;
wire   [0:0] OUTPUT_BUNDLE_RUSER;
wire   [1:0] OUTPUT_BUNDLE_RRESP;
wire    OUTPUT_BUNDLE_BVALID;
reg    OUTPUT_BUNDLE_BREADY;
wire   [1:0] OUTPUT_BUNDLE_BRESP;
wire   [0:0] OUTPUT_BUNDLE_BID;
wire   [0:0] OUTPUT_BUNDLE_BUSER;
reg   [31:0] output_read_reg_429;
reg   [31:0] input_read_reg_435;
wire   [9:0] j_1_fu_195_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_189_p2;
wire  signed [31:0] grp_convolution2D_fu_160_ap_return;
reg  signed [31:0] tmp_reg_451;
wire    ap_CS_fsm_state4;
wire    grp_convolution2D_fu_160_ap_done;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] tmp_2_reg_463;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] tmp_5_reg_468;
wire   [31:0] tmp_6_fu_211_p2;
reg   [31:0] tmp_6_reg_473;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_175_p1;
reg   [63:0] p_reg_478;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_178_p2;
reg   [63:0] x_assign_reg_483;
wire    ap_CS_fsm_state46;
reg   [0:0] p_Result_s_reg_488;
wire    ap_CS_fsm_state47;
wire   [51:0] loc_V_1_fu_236_p1;
reg   [51:0] loc_V_1_reg_493;
wire   [0:0] isNeg_fu_250_p3;
reg   [0:0] isNeg_reg_498;
wire   [11:0] sh_assign_1_fu_268_p3;
reg   [11:0] sh_assign_1_reg_503;
wire   [30:0] p_Val2_3_fu_334_p3;
reg   [30:0] p_Val2_3_reg_508;
wire    ap_CS_fsm_state48;
wire   [0:0] icmp_fu_367_p2;
wire    ap_CS_fsm_state49;
wire   [7:0] tmp_12_fu_373_p1;
reg   [7:0] tmp_12_reg_517;
reg   [31:0] OUTPUT_BUNDLE_addr_1_reg_522;
reg   [31:0] OUTPUT_BUNDLE_addr_reg_527;
wire   [9:0] i_1_fu_423_p2;
reg    ap_block_state56;
wire    grp_convolution2D_fu_160_ap_start;
wire    grp_convolution2D_fu_160_ap_idle;
wire    grp_convolution2D_fu_160_ap_ready;
wire    grp_convolution2D_fu_160_m_axi_input_r_AWVALID;
wire   [31:0] grp_convolution2D_fu_160_m_axi_input_r_AWADDR;
wire   [0:0] grp_convolution2D_fu_160_m_axi_input_r_AWID;
wire   [31:0] grp_convolution2D_fu_160_m_axi_input_r_AWLEN;
wire   [2:0] grp_convolution2D_fu_160_m_axi_input_r_AWSIZE;
wire   [1:0] grp_convolution2D_fu_160_m_axi_input_r_AWBURST;
wire   [1:0] grp_convolution2D_fu_160_m_axi_input_r_AWLOCK;
wire   [3:0] grp_convolution2D_fu_160_m_axi_input_r_AWCACHE;
wire   [2:0] grp_convolution2D_fu_160_m_axi_input_r_AWPROT;
wire   [3:0] grp_convolution2D_fu_160_m_axi_input_r_AWQOS;
wire   [3:0] grp_convolution2D_fu_160_m_axi_input_r_AWREGION;
wire   [0:0] grp_convolution2D_fu_160_m_axi_input_r_AWUSER;
wire    grp_convolution2D_fu_160_m_axi_input_r_WVALID;
wire   [7:0] grp_convolution2D_fu_160_m_axi_input_r_WDATA;
wire   [0:0] grp_convolution2D_fu_160_m_axi_input_r_WSTRB;
wire    grp_convolution2D_fu_160_m_axi_input_r_WLAST;
wire   [0:0] grp_convolution2D_fu_160_m_axi_input_r_WID;
wire   [0:0] grp_convolution2D_fu_160_m_axi_input_r_WUSER;
wire    grp_convolution2D_fu_160_m_axi_input_r_ARVALID;
wire   [31:0] grp_convolution2D_fu_160_m_axi_input_r_ARADDR;
wire   [0:0] grp_convolution2D_fu_160_m_axi_input_r_ARID;
wire   [31:0] grp_convolution2D_fu_160_m_axi_input_r_ARLEN;
wire   [2:0] grp_convolution2D_fu_160_m_axi_input_r_ARSIZE;
wire   [1:0] grp_convolution2D_fu_160_m_axi_input_r_ARBURST;
wire   [1:0] grp_convolution2D_fu_160_m_axi_input_r_ARLOCK;
wire   [3:0] grp_convolution2D_fu_160_m_axi_input_r_ARCACHE;
wire   [2:0] grp_convolution2D_fu_160_m_axi_input_r_ARPROT;
wire   [3:0] grp_convolution2D_fu_160_m_axi_input_r_ARQOS;
wire   [3:0] grp_convolution2D_fu_160_m_axi_input_r_ARREGION;
wire   [0:0] grp_convolution2D_fu_160_m_axi_input_r_ARUSER;
wire    grp_convolution2D_fu_160_m_axi_input_r_RREADY;
wire    grp_convolution2D_fu_160_m_axi_input_r_BREADY;
wire   [3:0] grp_convolution2D_fu_160_operator_address0;
wire    grp_convolution2D_fu_160_operator_ce0;
reg   [31:0] grp_convolution2D_fu_160_operator_q0;
reg   [9:0] j_reg_136;
reg   [9:0] i_reg_148;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_183_p2;
reg    ap_reg_grp_convolution2D_fu_160_ap_start;
wire    ap_CS_fsm_state5;
wire   [31:0] output4_sum_fu_389_p2;
wire   [31:0] output4_sum5_fu_412_p2;
reg    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY;
reg    ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY;
reg    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY;
reg    ap_sig_ioackin_OUTPUT_BUNDLE_WREADY;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
wire   [63:0] p_Val2_1_fu_215_p1;
wire   [10:0] loc_V_fu_226_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_240_p1;
wire   [11:0] sh_assign_fu_244_p2;
wire   [10:0] tmp_4_i_i_i_fu_258_p2;
wire  signed [11:0] tmp_4_i_i_i_cast_fu_264_p1;
wire   [53:0] tmp_i_i_i_fu_276_p4;
wire  signed [31:0] sh_assign_1_cast_fu_289_p1;
wire   [53:0] tmp_5_i_i_i_cast_fu_296_p1;
wire   [136:0] tmp_i_i_i_cast_fu_285_p1;
wire   [136:0] tmp_5_i_i_i_fu_292_p1;
wire   [53:0] tmp_6_i_i_i_fu_300_p2;
wire   [0:0] tmp_10_fu_312_p3;
wire   [136:0] tmp_7_i_i_i_fu_306_p2;
wire   [30:0] tmp_4_fu_320_p1;
wire   [30:0] tmp_7_fu_324_p4;
wire   [31:0] tmp_9_i_i_i_fu_341_p1;
wire   [31:0] tmp_12_i_i_i_fu_344_p2;
wire   [31:0] p_Val2_s_fu_350_p3;
wire   [23:0] tmp_11_fu_357_p4;
wire   [19:0] sum3_fu_377_p3;
wire   [31:0] sum3_cast_fu_385_p1;
wire   [19:0] sum_fu_400_p3;
wire   [31:0] sum_cast_fu_408_p1;
reg    grp_fu_201_ce;
wire    ap_CS_fsm_state7;
reg    grp_fu_205_ce;
reg   [61:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 62'd1;
#0 ap_reg_grp_convolution2D_fu_160_ap_start = 1'b0;
#0 ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = 1'b0;
end

sobel_horiz_operacud #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
horiz_operator_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_convolution2D_fu_160_operator_address0),
    .ce0(horiz_operator_ce0),
    .q0(horiz_operator_q0)
);

sobel_vert_operator #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
vert_operator_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_convolution2D_fu_160_operator_address0),
    .ce0(vert_operator_ce0),
    .q0(vert_operator_q0)
);

sobel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r(input_r),
    .output_r(output_r)
);

sobel_INPUT_BUNDLE_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_BUNDLE_CACHE_VALUE ))
sobel_INPUT_BUNDLE_m_axi_U(
    .AWVALID(m_axi_INPUT_BUNDLE_AWVALID),
    .AWREADY(m_axi_INPUT_BUNDLE_AWREADY),
    .AWADDR(m_axi_INPUT_BUNDLE_AWADDR),
    .AWID(m_axi_INPUT_BUNDLE_AWID),
    .AWLEN(m_axi_INPUT_BUNDLE_AWLEN),
    .AWSIZE(m_axi_INPUT_BUNDLE_AWSIZE),
    .AWBURST(m_axi_INPUT_BUNDLE_AWBURST),
    .AWLOCK(m_axi_INPUT_BUNDLE_AWLOCK),
    .AWCACHE(m_axi_INPUT_BUNDLE_AWCACHE),
    .AWPROT(m_axi_INPUT_BUNDLE_AWPROT),
    .AWQOS(m_axi_INPUT_BUNDLE_AWQOS),
    .AWREGION(m_axi_INPUT_BUNDLE_AWREGION),
    .AWUSER(m_axi_INPUT_BUNDLE_AWUSER),
    .WVALID(m_axi_INPUT_BUNDLE_WVALID),
    .WREADY(m_axi_INPUT_BUNDLE_WREADY),
    .WDATA(m_axi_INPUT_BUNDLE_WDATA),
    .WSTRB(m_axi_INPUT_BUNDLE_WSTRB),
    .WLAST(m_axi_INPUT_BUNDLE_WLAST),
    .WID(m_axi_INPUT_BUNDLE_WID),
    .WUSER(m_axi_INPUT_BUNDLE_WUSER),
    .ARVALID(m_axi_INPUT_BUNDLE_ARVALID),
    .ARREADY(m_axi_INPUT_BUNDLE_ARREADY),
    .ARADDR(m_axi_INPUT_BUNDLE_ARADDR),
    .ARID(m_axi_INPUT_BUNDLE_ARID),
    .ARLEN(m_axi_INPUT_BUNDLE_ARLEN),
    .ARSIZE(m_axi_INPUT_BUNDLE_ARSIZE),
    .ARBURST(m_axi_INPUT_BUNDLE_ARBURST),
    .ARLOCK(m_axi_INPUT_BUNDLE_ARLOCK),
    .ARCACHE(m_axi_INPUT_BUNDLE_ARCACHE),
    .ARPROT(m_axi_INPUT_BUNDLE_ARPROT),
    .ARQOS(m_axi_INPUT_BUNDLE_ARQOS),
    .ARREGION(m_axi_INPUT_BUNDLE_ARREGION),
    .ARUSER(m_axi_INPUT_BUNDLE_ARUSER),
    .RVALID(m_axi_INPUT_BUNDLE_RVALID),
    .RREADY(m_axi_INPUT_BUNDLE_RREADY),
    .RDATA(m_axi_INPUT_BUNDLE_RDATA),
    .RLAST(m_axi_INPUT_BUNDLE_RLAST),
    .RID(m_axi_INPUT_BUNDLE_RID),
    .RUSER(m_axi_INPUT_BUNDLE_RUSER),
    .RRESP(m_axi_INPUT_BUNDLE_RRESP),
    .BVALID(m_axi_INPUT_BUNDLE_BVALID),
    .BREADY(m_axi_INPUT_BUNDLE_BREADY),
    .BRESP(m_axi_INPUT_BUNDLE_BRESP),
    .BID(m_axi_INPUT_BUNDLE_BID),
    .BUSER(m_axi_INPUT_BUNDLE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_BUNDLE_ARVALID),
    .I_ARREADY(INPUT_BUNDLE_ARREADY),
    .I_ARADDR(grp_convolution2D_fu_160_m_axi_input_r_ARADDR),
    .I_ARID(grp_convolution2D_fu_160_m_axi_input_r_ARID),
    .I_ARLEN(grp_convolution2D_fu_160_m_axi_input_r_ARLEN),
    .I_ARSIZE(grp_convolution2D_fu_160_m_axi_input_r_ARSIZE),
    .I_ARLOCK(grp_convolution2D_fu_160_m_axi_input_r_ARLOCK),
    .I_ARCACHE(grp_convolution2D_fu_160_m_axi_input_r_ARCACHE),
    .I_ARQOS(grp_convolution2D_fu_160_m_axi_input_r_ARQOS),
    .I_ARPROT(grp_convolution2D_fu_160_m_axi_input_r_ARPROT),
    .I_ARUSER(grp_convolution2D_fu_160_m_axi_input_r_ARUSER),
    .I_ARBURST(grp_convolution2D_fu_160_m_axi_input_r_ARBURST),
    .I_ARREGION(grp_convolution2D_fu_160_m_axi_input_r_ARREGION),
    .I_RVALID(INPUT_BUNDLE_RVALID),
    .I_RREADY(INPUT_BUNDLE_RREADY),
    .I_RDATA(INPUT_BUNDLE_RDATA),
    .I_RID(INPUT_BUNDLE_RID),
    .I_RUSER(INPUT_BUNDLE_RUSER),
    .I_RRESP(INPUT_BUNDLE_RRESP),
    .I_RLAST(INPUT_BUNDLE_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_BUNDLE_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_BUNDLE_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(INPUT_BUNDLE_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_BUNDLE_BRESP),
    .I_BID(INPUT_BUNDLE_BID),
    .I_BUSER(INPUT_BUNDLE_BUSER)
);

sobel_OUTPUT_BUNDLE_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE ))
sobel_OUTPUT_BUNDLE_m_axi_U(
    .AWVALID(m_axi_OUTPUT_BUNDLE_AWVALID),
    .AWREADY(m_axi_OUTPUT_BUNDLE_AWREADY),
    .AWADDR(m_axi_OUTPUT_BUNDLE_AWADDR),
    .AWID(m_axi_OUTPUT_BUNDLE_AWID),
    .AWLEN(m_axi_OUTPUT_BUNDLE_AWLEN),
    .AWSIZE(m_axi_OUTPUT_BUNDLE_AWSIZE),
    .AWBURST(m_axi_OUTPUT_BUNDLE_AWBURST),
    .AWLOCK(m_axi_OUTPUT_BUNDLE_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_BUNDLE_AWCACHE),
    .AWPROT(m_axi_OUTPUT_BUNDLE_AWPROT),
    .AWQOS(m_axi_OUTPUT_BUNDLE_AWQOS),
    .AWREGION(m_axi_OUTPUT_BUNDLE_AWREGION),
    .AWUSER(m_axi_OUTPUT_BUNDLE_AWUSER),
    .WVALID(m_axi_OUTPUT_BUNDLE_WVALID),
    .WREADY(m_axi_OUTPUT_BUNDLE_WREADY),
    .WDATA(m_axi_OUTPUT_BUNDLE_WDATA),
    .WSTRB(m_axi_OUTPUT_BUNDLE_WSTRB),
    .WLAST(m_axi_OUTPUT_BUNDLE_WLAST),
    .WID(m_axi_OUTPUT_BUNDLE_WID),
    .WUSER(m_axi_OUTPUT_BUNDLE_WUSER),
    .ARVALID(m_axi_OUTPUT_BUNDLE_ARVALID),
    .ARREADY(m_axi_OUTPUT_BUNDLE_ARREADY),
    .ARADDR(m_axi_OUTPUT_BUNDLE_ARADDR),
    .ARID(m_axi_OUTPUT_BUNDLE_ARID),
    .ARLEN(m_axi_OUTPUT_BUNDLE_ARLEN),
    .ARSIZE(m_axi_OUTPUT_BUNDLE_ARSIZE),
    .ARBURST(m_axi_OUTPUT_BUNDLE_ARBURST),
    .ARLOCK(m_axi_OUTPUT_BUNDLE_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_BUNDLE_ARCACHE),
    .ARPROT(m_axi_OUTPUT_BUNDLE_ARPROT),
    .ARQOS(m_axi_OUTPUT_BUNDLE_ARQOS),
    .ARREGION(m_axi_OUTPUT_BUNDLE_ARREGION),
    .ARUSER(m_axi_OUTPUT_BUNDLE_ARUSER),
    .RVALID(m_axi_OUTPUT_BUNDLE_RVALID),
    .RREADY(m_axi_OUTPUT_BUNDLE_RREADY),
    .RDATA(m_axi_OUTPUT_BUNDLE_RDATA),
    .RLAST(m_axi_OUTPUT_BUNDLE_RLAST),
    .RID(m_axi_OUTPUT_BUNDLE_RID),
    .RUSER(m_axi_OUTPUT_BUNDLE_RUSER),
    .RRESP(m_axi_OUTPUT_BUNDLE_RRESP),
    .BVALID(m_axi_OUTPUT_BUNDLE_BVALID),
    .BREADY(m_axi_OUTPUT_BUNDLE_BREADY),
    .BRESP(m_axi_OUTPUT_BUNDLE_BRESP),
    .BID(m_axi_OUTPUT_BUNDLE_BID),
    .BUSER(m_axi_OUTPUT_BUNDLE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_BUNDLE_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_BUNDLE_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_BUNDLE_RDATA),
    .I_RID(OUTPUT_BUNDLE_RID),
    .I_RUSER(OUTPUT_BUNDLE_RUSER),
    .I_RRESP(OUTPUT_BUNDLE_RRESP),
    .I_RLAST(OUTPUT_BUNDLE_RLAST),
    .I_AWVALID(OUTPUT_BUNDLE_AWVALID),
    .I_AWREADY(OUTPUT_BUNDLE_AWREADY),
    .I_AWADDR(OUTPUT_BUNDLE_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUT_BUNDLE_WVALID),
    .I_WREADY(OUTPUT_BUNDLE_WREADY),
    .I_WDATA(OUTPUT_BUNDLE_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(OUTPUT_BUNDLE_BVALID),
    .I_BREADY(OUTPUT_BUNDLE_BREADY),
    .I_BRESP(OUTPUT_BUNDLE_BRESP),
    .I_BID(OUTPUT_BUNDLE_BID),
    .I_BUSER(OUTPUT_BUNDLE_BUSER)
);

convolution2D grp_convolution2D_fu_160(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution2D_fu_160_ap_start),
    .ap_done(grp_convolution2D_fu_160_ap_done),
    .ap_idle(grp_convolution2D_fu_160_ap_idle),
    .ap_ready(grp_convolution2D_fu_160_ap_ready),
    .posy(i_reg_148),
    .posx(j_reg_136),
    .m_axi_input_r_AWVALID(grp_convolution2D_fu_160_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(grp_convolution2D_fu_160_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(grp_convolution2D_fu_160_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(grp_convolution2D_fu_160_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(grp_convolution2D_fu_160_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(grp_convolution2D_fu_160_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(grp_convolution2D_fu_160_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(grp_convolution2D_fu_160_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(grp_convolution2D_fu_160_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(grp_convolution2D_fu_160_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(grp_convolution2D_fu_160_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(grp_convolution2D_fu_160_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(grp_convolution2D_fu_160_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(grp_convolution2D_fu_160_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(grp_convolution2D_fu_160_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(grp_convolution2D_fu_160_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(grp_convolution2D_fu_160_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(grp_convolution2D_fu_160_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(grp_convolution2D_fu_160_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(INPUT_BUNDLE_ARREADY),
    .m_axi_input_r_ARADDR(grp_convolution2D_fu_160_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(grp_convolution2D_fu_160_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(grp_convolution2D_fu_160_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(grp_convolution2D_fu_160_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(grp_convolution2D_fu_160_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(grp_convolution2D_fu_160_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(grp_convolution2D_fu_160_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(grp_convolution2D_fu_160_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(grp_convolution2D_fu_160_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(grp_convolution2D_fu_160_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(grp_convolution2D_fu_160_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(INPUT_BUNDLE_RVALID),
    .m_axi_input_r_RREADY(grp_convolution2D_fu_160_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(INPUT_BUNDLE_RDATA),
    .m_axi_input_r_RLAST(INPUT_BUNDLE_RLAST),
    .m_axi_input_r_RID(INPUT_BUNDLE_RID),
    .m_axi_input_r_RUSER(INPUT_BUNDLE_RUSER),
    .m_axi_input_r_RRESP(INPUT_BUNDLE_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(grp_convolution2D_fu_160_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(2'd0),
    .m_axi_input_r_BID(1'd0),
    .m_axi_input_r_BUSER(1'd0),
    .input1(input_read_reg_435),
    .operator_address0(grp_convolution2D_fu_160_operator_address0),
    .operator_ce0(grp_convolution2D_fu_160_operator_ce0),
    .operator_q0(grp_convolution2D_fu_160_operator_q0),
    .ap_return(grp_convolution2D_fu_160_ap_return)
);

sobel_sitodp_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_sitodp_32nsdEe_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_reg_473),
    .ce(1'b1),
    .dout(grp_fu_175_p1)
);

sobel_dsqrt_64ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_dsqrt_64ns_eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(p_reg_478),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

sobel_mul_32s_32sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sobel_mul_32s_32sfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_451),
    .din1(tmp_reg_451),
    .ce(grp_fu_201_ce),
    .dout(grp_fu_201_p2)
);

sobel_mul_32s_32sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sobel_mul_32s_32sfYi_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_convolution2D_fu_160_ap_return),
    .din1(grp_convolution2D_fu_160_ap_return),
    .ce(grp_fu_205_ce),
    .dout(grp_fu_205_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_convolution2D_fu_160_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_189_p2)) | (1'b1 == ap_CS_fsm_state5))) begin
            ap_reg_grp_convolution2D_fu_160_ap_start <= 1'b1;
        end else if ((1'b1 == grp_convolution2D_fu_160_ap_ready)) begin
            ap_reg_grp_convolution2D_fu_160_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state50) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state50) & (1'b1 == OUTPUT_BUNDLE_AWREADY)) | ((1'b1 == ap_CS_fsm_state57) & (1'b1 == OUTPUT_BUNDLE_AWREADY)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state51) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state51) & (1'b1 == OUTPUT_BUNDLE_WREADY)) | ((1'b1 == ap_CS_fsm_state58) & (1'b1 == OUTPUT_BUNDLE_WREADY)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_fu_183_p2))) begin
        i_reg_148 <= 10'd1;
    end else if (((1'b1 == ap_CS_fsm_state56) & ~(((icmp_reg_513 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_513 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID))))) begin
        i_reg_148 <= i_1_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_136 <= 10'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond_fu_189_p2))) begin
        j_reg_136 <= j_1_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (1'd0 == icmp_fu_367_p2))) begin
        OUTPUT_BUNDLE_addr_1_reg_522 <= output4_sum_fu_389_p2;
        tmp_12_reg_517 <= tmp_12_fu_373_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (1'd1 == icmp_fu_367_p2))) begin
        OUTPUT_BUNDLE_addr_reg_527 <= output4_sum5_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        icmp_reg_513 <= icmp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_read_reg_435 <= input_r;
        output_read_reg_429 <= output_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        isNeg_reg_498 <= sh_assign_fu_244_p2[32'd11];
        loc_V_1_reg_493 <= loc_V_1_fu_236_p1;
        p_Result_s_reg_488 <= p_Val2_1_fu_215_p1[32'd63];
        sh_assign_1_reg_503 <= sh_assign_1_fu_268_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        p_Val2_3_reg_508 <= p_Val2_3_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_reg_478 <= grp_fu_175_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_2_reg_463 <= grp_fu_201_p2;
        tmp_5_reg_468 <= grp_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_6_reg_473 <= tmp_6_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_convolution2D_fu_160_ap_done == 1'b1))) begin
        tmp_reg_451 <= grp_convolution2D_fu_160_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        x_assign_reg_483 <= grp_fu_178_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_189_p2)) | (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_BUNDLE_ARVALID = grp_convolution2D_fu_160_m_axi_input_r_ARVALID;
    end else begin
        INPUT_BUNDLE_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_189_p2)) | (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_BUNDLE_RREADY = grp_convolution2D_fu_160_m_axi_input_r_RREADY;
    end else begin
        INPUT_BUNDLE_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            OUTPUT_BUNDLE_AWADDR = OUTPUT_BUNDLE_addr_reg_527;
        end else if ((1'b1 == ap_CS_fsm_state50)) begin
            OUTPUT_BUNDLE_AWADDR = OUTPUT_BUNDLE_addr_1_reg_522;
        end else begin
            OUTPUT_BUNDLE_AWADDR = 'bx;
        end
    end else begin
        OUTPUT_BUNDLE_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state50) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) | ((1'b1 == ap_CS_fsm_state57) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)))) begin
        OUTPUT_BUNDLE_AWVALID = 1'b1;
    end else begin
        OUTPUT_BUNDLE_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state56) & (icmp_reg_513 == 1'd0) & ~(((icmp_reg_513 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_513 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID)))) | ((1'b1 == ap_CS_fsm_state56) & (icmp_reg_513 == 1'd1) & ~(((icmp_reg_513 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_513 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID)))))) begin
        OUTPUT_BUNDLE_BREADY = 1'b1;
    end else begin
        OUTPUT_BUNDLE_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            OUTPUT_BUNDLE_WDATA = 8'd255;
        end else if ((1'b1 == ap_CS_fsm_state51)) begin
            OUTPUT_BUNDLE_WDATA = tmp_12_reg_517;
        end else begin
            OUTPUT_BUNDLE_WDATA = 'bx;
        end
    end else begin
        OUTPUT_BUNDLE_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) | ((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)))) begin
        OUTPUT_BUNDLE_WVALID = 1'b1;
    end else begin
        OUTPUT_BUNDLE_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state50))) begin
        OUTPUT_BUNDLE_blk_n_AW = m_axi_OUTPUT_BUNDLE_AWREADY;
    end else begin
        OUTPUT_BUNDLE_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state56) & (icmp_reg_513 == 1'd1)) | ((1'b1 == ap_CS_fsm_state56) & (icmp_reg_513 == 1'd0)))) begin
        OUTPUT_BUNDLE_blk_n_B = m_axi_OUTPUT_BUNDLE_BVALID;
    end else begin
        OUTPUT_BUNDLE_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state51))) begin
        OUTPUT_BUNDLE_blk_n_W = m_axi_OUTPUT_BUNDLE_WREADY;
    end else begin
        OUTPUT_BUNDLE_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond1_fu_183_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond1_fu_183_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) begin
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = OUTPUT_BUNDLE_AWREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) begin
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = OUTPUT_BUNDLE_WREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_convolution2D_fu_160_operator_q0 = vert_operator_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_convolution2D_fu_160_operator_q0 = horiz_operator_q0;
    end else begin
        grp_convolution2D_fu_160_operator_q0 = 'bx;
    end
end

always @ (*) begin
    if ((((grp_convolution2D_fu_160_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_201_ce = 1'b1;
    end else begin
        grp_fu_201_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_convolution2D_fu_160_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_205_ce = 1'b1;
    end else begin
        grp_fu_205_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        horiz_operator_ce0 = grp_convolution2D_fu_160_operator_ce0;
    end else begin
        horiz_operator_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vert_operator_ce0 = grp_convolution2D_fu_160_operator_ce0;
    end else begin
        vert_operator_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond1_fu_183_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond_fu_189_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_convolution2D_fu_160_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_convolution2D_fu_160_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (1'd1 == icmp_fu_367_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & ~(((icmp_reg_513 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_513 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID))))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state56 = (((icmp_reg_513 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_513 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_183_p2 = ((j_reg_136 == 10'd1023) ? 1'b1 : 1'b0);

assign exitcond_fu_189_p2 = ((i_reg_148 == 10'd1023) ? 1'b1 : 1'b0);

assign grp_convolution2D_fu_160_ap_start = ap_reg_grp_convolution2D_fu_160_ap_start;

assign i_1_fu_423_p2 = (i_reg_148 + 10'd1);

assign icmp_fu_367_p2 = (($signed(tmp_11_fu_357_p4) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign isNeg_fu_250_p3 = sh_assign_fu_244_p2[32'd11];

assign j_1_fu_195_p2 = (j_reg_136 + 10'd1);

assign loc_V_1_fu_236_p1 = p_Val2_1_fu_215_p1[51:0];

assign loc_V_fu_226_p4 = {{p_Val2_1_fu_215_p1[62:52]}};

assign output4_sum5_fu_412_p2 = (sum_cast_fu_408_p1 + output_read_reg_429);

assign output4_sum_fu_389_p2 = (output_read_reg_429 + sum3_cast_fu_385_p1);

assign p_Val2_1_fu_215_p1 = x_assign_reg_483;

assign p_Val2_3_fu_334_p3 = ((isNeg_reg_498[0:0] === 1'b1) ? tmp_4_fu_320_p1 : tmp_7_fu_324_p4);

assign p_Val2_s_fu_350_p3 = ((p_Result_s_reg_488[0:0] === 1'b1) ? tmp_12_i_i_i_fu_344_p2 : tmp_9_i_i_i_fu_341_p1);

assign sh_assign_1_cast_fu_289_p1 = $signed(sh_assign_1_reg_503);

assign sh_assign_1_fu_268_p3 = ((isNeg_fu_250_p3[0:0] === 1'b1) ? tmp_4_i_i_i_cast_fu_264_p1 : sh_assign_fu_244_p2);

assign sh_assign_fu_244_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_240_p1));

assign sum3_cast_fu_385_p1 = sum3_fu_377_p3;

assign sum3_fu_377_p3 = {{i_reg_148}, {j_reg_136}};

assign sum_cast_fu_408_p1 = sum_fu_400_p3;

assign sum_fu_400_p3 = {{i_reg_148}, {j_reg_136}};

assign tmp_10_fu_312_p3 = tmp_6_i_i_i_fu_300_p2[32'd53];

assign tmp_11_fu_357_p4 = {{p_Val2_s_fu_350_p3[31:8]}};

assign tmp_12_fu_373_p1 = p_Val2_s_fu_350_p3[7:0];

assign tmp_12_i_i_i_fu_344_p2 = (32'd0 - tmp_9_i_i_i_fu_341_p1);

assign tmp_4_fu_320_p1 = tmp_10_fu_312_p3;

assign tmp_4_i_i_i_cast_fu_264_p1 = $signed(tmp_4_i_i_i_fu_258_p2);

assign tmp_4_i_i_i_fu_258_p2 = (11'd1023 - loc_V_fu_226_p4);

assign tmp_5_i_i_i_cast_fu_296_p1 = $unsigned(sh_assign_1_cast_fu_289_p1);

assign tmp_5_i_i_i_fu_292_p1 = $unsigned(sh_assign_1_cast_fu_289_p1);

assign tmp_6_fu_211_p2 = (tmp_5_reg_468 + tmp_2_reg_463);

assign tmp_6_i_i_i_fu_300_p2 = tmp_i_i_i_fu_276_p4 >> tmp_5_i_i_i_cast_fu_296_p1;

assign tmp_7_fu_324_p4 = {{tmp_7_i_i_i_fu_306_p2[83:53]}};

assign tmp_7_i_i_i_fu_306_p2 = tmp_i_i_i_cast_fu_285_p1 << tmp_5_i_i_i_fu_292_p1;

assign tmp_9_i_i_i_fu_341_p1 = p_Val2_3_reg_508;

assign tmp_i_i_i_cast_fu_285_p1 = tmp_i_i_i_fu_276_p4;

assign tmp_i_i_i_fu_276_p4 = {{{{1'd1}, {loc_V_1_reg_493}}}, {1'd0}};

assign tmp_i_i_i_i_cast1_fu_240_p1 = loc_V_fu_226_p4;

endmodule //sobel
