// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        posy,
        posx,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input1,
        operator_address0,
        operator_ce0,
        operator_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] posy;
input  [9:0] posx;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [7:0] m_axi_input_r_WDATA;
output  [0:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [7:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [31:0] input1;
output  [3:0] operator_address0;
output   operator_ce0;
input  [31:0] operator_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg m_axi_input_r_RREADY;
reg operator_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_r_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    input_r_blk_n_R;
wire    ap_CS_fsm_state12;
wire   [2:0] j_2_fu_135_p2;
reg   [2:0] j_2_reg_272;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_129_p2;
wire   [4:0] j_2_cast_fu_141_p1;
reg   [4:0] j_2_cast_reg_277;
wire   [21:0] sum_fu_175_p2;
reg   [21:0] sum_reg_285;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_145_p2;
wire   [2:0] i_2_fu_181_p2;
reg   [2:0] i_2_reg_290;
wire   [4:0] tmp_1_fu_205_p2;
reg   [4:0] tmp_1_reg_295;
reg   [31:0] input_addr_reg_300;
wire    ap_CS_fsm_state4;
reg   [7:0] input_addr_read_reg_306;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] tmp_4_reg_326;
wire    ap_CS_fsm_state15;
reg   [2:0] j_reg_98;
reg   [2:0] i_reg_110;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_11_cast_fu_224_p1;
wire   [31:0] sum1_fu_213_p2;
reg    ap_reg_ioackin_m_axi_input_r_ARREADY;
reg    ap_sig_ioackin_m_axi_input_r_ARREADY;
reg   [31:0] res_fu_52;
wire   [31:0] res_1_fu_237_p2;
wire  signed [9:0] tmp_2_cast_fu_151_p1;
wire   [9:0] tmp5_fu_155_p2;
wire   [19:0] tmp1_fu_160_p3;
wire  signed [21:0] j_cast7_fu_171_p1;
wire   [21:0] tmp1_cast_fu_167_p1;
wire   [4:0] tmp_fu_191_p3;
wire   [4:0] i_2_cast_cast_fu_187_p1;
wire   [4:0] tmp_s_fu_199_p2;
wire   [31:0] sum_cast_fu_210_p1;
wire   [7:0] grp_fu_231_p0;
reg   [15:0] ap_NS_fsm;
wire   [31:0] grp_fu_231_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_reg_ioackin_m_axi_input_r_ARREADY = 1'b0;
end

sobel_mul_8ns_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sobel_mul_8ns_32sbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_231_p0),
    .din1(operator_q0),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_input_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_input_r_ARREADY)) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_fu_129_p2))) begin
        i_reg_110 <= 3'd7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_110 <= i_2_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_145_p2 == 1'd1))) begin
        j_reg_98 <= j_2_reg_272;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_98 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        res_fu_52 <= res_1_fu_237_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        res_fu_52 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_145_p2))) begin
        i_2_reg_290 <= i_2_fu_181_p2;
        sum_reg_285 <= sum_fu_175_p2;
        tmp_1_reg_295 <= tmp_1_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (m_axi_input_r_RVALID == 1'b1))) begin
        input_addr_read_reg_306 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_addr_reg_300 <= sum1_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_fu_129_p2))) begin
        j_2_cast_reg_277[2 : 0] <= j_2_cast_fu_141_p1[2 : 0];
        j_2_reg_272 <= j_2_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_4_reg_326 <= grp_fu_231_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_129_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_129_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY))) begin
        m_axi_input_r_ARVALID = 1'b1;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (m_axi_input_r_RVALID == 1'b1))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (m_axi_input_r_RVALID == 1'b1))) begin
        operator_ce0 = 1'b1;
    end else begin
        operator_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_129_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_145_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_input_r_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (m_axi_input_r_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = res_fu_52;

assign exitcond1_fu_129_p2 = ((j_reg_98 == 3'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_145_p2 = ((i_reg_110 == 3'd2) ? 1'b1 : 1'b0);

assign grp_fu_231_p0 = grp_fu_231_p00;

assign grp_fu_231_p00 = input_addr_read_reg_306;

assign i_2_cast_cast_fu_187_p1 = i_2_fu_181_p2;

assign i_2_fu_181_p2 = (i_reg_110 + 3'd1);

assign j_2_cast_fu_141_p1 = j_2_fu_135_p2;

assign j_2_fu_135_p2 = (j_reg_98 + 3'd1);

assign j_cast7_fu_171_p1 = $signed(j_reg_98);

assign m_axi_input_r_ARADDR = input_addr_reg_300;

assign m_axi_input_r_ARBURST = 2'd0;

assign m_axi_input_r_ARCACHE = 4'd0;

assign m_axi_input_r_ARID = 1'd0;

assign m_axi_input_r_ARLEN = 32'd1;

assign m_axi_input_r_ARLOCK = 2'd0;

assign m_axi_input_r_ARPROT = 3'd0;

assign m_axi_input_r_ARQOS = 4'd0;

assign m_axi_input_r_ARREGION = 4'd0;

assign m_axi_input_r_ARSIZE = 3'd0;

assign m_axi_input_r_ARUSER = 1'd0;

assign m_axi_input_r_AWADDR = 32'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 8'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 1'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign operator_address0 = tmp_11_cast_fu_224_p1;

assign res_1_fu_237_p2 = (res_fu_52 + tmp_4_reg_326);

assign sum1_fu_213_p2 = (input1 + sum_cast_fu_210_p1);

assign sum_cast_fu_210_p1 = sum_reg_285;

assign sum_fu_175_p2 = ($signed(j_cast7_fu_171_p1) + $signed(tmp1_cast_fu_167_p1));

assign tmp1_cast_fu_167_p1 = tmp1_fu_160_p3;

assign tmp1_fu_160_p3 = {{tmp5_fu_155_p2}, {posx}};

assign tmp5_fu_155_p2 = ($signed(posy) + $signed(tmp_2_cast_fu_151_p1));

assign tmp_11_cast_fu_224_p1 = tmp_1_reg_295;

assign tmp_1_fu_205_p2 = (tmp_s_fu_199_p2 + j_2_cast_reg_277);

assign tmp_2_cast_fu_151_p1 = $signed(i_reg_110);

assign tmp_fu_191_p3 = {{i_2_fu_181_p2}, {2'd0}};

assign tmp_s_fu_199_p2 = (tmp_fu_191_p3 - i_2_cast_cast_fu_187_p1);

always @ (posedge ap_clk) begin
    j_2_cast_reg_277[4:3] <= 2'b00;
end

endmodule //convolution2D
