// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sobel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sobel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sobel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<73> sobel::ap_ST_fsm_state1 = "1";
const sc_lv<73> sobel::ap_ST_fsm_state2 = "10";
const sc_lv<73> sobel::ap_ST_fsm_state3 = "100";
const sc_lv<73> sobel::ap_ST_fsm_state4 = "1000";
const sc_lv<73> sobel::ap_ST_fsm_state5 = "10000";
const sc_lv<73> sobel::ap_ST_fsm_state6 = "100000";
const sc_lv<73> sobel::ap_ST_fsm_state7 = "1000000";
const sc_lv<73> sobel::ap_ST_fsm_state8 = "10000000";
const sc_lv<73> sobel::ap_ST_fsm_state9 = "100000000";
const sc_lv<73> sobel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<73> sobel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<73> sobel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<73> sobel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state70 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state71 = "10000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state72 = "100000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> sobel::ap_ST_fsm_state73 = "1000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> sobel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sobel::ap_const_lv32_3 = "11";
const sc_lv<32> sobel::ap_const_lv32_A = "1010";
const sc_lv<32> sobel::ap_const_lv32_4 = "100";
const sc_lv<32> sobel::ap_const_lv32_B = "1011";
const sc_lv<32> sobel::ap_const_lv32_5 = "101";
const sc_lv<32> sobel::ap_const_lv32_C = "1100";
const sc_lv<32> sobel::ap_const_lv32_6 = "110";
const sc_lv<32> sobel::ap_const_lv32_D = "1101";
const sc_lv<32> sobel::ap_const_lv32_7 = "111";
const sc_lv<32> sobel::ap_const_lv32_E = "1110";
const sc_lv<32> sobel::ap_const_lv32_8 = "1000";
const sc_lv<32> sobel::ap_const_lv32_F = "1111";
const sc_lv<32> sobel::ap_const_lv32_9 = "1001";
const sc_lv<32> sobel::ap_const_lv32_10 = "10000";
const sc_lv<32> sobel::ap_const_lv32_11 = "10001";
const sc_lv<32> sobel::ap_const_lv32_3C = "111100";
const sc_lv<32> sobel::ap_const_lv32_3D = "111101";
const sc_lv<32> sobel::ap_const_lv32_42 = "1000010";
const sc_lv<1> sobel::ap_const_lv1_0 = "0";
const sc_lv<32> sobel::ap_const_lv32_43 = "1000011";
const sc_lv<32> sobel::ap_const_lv32_44 = "1000100";
const sc_lv<1> sobel::ap_const_lv1_1 = "1";
const int sobel::C_S_AXI_DATA_WIDTH = "100000";
const int sobel::C_M_AXI_INPUT_BUNDLE_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_INPUT_BUNDLE_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_INPUT_BUNDLE_CACHE_VALUE = "11";
const int sobel::C_M_AXI_DATA_WIDTH = "100000";
const int sobel::C_M_AXI_OUTPUT_BUNDLE_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sobel::C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE = "11";
const sc_lv<32> sobel::ap_const_lv32_3B = "111011";
const sc_lv<32> sobel::ap_const_lv32_1 = "1";
const sc_lv<32> sobel::ap_const_lv32_2 = "10";
const sc_lv<32> sobel::ap_const_lv32_12 = "10010";
const sc_lv<32> sobel::ap_const_lv32_13 = "10011";
const sc_lv<32> sobel::ap_const_lv32_14 = "10100";
const sc_lv<32> sobel::ap_const_lv32_15 = "10101";
const sc_lv<32> sobel::ap_const_lv32_1A = "11010";
const sc_lv<32> sobel::ap_const_lv32_39 = "111001";
const sc_lv<32> sobel::ap_const_lv32_3A = "111010";
const sc_lv<10> sobel::ap_const_lv10_1 = "1";
const sc_lv<3> sobel::ap_const_lv3_0 = "000";
const sc_lv<2> sobel::ap_const_lv2_0 = "00";
const sc_lv<4> sobel::ap_const_lv4_0 = "0000";
const sc_lv<8> sobel::ap_const_lv8_FF = "11111111";
const sc_lv<32> sobel::ap_const_lv32_1B = "11011";
const sc_lv<10> sobel::ap_const_lv10_3FF = "1111111111";
const sc_lv<10> sobel::ap_const_lv10_0 = "0000000000";
const sc_lv<20> sobel::ap_const_lv20_1 = "1";
const sc_lv<20> sobel::ap_const_lv20_400 = "10000000000";
const sc_lv<20> sobel::ap_const_lv20_FFC00 = "11111111110000000000";
const sc_lv<21> sobel::ap_const_lv21_1FFBFF = "111111111101111111111";
const sc_lv<21> sobel::ap_const_lv21_3FF = "1111111111";
const sc_lv<21> sobel::ap_const_lv21_1FFC01 = "111111111110000000001";
const sc_lv<21> sobel::ap_const_lv21_401 = "10000000001";
const sc_lv<32> sobel::ap_const_lv32_34 = "110100";
const sc_lv<32> sobel::ap_const_lv32_3E = "111110";
const sc_lv<12> sobel::ap_const_lv12_C01 = "110000000001";
const sc_lv<11> sobel::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> sobel::ap_const_lv32_35 = "110101";
const sc_lv<32> sobel::ap_const_lv32_78 = "1111000";
const sc_lv<8> sobel::ap_const_lv8_0 = "00000000";
const sc_lv<64> sobel::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool sobel::ap_const_boolean_1 = true;

sobel::sobel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sobel_AXILiteS_s_axi_U = new sobel_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sobel_AXILiteS_s_axi_U");
    sobel_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sobel_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sobel_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sobel_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sobel_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sobel_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sobel_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sobel_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sobel_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sobel_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sobel_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sobel_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sobel_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sobel_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sobel_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sobel_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sobel_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sobel_AXILiteS_s_axi_U->ACLK(ap_clk);
    sobel_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sobel_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_AXILiteS_s_axi_U->ap_start(ap_start);
    sobel_AXILiteS_s_axi_U->interrupt(interrupt);
    sobel_AXILiteS_s_axi_U->ap_ready(ap_ready);
    sobel_AXILiteS_s_axi_U->ap_done(ap_done);
    sobel_AXILiteS_s_axi_U->ap_idle(ap_idle);
    sobel_AXILiteS_s_axi_U->input_r(input_r);
    sobel_AXILiteS_s_axi_U->output_r(output_r);
    sobel_INPUT_BUNDLE_m_axi_U = new sobel_INPUT_BUNDLE_m_axi<8,32,5,16,16,16,16,C_M_AXI_INPUT_BUNDLE_ID_WIDTH,C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH,C_M_AXI_INPUT_BUNDLE_DATA_WIDTH,C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH,C_M_AXI_INPUT_BUNDLE_USER_VALUE,C_M_AXI_INPUT_BUNDLE_PROT_VALUE,C_M_AXI_INPUT_BUNDLE_CACHE_VALUE>("sobel_INPUT_BUNDLE_m_axi_U");
    sobel_INPUT_BUNDLE_m_axi_U->AWVALID(m_axi_INPUT_BUNDLE_AWVALID);
    sobel_INPUT_BUNDLE_m_axi_U->AWREADY(m_axi_INPUT_BUNDLE_AWREADY);
    sobel_INPUT_BUNDLE_m_axi_U->AWADDR(m_axi_INPUT_BUNDLE_AWADDR);
    sobel_INPUT_BUNDLE_m_axi_U->AWID(m_axi_INPUT_BUNDLE_AWID);
    sobel_INPUT_BUNDLE_m_axi_U->AWLEN(m_axi_INPUT_BUNDLE_AWLEN);
    sobel_INPUT_BUNDLE_m_axi_U->AWSIZE(m_axi_INPUT_BUNDLE_AWSIZE);
    sobel_INPUT_BUNDLE_m_axi_U->AWBURST(m_axi_INPUT_BUNDLE_AWBURST);
    sobel_INPUT_BUNDLE_m_axi_U->AWLOCK(m_axi_INPUT_BUNDLE_AWLOCK);
    sobel_INPUT_BUNDLE_m_axi_U->AWCACHE(m_axi_INPUT_BUNDLE_AWCACHE);
    sobel_INPUT_BUNDLE_m_axi_U->AWPROT(m_axi_INPUT_BUNDLE_AWPROT);
    sobel_INPUT_BUNDLE_m_axi_U->AWQOS(m_axi_INPUT_BUNDLE_AWQOS);
    sobel_INPUT_BUNDLE_m_axi_U->AWREGION(m_axi_INPUT_BUNDLE_AWREGION);
    sobel_INPUT_BUNDLE_m_axi_U->AWUSER(m_axi_INPUT_BUNDLE_AWUSER);
    sobel_INPUT_BUNDLE_m_axi_U->WVALID(m_axi_INPUT_BUNDLE_WVALID);
    sobel_INPUT_BUNDLE_m_axi_U->WREADY(m_axi_INPUT_BUNDLE_WREADY);
    sobel_INPUT_BUNDLE_m_axi_U->WDATA(m_axi_INPUT_BUNDLE_WDATA);
    sobel_INPUT_BUNDLE_m_axi_U->WSTRB(m_axi_INPUT_BUNDLE_WSTRB);
    sobel_INPUT_BUNDLE_m_axi_U->WLAST(m_axi_INPUT_BUNDLE_WLAST);
    sobel_INPUT_BUNDLE_m_axi_U->WID(m_axi_INPUT_BUNDLE_WID);
    sobel_INPUT_BUNDLE_m_axi_U->WUSER(m_axi_INPUT_BUNDLE_WUSER);
    sobel_INPUT_BUNDLE_m_axi_U->ARVALID(m_axi_INPUT_BUNDLE_ARVALID);
    sobel_INPUT_BUNDLE_m_axi_U->ARREADY(m_axi_INPUT_BUNDLE_ARREADY);
    sobel_INPUT_BUNDLE_m_axi_U->ARADDR(m_axi_INPUT_BUNDLE_ARADDR);
    sobel_INPUT_BUNDLE_m_axi_U->ARID(m_axi_INPUT_BUNDLE_ARID);
    sobel_INPUT_BUNDLE_m_axi_U->ARLEN(m_axi_INPUT_BUNDLE_ARLEN);
    sobel_INPUT_BUNDLE_m_axi_U->ARSIZE(m_axi_INPUT_BUNDLE_ARSIZE);
    sobel_INPUT_BUNDLE_m_axi_U->ARBURST(m_axi_INPUT_BUNDLE_ARBURST);
    sobel_INPUT_BUNDLE_m_axi_U->ARLOCK(m_axi_INPUT_BUNDLE_ARLOCK);
    sobel_INPUT_BUNDLE_m_axi_U->ARCACHE(m_axi_INPUT_BUNDLE_ARCACHE);
    sobel_INPUT_BUNDLE_m_axi_U->ARPROT(m_axi_INPUT_BUNDLE_ARPROT);
    sobel_INPUT_BUNDLE_m_axi_U->ARQOS(m_axi_INPUT_BUNDLE_ARQOS);
    sobel_INPUT_BUNDLE_m_axi_U->ARREGION(m_axi_INPUT_BUNDLE_ARREGION);
    sobel_INPUT_BUNDLE_m_axi_U->ARUSER(m_axi_INPUT_BUNDLE_ARUSER);
    sobel_INPUT_BUNDLE_m_axi_U->RVALID(m_axi_INPUT_BUNDLE_RVALID);
    sobel_INPUT_BUNDLE_m_axi_U->RREADY(m_axi_INPUT_BUNDLE_RREADY);
    sobel_INPUT_BUNDLE_m_axi_U->RDATA(m_axi_INPUT_BUNDLE_RDATA);
    sobel_INPUT_BUNDLE_m_axi_U->RLAST(m_axi_INPUT_BUNDLE_RLAST);
    sobel_INPUT_BUNDLE_m_axi_U->RID(m_axi_INPUT_BUNDLE_RID);
    sobel_INPUT_BUNDLE_m_axi_U->RUSER(m_axi_INPUT_BUNDLE_RUSER);
    sobel_INPUT_BUNDLE_m_axi_U->RRESP(m_axi_INPUT_BUNDLE_RRESP);
    sobel_INPUT_BUNDLE_m_axi_U->BVALID(m_axi_INPUT_BUNDLE_BVALID);
    sobel_INPUT_BUNDLE_m_axi_U->BREADY(m_axi_INPUT_BUNDLE_BREADY);
    sobel_INPUT_BUNDLE_m_axi_U->BRESP(m_axi_INPUT_BUNDLE_BRESP);
    sobel_INPUT_BUNDLE_m_axi_U->BID(m_axi_INPUT_BUNDLE_BID);
    sobel_INPUT_BUNDLE_m_axi_U->BUSER(m_axi_INPUT_BUNDLE_BUSER);
    sobel_INPUT_BUNDLE_m_axi_U->ACLK(ap_clk);
    sobel_INPUT_BUNDLE_m_axi_U->ARESET(ap_rst_n_inv);
    sobel_INPUT_BUNDLE_m_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARVALID(INPUT_BUNDLE_ARVALID);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARREADY(INPUT_BUNDLE_ARREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARADDR(INPUT_BUNDLE_ARADDR);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARID(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARLEN(ap_var_for_const2);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARSIZE(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARLOCK(ap_var_for_const4);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARCACHE(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARQOS(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARPROT(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARUSER(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARBURST(ap_var_for_const4);
    sobel_INPUT_BUNDLE_m_axi_U->I_ARREGION(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_RVALID(INPUT_BUNDLE_RVALID);
    sobel_INPUT_BUNDLE_m_axi_U->I_RREADY(INPUT_BUNDLE_RREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_RDATA(INPUT_BUNDLE_RDATA);
    sobel_INPUT_BUNDLE_m_axi_U->I_RID(INPUT_BUNDLE_RID);
    sobel_INPUT_BUNDLE_m_axi_U->I_RUSER(INPUT_BUNDLE_RUSER);
    sobel_INPUT_BUNDLE_m_axi_U->I_RRESP(INPUT_BUNDLE_RRESP);
    sobel_INPUT_BUNDLE_m_axi_U->I_RLAST(INPUT_BUNDLE_RLAST);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWVALID(ap_var_for_const6);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWREADY(INPUT_BUNDLE_AWREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWADDR(ap_var_for_const7);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWID(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWLEN(ap_var_for_const7);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWSIZE(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWLOCK(ap_var_for_const4);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWCACHE(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWQOS(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWPROT(ap_var_for_const3);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWUSER(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWBURST(ap_var_for_const4);
    sobel_INPUT_BUNDLE_m_axi_U->I_AWREGION(ap_var_for_const5);
    sobel_INPUT_BUNDLE_m_axi_U->I_WVALID(ap_var_for_const6);
    sobel_INPUT_BUNDLE_m_axi_U->I_WREADY(INPUT_BUNDLE_WREADY);
    sobel_INPUT_BUNDLE_m_axi_U->I_WDATA(ap_var_for_const8);
    sobel_INPUT_BUNDLE_m_axi_U->I_WID(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_WUSER(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_WLAST(ap_var_for_const6);
    sobel_INPUT_BUNDLE_m_axi_U->I_WSTRB(ap_var_for_const1);
    sobel_INPUT_BUNDLE_m_axi_U->I_BVALID(INPUT_BUNDLE_BVALID);
    sobel_INPUT_BUNDLE_m_axi_U->I_BREADY(ap_var_for_const6);
    sobel_INPUT_BUNDLE_m_axi_U->I_BRESP(INPUT_BUNDLE_BRESP);
    sobel_INPUT_BUNDLE_m_axi_U->I_BID(INPUT_BUNDLE_BID);
    sobel_INPUT_BUNDLE_m_axi_U->I_BUSER(INPUT_BUNDLE_BUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U = new sobel_OUTPUT_BUNDLE_m_axi<8,32,5,16,16,16,16,C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH,C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH,C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH,C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH,C_M_AXI_OUTPUT_BUNDLE_USER_VALUE,C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE,C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE>("sobel_OUTPUT_BUNDLE_m_axi_U");
    sobel_OUTPUT_BUNDLE_m_axi_U->AWVALID(m_axi_OUTPUT_BUNDLE_AWVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWREADY(m_axi_OUTPUT_BUNDLE_AWREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWADDR(m_axi_OUTPUT_BUNDLE_AWADDR);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWID(m_axi_OUTPUT_BUNDLE_AWID);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWLEN(m_axi_OUTPUT_BUNDLE_AWLEN);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWSIZE(m_axi_OUTPUT_BUNDLE_AWSIZE);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWBURST(m_axi_OUTPUT_BUNDLE_AWBURST);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWLOCK(m_axi_OUTPUT_BUNDLE_AWLOCK);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWCACHE(m_axi_OUTPUT_BUNDLE_AWCACHE);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWPROT(m_axi_OUTPUT_BUNDLE_AWPROT);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWQOS(m_axi_OUTPUT_BUNDLE_AWQOS);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWREGION(m_axi_OUTPUT_BUNDLE_AWREGION);
    sobel_OUTPUT_BUNDLE_m_axi_U->AWUSER(m_axi_OUTPUT_BUNDLE_AWUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->WVALID(m_axi_OUTPUT_BUNDLE_WVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->WREADY(m_axi_OUTPUT_BUNDLE_WREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->WDATA(m_axi_OUTPUT_BUNDLE_WDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->WSTRB(m_axi_OUTPUT_BUNDLE_WSTRB);
    sobel_OUTPUT_BUNDLE_m_axi_U->WLAST(m_axi_OUTPUT_BUNDLE_WLAST);
    sobel_OUTPUT_BUNDLE_m_axi_U->WID(m_axi_OUTPUT_BUNDLE_WID);
    sobel_OUTPUT_BUNDLE_m_axi_U->WUSER(m_axi_OUTPUT_BUNDLE_WUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARVALID(m_axi_OUTPUT_BUNDLE_ARVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARREADY(m_axi_OUTPUT_BUNDLE_ARREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARADDR(m_axi_OUTPUT_BUNDLE_ARADDR);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARID(m_axi_OUTPUT_BUNDLE_ARID);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARLEN(m_axi_OUTPUT_BUNDLE_ARLEN);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARSIZE(m_axi_OUTPUT_BUNDLE_ARSIZE);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARBURST(m_axi_OUTPUT_BUNDLE_ARBURST);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARLOCK(m_axi_OUTPUT_BUNDLE_ARLOCK);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARCACHE(m_axi_OUTPUT_BUNDLE_ARCACHE);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARPROT(m_axi_OUTPUT_BUNDLE_ARPROT);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARQOS(m_axi_OUTPUT_BUNDLE_ARQOS);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARREGION(m_axi_OUTPUT_BUNDLE_ARREGION);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARUSER(m_axi_OUTPUT_BUNDLE_ARUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->RVALID(m_axi_OUTPUT_BUNDLE_RVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->RREADY(m_axi_OUTPUT_BUNDLE_RREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->RDATA(m_axi_OUTPUT_BUNDLE_RDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->RLAST(m_axi_OUTPUT_BUNDLE_RLAST);
    sobel_OUTPUT_BUNDLE_m_axi_U->RID(m_axi_OUTPUT_BUNDLE_RID);
    sobel_OUTPUT_BUNDLE_m_axi_U->RUSER(m_axi_OUTPUT_BUNDLE_RUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->RRESP(m_axi_OUTPUT_BUNDLE_RRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->BVALID(m_axi_OUTPUT_BUNDLE_BVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->BREADY(m_axi_OUTPUT_BUNDLE_BREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->BRESP(m_axi_OUTPUT_BUNDLE_BRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->BID(m_axi_OUTPUT_BUNDLE_BID);
    sobel_OUTPUT_BUNDLE_m_axi_U->BUSER(m_axi_OUTPUT_BUNDLE_BUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->ACLK(ap_clk);
    sobel_OUTPUT_BUNDLE_m_axi_U->ARESET(ap_rst_n_inv);
    sobel_OUTPUT_BUNDLE_m_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARVALID(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARREADY(OUTPUT_BUNDLE_ARREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARADDR(ap_var_for_const7);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARID(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARLEN(ap_var_for_const7);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARSIZE(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARLOCK(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARCACHE(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARQOS(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARPROT(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARUSER(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARBURST(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_ARREGION(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RVALID(OUTPUT_BUNDLE_RVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RREADY(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RDATA(OUTPUT_BUNDLE_RDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RID(OUTPUT_BUNDLE_RID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RUSER(OUTPUT_BUNDLE_RUSER);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RRESP(OUTPUT_BUNDLE_RRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_RLAST(OUTPUT_BUNDLE_RLAST);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWVALID(OUTPUT_BUNDLE_AWVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWREADY(OUTPUT_BUNDLE_AWREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWADDR(reg_220);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWID(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWLEN(ap_var_for_const2);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWSIZE(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWLOCK(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWCACHE(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWQOS(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWPROT(ap_var_for_const3);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWUSER(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWBURST(ap_var_for_const4);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_AWREGION(ap_var_for_const5);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WVALID(OUTPUT_BUNDLE_WVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WREADY(OUTPUT_BUNDLE_WREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WDATA(OUTPUT_BUNDLE_WDATA);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WID(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WUSER(ap_var_for_const1);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WLAST(ap_var_for_const6);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_WSTRB(ap_var_for_const9);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BVALID(OUTPUT_BUNDLE_BVALID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BREADY(OUTPUT_BUNDLE_BREADY);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BRESP(OUTPUT_BUNDLE_BRESP);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BID(OUTPUT_BUNDLE_BID);
    sobel_OUTPUT_BUNDLE_m_axi_U->I_BUSER(OUTPUT_BUNDLE_BUSER);
    sobel_uitodp_32nsbkb_U0 = new sobel_uitodp_32nsbkb<1,6,32,64>("sobel_uitodp_32nsbkb_U0");
    sobel_uitodp_32nsbkb_U0->clk(ap_clk);
    sobel_uitodp_32nsbkb_U0->reset(ap_rst_n_inv);
    sobel_uitodp_32nsbkb_U0->din0(grp_fu_190_p0);
    sobel_uitodp_32nsbkb_U0->ce(ap_var_for_const0);
    sobel_uitodp_32nsbkb_U0->dout(grp_fu_190_p1);
    sobel_dsqrt_64ns_cud_U1 = new sobel_dsqrt_64ns_cud<1,31,64,64,64>("sobel_dsqrt_64ns_cud_U1");
    sobel_dsqrt_64ns_cud_U1->clk(ap_clk);
    sobel_dsqrt_64ns_cud_U1->reset(ap_rst_n_inv);
    sobel_dsqrt_64ns_cud_U1->din0(ap_var_for_const10);
    sobel_dsqrt_64ns_cud_U1->din1(tmp_25_reg_937);
    sobel_dsqrt_64ns_cud_U1->ce(ap_var_for_const0);
    sobel_dsqrt_64ns_cud_U1->dout(grp_fu_193_p2);
    sobel_mul_mul_11sdEe_U2 = new sobel_mul_mul_11sdEe<1,1,11,11,20>("sobel_mul_mul_11sdEe_U2");
    sobel_mul_mul_11sdEe_U2->din0(tmp_24_fu_788_p0);
    sobel_mul_mul_11sdEe_U2->din1(tmp_24_fu_788_p1);
    sobel_mul_mul_11sdEe_U2->dout(tmp_24_fu_788_p2);
    sobel_mac_muladd_eOg_U3 = new sobel_mac_muladd_eOg<1,1,11,11,20,20>("sobel_mac_muladd_eOg_U3");
    sobel_mac_muladd_eOg_U3->din0(grp_fu_794_p0);
    sobel_mac_muladd_eOg_U3->din1(grp_fu_794_p1);
    sobel_mac_muladd_eOg_U3->din2(tmp_24_reg_922);
    sobel_mac_muladd_eOg_U3->dout(grp_fu_794_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_INPUT_BUNDLE_ARADDR);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( INPUT_BUNDLE_RVALID );
    sensitive << ( INPUT_BUNDLE_addr_reg_844 );
    sensitive << ( INPUT_BUNDLE_addr_1_reg_850 );
    sensitive << ( INPUT_BUNDLE_addr_2_reg_856 );
    sensitive << ( INPUT_BUNDLE_addr_3_reg_862 );
    sensitive << ( INPUT_BUNDLE_addr_4_reg_868 );
    sensitive << ( INPUT_BUNDLE_addr_5_reg_874 );
    sensitive << ( INPUT_BUNDLE_addr_6_reg_880 );
    sensitive << ( INPUT_BUNDLE_addr_7_reg_886 );
    sensitive << ( ap_reg_ioackin_INPUT_BUNDLE_ARREADY );

    SC_METHOD(thread_INPUT_BUNDLE_ARVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( INPUT_BUNDLE_RVALID );
    sensitive << ( ap_reg_ioackin_INPUT_BUNDLE_ARREADY );

    SC_METHOD(thread_INPUT_BUNDLE_RREADY);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( INPUT_BUNDLE_RVALID );
    sensitive << ( ap_sig_ioackin_INPUT_BUNDLE_ARREADY );

    SC_METHOD(thread_INPUT_BUNDLE_blk_n_AR);
    sensitive << ( m_axi_INPUT_BUNDLE_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_INPUT_BUNDLE_blk_n_R);
    sensitive << ( m_axi_INPUT_BUNDLE_RVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_OUTPUT_BUNDLE_AWVALID);
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state68 );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY );

    SC_METHOD(thread_OUTPUT_BUNDLE_BREADY);
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( icmp_reg_963 );
    sensitive << ( OUTPUT_BUNDLE_BVALID );

    SC_METHOD(thread_OUTPUT_BUNDLE_WDATA);
    sensitive << ( ap_CS_fsm_state62 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( tmp_31_reg_967 );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_METHOD(thread_OUTPUT_BUNDLE_WVALID);
    sensitive << ( ap_CS_fsm_state62 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_METHOD(thread_OUTPUT_BUNDLE_blk_n_AW);
    sensitive << ( m_axi_OUTPUT_BUNDLE_AWREADY );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state68 );

    SC_METHOD(thread_OUTPUT_BUNDLE_blk_n_B);
    sensitive << ( m_axi_OUTPUT_BUNDLE_BVALID );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( icmp_reg_963 );

    SC_METHOD(thread_OUTPUT_BUNDLE_blk_n_W);
    sensitive << ( m_axi_OUTPUT_BUNDLE_WREADY );
    sensitive << ( ap_CS_fsm_state62 );
    sensitive << ( ap_CS_fsm_state69 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state61);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state62);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state68);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state69);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state67);
    sensitive << ( icmp_reg_963 );
    sensitive << ( OUTPUT_BUNDLE_BVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_225_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_225_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_INPUT_BUNDLE_ARREADY);
    sensitive << ( INPUT_BUNDLE_ARREADY );
    sensitive << ( ap_reg_ioackin_INPUT_BUNDLE_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY);
    sensitive << ( OUTPUT_BUNDLE_AWREADY );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_OUTPUT_BUNDLE_WREADY);
    sensitive << ( OUTPUT_BUNDLE_WREADY );
    sensitive << ( ap_reg_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_METHOD(thread_convulution_horizont_fu_571_p2);
    sensitive << ( tmp3_cast_fu_567_p1 );
    sensitive << ( tmp_10_fu_555_p2 );

    SC_METHOD(thread_convulution_vertical_fu_625_p2);
    sensitive << ( tmp_20_fu_619_p2 );
    sensitive << ( tmp_27_cast_fu_612_p1 );

    SC_METHOD(thread_grp_fu_190_p0);
    sensitive << ( p_reg_927 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_grp_fu_198_p2);
    sensitive << ( output_read_reg_801 );
    sensitive << ( tmp_9_fu_693_p1 );

    SC_METHOD(thread_grp_fu_794_p0);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( tmp_21_fu_634_p1 );

    SC_METHOD(thread_grp_fu_794_p1);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( tmp_21_fu_634_p1 );

    SC_METHOD(thread_i_1_fu_782_p2);
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_icmp_fu_772_p2);
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( tmp_30_fu_762_p4 );

    SC_METHOD(thread_input2_sum1_fu_437_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( tmp_13_fu_433_p1 );

    SC_METHOD(thread_input2_sum2_fu_469_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( tmp_17_fu_465_p1 );

    SC_METHOD(thread_input2_sum5_fu_322_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( sum4_cast_fu_318_p1 );

    SC_METHOD(thread_input2_sum6_fu_343_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( sum6_cast_fu_339_p1 );

    SC_METHOD(thread_input2_sum7_fu_364_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( sum8_cast_fu_360_p1 );

    SC_METHOD(thread_input2_sum8_fu_384_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( sum3_cast_fu_380_p1 );

    SC_METHOD(thread_input2_sum9_fu_405_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( sum5_cast_fu_401_p1 );

    SC_METHOD(thread_input2_sum_fu_293_p2);
    sensitive << ( input_read_reg_806 );
    sensitive << ( sum2_cast_fu_289_p1 );

    SC_METHOD(thread_isNeg_fu_668_p3);
    sensitive << ( sh_assign_fu_662_p2 );

    SC_METHOD(thread_j_1_fu_480_p2);
    sensitive << ( j_reg_166 );

    SC_METHOD(thread_loc_V_1_fu_655_p1);
    sensitive << ( p_Val2_s_fu_641_p1 );

    SC_METHOD(thread_p_Val2_s_fu_641_p1);
    sensitive << ( grp_fu_193_p2 );

    SC_METHOD(thread_sh_assign_1_cast_fu_710_p1);
    sensitive << ( sh_assign_1_reg_958 );

    SC_METHOD(thread_sh_assign_1_fu_685_p3);
    sensitive << ( isNeg_fu_668_p3 );
    sensitive << ( sh_assign_fu_662_p2 );
    sensitive << ( tmp_39_i_i_i_cast_fu_681_p1 );

    SC_METHOD(thread_sh_assign_fu_662_p2);
    sensitive << ( tmp_i_i_i_i_cast4_fu_659_p1 );

    SC_METHOD(thread_sum1_cast_fu_552_p1);
    sensitive << ( sum1_reg_897 );

    SC_METHOD(thread_sum1_fu_516_p2);
    sensitive << ( tmp2_cast_fu_512_p1 );
    sensitive << ( tmp_12_cast_fu_498_p1 );

    SC_METHOD(thread_sum2_cast_fu_289_p1);
    sensitive << ( sum2_fu_283_p2 );

    SC_METHOD(thread_sum2_fu_283_p2);
    sensitive << ( tmp_9_cast_fu_279_p1 );

    SC_METHOD(thread_sum3_cast_fu_380_p1);
    sensitive << ( sum3_fu_375_p2 );

    SC_METHOD(thread_sum3_fu_375_p2);
    sensitive << ( tmp_3_cast_reg_821 );
    sensitive << ( tmp_8_cast5_fu_267_p1 );

    SC_METHOD(thread_sum4_cast_fu_318_p1);
    sensitive << ( sum4_fu_310_p3 );

    SC_METHOD(thread_sum4_fu_310_p3);
    sensitive << ( j_reg_166 );
    sensitive << ( tmp1_fu_304_p2 );

    SC_METHOD(thread_sum5_cast_fu_401_p1);
    sensitive << ( sum5_fu_395_p2 );

    SC_METHOD(thread_sum5_fu_395_p2);
    sensitive << ( tmp_9_cast_fu_279_p1 );

    SC_METHOD(thread_sum5_neg_cast_fu_577_p1);
    sensitive << ( sum5_neg_reg_902 );

    SC_METHOD(thread_sum5_neg_fu_522_p2);
    sensitive << ( tmp_7_cast_fu_486_p1 );
    sensitive << ( tmp_13_cast_fu_502_p1 );

    SC_METHOD(thread_sum6_cast_fu_339_p1);
    sensitive << ( sum6_fu_333_p2 );

    SC_METHOD(thread_sum6_fu_333_p2);
    sensitive << ( tmp_9_cast_fu_279_p1 );

    SC_METHOD(thread_sum6_neg_fu_580_p2);
    sensitive << ( sum5_neg_cast_fu_577_p1 );
    sensitive << ( tmp_14_cast_fu_532_p1 );

    SC_METHOD(thread_sum8_cast_fu_360_p1);
    sensitive << ( sum8_fu_354_p2 );

    SC_METHOD(thread_sum8_fu_354_p2);
    sensitive << ( tmp_9_cast_fu_279_p1 );

    SC_METHOD(thread_tmp1_fu_304_p2);
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_tmp2_cast_fu_512_p1);
    sensitive << ( tmp2_fu_506_p2 );

    SC_METHOD(thread_tmp2_fu_506_p2);
    sensitive << ( tmp_7_cast_fu_486_p1 );
    sensitive << ( tmp_13_cast_fu_502_p1 );

    SC_METHOD(thread_tmp3_cast_fu_567_p1);
    sensitive << ( tmp3_fu_561_p2 );

    SC_METHOD(thread_tmp3_fu_561_p2);
    sensitive << ( tmp_16_cast_fu_544_p1 );
    sensitive << ( tmp_17_cast_fu_548_p1 );

    SC_METHOD(thread_tmp_10_fu_555_p2);
    sensitive << ( tmp_7_fu_528_p1 );
    sensitive << ( sum1_cast_fu_552_p1 );

    SC_METHOD(thread_tmp_11_fu_416_p4);
    sensitive << ( tmp_4_reg_826 );

    SC_METHOD(thread_tmp_12_cast_fu_498_p1);
    sensitive << ( tmp_1_fu_490_p3 );

    SC_METHOD(thread_tmp_12_fu_425_p3);
    sensitive << ( i_reg_178 );
    sensitive << ( tmp_11_fu_416_p4 );

    SC_METHOD(thread_tmp_13_cast_fu_502_p1);
    sensitive << ( reg_216 );

    SC_METHOD(thread_tmp_13_fu_433_p1);
    sensitive << ( tmp_12_fu_425_p3 );

    SC_METHOD(thread_tmp_14_cast_fu_532_p1);
    sensitive << ( reg_208 );

    SC_METHOD(thread_tmp_14_fu_592_p3);
    sensitive << ( reg_208 );

    SC_METHOD(thread_tmp_15_fu_448_p4);
    sensitive << ( tmp_5_reg_831 );

    SC_METHOD(thread_tmp_16_cast_fu_544_p1);
    sensitive << ( tmp_8_fu_536_p3 );

    SC_METHOD(thread_tmp_16_fu_457_p3);
    sensitive << ( i_reg_178 );
    sensitive << ( tmp_15_fu_448_p4 );

    SC_METHOD(thread_tmp_17_cast_fu_548_p1);
    sensitive << ( reg_216 );

    SC_METHOD(thread_tmp_17_fu_465_p1);
    sensitive << ( tmp_16_fu_457_p3 );

    SC_METHOD(thread_tmp_18_fu_604_p3);
    sensitive << ( reg_212 );

    SC_METHOD(thread_tmp_19_fu_586_p2);
    sensitive << ( tmp_17_cast_fu_548_p1 );
    sensitive << ( sum6_neg_fu_580_p2 );

    SC_METHOD(thread_tmp_1_fu_490_p3);
    sensitive << ( reg_212 );

    SC_METHOD(thread_tmp_20_fu_619_p2);
    sensitive << ( tmp_28_cast_fu_616_p1 );
    sensitive << ( tmp_23_cast_fu_600_p1 );

    SC_METHOD(thread_tmp_21_fu_634_p1);
    sensitive << ( convulution_horizont_reg_907 );

    SC_METHOD(thread_tmp_23_cast_fu_600_p1);
    sensitive << ( tmp_14_fu_592_p3 );

    SC_METHOD(thread_tmp_23_fu_631_p1);
    sensitive << ( convulution_vertical_reg_917 );

    SC_METHOD(thread_tmp_24_fu_788_p0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( tmp_23_fu_631_p1 );

    SC_METHOD(thread_tmp_24_fu_788_p1);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( tmp_23_fu_631_p1 );

    SC_METHOD(thread_tmp_27_cast_fu_612_p1);
    sensitive << ( tmp_18_fu_604_p3 );

    SC_METHOD(thread_tmp_27_fu_745_p4);
    sensitive << ( tmp_42_i_i_i_fu_727_p2 );

    SC_METHOD(thread_tmp_28_cast_fu_616_p1);
    sensitive << ( tmp_19_reg_912 );

    SC_METHOD(thread_tmp_28_fu_755_p3);
    sensitive << ( isNeg_reg_953 );
    sensitive << ( tmp_29_cast_fu_741_p1 );
    sensitive << ( tmp_27_fu_745_p4 );

    SC_METHOD(thread_tmp_29_cast_fu_741_p1);
    sensitive << ( tmp_29_fu_733_p3 );

    SC_METHOD(thread_tmp_29_fu_733_p3);
    sensitive << ( tmp_41_i_i_i_fu_721_p2 );

    SC_METHOD(thread_tmp_2_fu_231_p3);
    sensitive << ( j_reg_166 );

    SC_METHOD(thread_tmp_30_fu_762_p4);
    sensitive << ( tmp_28_fu_755_p3 );

    SC_METHOD(thread_tmp_31_fu_778_p1);
    sensitive << ( tmp_28_fu_755_p3 );

    SC_METHOD(thread_tmp_39_i_i_i_cast_fu_681_p1);
    sensitive << ( tmp_39_i_i_i_fu_676_p2 );

    SC_METHOD(thread_tmp_39_i_i_i_fu_676_p2);
    sensitive << ( loc_V_reg_942 );

    SC_METHOD(thread_tmp_3_cast_fu_245_p1);
    sensitive << ( tmp_3_fu_239_p2 );

    SC_METHOD(thread_tmp_3_fu_239_p2);
    sensitive << ( tmp_2_fu_231_p3 );

    SC_METHOD(thread_tmp_40_i_i_i_cast_fu_717_p1);
    sensitive << ( sh_assign_1_cast_fu_710_p1 );

    SC_METHOD(thread_tmp_40_i_i_i_fu_713_p1);
    sensitive << ( sh_assign_1_cast_fu_710_p1 );

    SC_METHOD(thread_tmp_41_i_i_i_fu_721_p2);
    sensitive << ( tmp_i_i_i_fu_697_p4 );
    sensitive << ( tmp_40_i_i_i_cast_fu_717_p1 );

    SC_METHOD(thread_tmp_42_i_i_i_fu_727_p2);
    sensitive << ( tmp_i_i_i_cast_fu_706_p1 );
    sensitive << ( tmp_40_i_i_i_fu_713_p1 );

    SC_METHOD(thread_tmp_4_fu_249_p2);
    sensitive << ( tmp_2_fu_231_p3 );

    SC_METHOD(thread_tmp_5_fu_255_p2);
    sensitive << ( tmp_2_fu_231_p3 );

    SC_METHOD(thread_tmp_6_fu_261_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_tmp_7_cast_fu_486_p1);
    sensitive << ( reg_208 );

    SC_METHOD(thread_tmp_7_fu_528_p1);
    sensitive << ( reg_208 );

    SC_METHOD(thread_tmp_8_cast5_fu_267_p1);
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_tmp_8_fu_536_p3);
    sensitive << ( reg_212 );

    SC_METHOD(thread_tmp_9_cast_fu_279_p1);
    sensitive << ( tmp_s_fu_271_p3 );

    SC_METHOD(thread_tmp_9_fu_693_p1);
    sensitive << ( tmp_s_reg_839 );

    SC_METHOD(thread_tmp_fu_225_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_reg_166 );

    SC_METHOD(thread_tmp_i_i_i_cast_fu_706_p1);
    sensitive << ( tmp_i_i_i_fu_697_p4 );

    SC_METHOD(thread_tmp_i_i_i_fu_697_p4);
    sensitive << ( loc_V_1_reg_948 );

    SC_METHOD(thread_tmp_i_i_i_i_cast4_fu_659_p1);
    sensitive << ( loc_V_reg_942 );

    SC_METHOD(thread_tmp_s_fu_271_p3);
    sensitive << ( j_reg_166 );
    sensitive << ( i_reg_178 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state62 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( icmp_reg_963 );
    sensitive << ( ap_CS_fsm_state68 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( INPUT_BUNDLE_RVALID );
    sensitive << ( OUTPUT_BUNDLE_BVALID );
    sensitive << ( ap_sig_ioackin_INPUT_BUNDLE_ARREADY );
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( icmp_fu_772_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_225_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_6_fu_261_p2 );
    sensitive << ( ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY );
    sensitive << ( ap_sig_ioackin_OUTPUT_BUNDLE_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const10);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000000000000000000001";
    ap_reg_ioackin_INPUT_BUNDLE_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sobel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWVALID, "(port)m_axi_INPUT_BUNDLE_AWVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWREADY, "(port)m_axi_INPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWADDR, "(port)m_axi_INPUT_BUNDLE_AWADDR");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWID, "(port)m_axi_INPUT_BUNDLE_AWID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWLEN, "(port)m_axi_INPUT_BUNDLE_AWLEN");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWSIZE, "(port)m_axi_INPUT_BUNDLE_AWSIZE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWBURST, "(port)m_axi_INPUT_BUNDLE_AWBURST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWLOCK, "(port)m_axi_INPUT_BUNDLE_AWLOCK");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWCACHE, "(port)m_axi_INPUT_BUNDLE_AWCACHE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWPROT, "(port)m_axi_INPUT_BUNDLE_AWPROT");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWQOS, "(port)m_axi_INPUT_BUNDLE_AWQOS");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWREGION, "(port)m_axi_INPUT_BUNDLE_AWREGION");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_AWUSER, "(port)m_axi_INPUT_BUNDLE_AWUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WVALID, "(port)m_axi_INPUT_BUNDLE_WVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WREADY, "(port)m_axi_INPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WDATA, "(port)m_axi_INPUT_BUNDLE_WDATA");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WSTRB, "(port)m_axi_INPUT_BUNDLE_WSTRB");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WLAST, "(port)m_axi_INPUT_BUNDLE_WLAST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WID, "(port)m_axi_INPUT_BUNDLE_WID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_WUSER, "(port)m_axi_INPUT_BUNDLE_WUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARVALID, "(port)m_axi_INPUT_BUNDLE_ARVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARREADY, "(port)m_axi_INPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARADDR, "(port)m_axi_INPUT_BUNDLE_ARADDR");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARID, "(port)m_axi_INPUT_BUNDLE_ARID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARLEN, "(port)m_axi_INPUT_BUNDLE_ARLEN");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARSIZE, "(port)m_axi_INPUT_BUNDLE_ARSIZE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARBURST, "(port)m_axi_INPUT_BUNDLE_ARBURST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARLOCK, "(port)m_axi_INPUT_BUNDLE_ARLOCK");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARCACHE, "(port)m_axi_INPUT_BUNDLE_ARCACHE");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARPROT, "(port)m_axi_INPUT_BUNDLE_ARPROT");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARQOS, "(port)m_axi_INPUT_BUNDLE_ARQOS");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARREGION, "(port)m_axi_INPUT_BUNDLE_ARREGION");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_ARUSER, "(port)m_axi_INPUT_BUNDLE_ARUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RVALID, "(port)m_axi_INPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RREADY, "(port)m_axi_INPUT_BUNDLE_RREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RDATA, "(port)m_axi_INPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RLAST, "(port)m_axi_INPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RID, "(port)m_axi_INPUT_BUNDLE_RID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RUSER, "(port)m_axi_INPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_RRESP, "(port)m_axi_INPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BVALID, "(port)m_axi_INPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BREADY, "(port)m_axi_INPUT_BUNDLE_BREADY");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BRESP, "(port)m_axi_INPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BID, "(port)m_axi_INPUT_BUNDLE_BID");
    sc_trace(mVcdFile, m_axi_INPUT_BUNDLE_BUSER, "(port)m_axi_INPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWVALID, "(port)m_axi_OUTPUT_BUNDLE_AWVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWREADY, "(port)m_axi_OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWADDR, "(port)m_axi_OUTPUT_BUNDLE_AWADDR");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWID, "(port)m_axi_OUTPUT_BUNDLE_AWID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWLEN, "(port)m_axi_OUTPUT_BUNDLE_AWLEN");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWSIZE, "(port)m_axi_OUTPUT_BUNDLE_AWSIZE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWBURST, "(port)m_axi_OUTPUT_BUNDLE_AWBURST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWLOCK, "(port)m_axi_OUTPUT_BUNDLE_AWLOCK");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWCACHE, "(port)m_axi_OUTPUT_BUNDLE_AWCACHE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWPROT, "(port)m_axi_OUTPUT_BUNDLE_AWPROT");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWQOS, "(port)m_axi_OUTPUT_BUNDLE_AWQOS");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWREGION, "(port)m_axi_OUTPUT_BUNDLE_AWREGION");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_AWUSER, "(port)m_axi_OUTPUT_BUNDLE_AWUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WVALID, "(port)m_axi_OUTPUT_BUNDLE_WVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WREADY, "(port)m_axi_OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WDATA, "(port)m_axi_OUTPUT_BUNDLE_WDATA");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WSTRB, "(port)m_axi_OUTPUT_BUNDLE_WSTRB");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WLAST, "(port)m_axi_OUTPUT_BUNDLE_WLAST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WID, "(port)m_axi_OUTPUT_BUNDLE_WID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_WUSER, "(port)m_axi_OUTPUT_BUNDLE_WUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARVALID, "(port)m_axi_OUTPUT_BUNDLE_ARVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARREADY, "(port)m_axi_OUTPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARADDR, "(port)m_axi_OUTPUT_BUNDLE_ARADDR");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARID, "(port)m_axi_OUTPUT_BUNDLE_ARID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARLEN, "(port)m_axi_OUTPUT_BUNDLE_ARLEN");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARSIZE, "(port)m_axi_OUTPUT_BUNDLE_ARSIZE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARBURST, "(port)m_axi_OUTPUT_BUNDLE_ARBURST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARLOCK, "(port)m_axi_OUTPUT_BUNDLE_ARLOCK");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARCACHE, "(port)m_axi_OUTPUT_BUNDLE_ARCACHE");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARPROT, "(port)m_axi_OUTPUT_BUNDLE_ARPROT");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARQOS, "(port)m_axi_OUTPUT_BUNDLE_ARQOS");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARREGION, "(port)m_axi_OUTPUT_BUNDLE_ARREGION");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_ARUSER, "(port)m_axi_OUTPUT_BUNDLE_ARUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RVALID, "(port)m_axi_OUTPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RREADY, "(port)m_axi_OUTPUT_BUNDLE_RREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RDATA, "(port)m_axi_OUTPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RLAST, "(port)m_axi_OUTPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RID, "(port)m_axi_OUTPUT_BUNDLE_RID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RUSER, "(port)m_axi_OUTPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_RRESP, "(port)m_axi_OUTPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BVALID, "(port)m_axi_OUTPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BREADY, "(port)m_axi_OUTPUT_BUNDLE_BREADY");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BRESP, "(port)m_axi_OUTPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BID, "(port)m_axi_OUTPUT_BUNDLE_BID");
    sc_trace(mVcdFile, m_axi_OUTPUT_BUNDLE_BUSER, "(port)m_axi_OUTPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_r, "input_r");
    sc_trace(mVcdFile, output_r, "output_r");
    sc_trace(mVcdFile, INPUT_BUNDLE_blk_n_AR, "INPUT_BUNDLE_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, INPUT_BUNDLE_blk_n_R, "INPUT_BUNDLE_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_blk_n_AW, "OUTPUT_BUNDLE_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state61, "ap_CS_fsm_state61");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_blk_n_W, "OUTPUT_BUNDLE_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state62, "ap_CS_fsm_state62");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_blk_n_B, "OUTPUT_BUNDLE_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state67, "ap_CS_fsm_state67");
    sc_trace(mVcdFile, icmp_reg_963, "icmp_reg_963");
    sc_trace(mVcdFile, ap_CS_fsm_state68, "ap_CS_fsm_state68");
    sc_trace(mVcdFile, ap_CS_fsm_state69, "ap_CS_fsm_state69");
    sc_trace(mVcdFile, INPUT_BUNDLE_AWREADY, "INPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_WREADY, "INPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_ARVALID, "INPUT_BUNDLE_ARVALID");
    sc_trace(mVcdFile, INPUT_BUNDLE_ARREADY, "INPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_ARADDR, "INPUT_BUNDLE_ARADDR");
    sc_trace(mVcdFile, INPUT_BUNDLE_RVALID, "INPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, INPUT_BUNDLE_RREADY, "INPUT_BUNDLE_RREADY");
    sc_trace(mVcdFile, INPUT_BUNDLE_RDATA, "INPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, INPUT_BUNDLE_RLAST, "INPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, INPUT_BUNDLE_RID, "INPUT_BUNDLE_RID");
    sc_trace(mVcdFile, INPUT_BUNDLE_RUSER, "INPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, INPUT_BUNDLE_RRESP, "INPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, INPUT_BUNDLE_BVALID, "INPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, INPUT_BUNDLE_BRESP, "INPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, INPUT_BUNDLE_BID, "INPUT_BUNDLE_BID");
    sc_trace(mVcdFile, INPUT_BUNDLE_BUSER, "INPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_AWVALID, "OUTPUT_BUNDLE_AWVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_AWREADY, "OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_WVALID, "OUTPUT_BUNDLE_WVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_WREADY, "OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_WDATA, "OUTPUT_BUNDLE_WDATA");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_ARREADY, "OUTPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RVALID, "OUTPUT_BUNDLE_RVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RDATA, "OUTPUT_BUNDLE_RDATA");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RLAST, "OUTPUT_BUNDLE_RLAST");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RID, "OUTPUT_BUNDLE_RID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RUSER, "OUTPUT_BUNDLE_RUSER");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_RRESP, "OUTPUT_BUNDLE_RRESP");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BVALID, "OUTPUT_BUNDLE_BVALID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BREADY, "OUTPUT_BUNDLE_BREADY");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BRESP, "OUTPUT_BUNDLE_BRESP");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BID, "OUTPUT_BUNDLE_BID");
    sc_trace(mVcdFile, OUTPUT_BUNDLE_BUSER, "OUTPUT_BUNDLE_BUSER");
    sc_trace(mVcdFile, reg_208, "reg_208");
    sc_trace(mVcdFile, ap_sig_ioackin_INPUT_BUNDLE_ARREADY, "ap_sig_ioackin_INPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, reg_212, "reg_212");
    sc_trace(mVcdFile, reg_216, "reg_216");
    sc_trace(mVcdFile, reg_220, "reg_220");
    sc_trace(mVcdFile, ap_CS_fsm_state60, "ap_CS_fsm_state60");
    sc_trace(mVcdFile, icmp_fu_772_p2, "icmp_fu_772_p2");
    sc_trace(mVcdFile, output_read_reg_801, "output_read_reg_801");
    sc_trace(mVcdFile, input_read_reg_806, "input_read_reg_806");
    sc_trace(mVcdFile, tmp_3_cast_fu_245_p1, "tmp_3_cast_fu_245_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_821, "tmp_3_cast_reg_821");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_225_p2, "tmp_fu_225_p2");
    sc_trace(mVcdFile, tmp_4_fu_249_p2, "tmp_4_fu_249_p2");
    sc_trace(mVcdFile, tmp_4_reg_826, "tmp_4_reg_826");
    sc_trace(mVcdFile, tmp_5_fu_255_p2, "tmp_5_fu_255_p2");
    sc_trace(mVcdFile, tmp_5_reg_831, "tmp_5_reg_831");
    sc_trace(mVcdFile, tmp_s_fu_271_p3, "tmp_s_fu_271_p3");
    sc_trace(mVcdFile, tmp_s_reg_839, "tmp_s_reg_839");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_6_fu_261_p2, "tmp_6_fu_261_p2");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_reg_844, "INPUT_BUNDLE_addr_reg_844");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_1_reg_850, "INPUT_BUNDLE_addr_1_reg_850");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_2_reg_856, "INPUT_BUNDLE_addr_2_reg_856");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_3_reg_862, "INPUT_BUNDLE_addr_3_reg_862");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_4_reg_868, "INPUT_BUNDLE_addr_4_reg_868");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_5_reg_874, "INPUT_BUNDLE_addr_5_reg_874");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_6_reg_880, "INPUT_BUNDLE_addr_6_reg_880");
    sc_trace(mVcdFile, INPUT_BUNDLE_addr_7_reg_886, "INPUT_BUNDLE_addr_7_reg_886");
    sc_trace(mVcdFile, j_1_fu_480_p2, "j_1_fu_480_p2");
    sc_trace(mVcdFile, sum1_fu_516_p2, "sum1_fu_516_p2");
    sc_trace(mVcdFile, sum1_reg_897, "sum1_reg_897");
    sc_trace(mVcdFile, sum5_neg_fu_522_p2, "sum5_neg_fu_522_p2");
    sc_trace(mVcdFile, sum5_neg_reg_902, "sum5_neg_reg_902");
    sc_trace(mVcdFile, convulution_horizont_fu_571_p2, "convulution_horizont_fu_571_p2");
    sc_trace(mVcdFile, convulution_horizont_reg_907, "convulution_horizont_reg_907");
    sc_trace(mVcdFile, tmp_19_fu_586_p2, "tmp_19_fu_586_p2");
    sc_trace(mVcdFile, tmp_19_reg_912, "tmp_19_reg_912");
    sc_trace(mVcdFile, convulution_vertical_fu_625_p2, "convulution_vertical_fu_625_p2");
    sc_trace(mVcdFile, convulution_vertical_reg_917, "convulution_vertical_reg_917");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, tmp_24_fu_788_p2, "tmp_24_fu_788_p2");
    sc_trace(mVcdFile, tmp_24_reg_922, "tmp_24_reg_922");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_794_p3, "grp_fu_794_p3");
    sc_trace(mVcdFile, p_reg_927, "p_reg_927");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_190_p1, "grp_fu_190_p1");
    sc_trace(mVcdFile, tmp_25_reg_937, "tmp_25_reg_937");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, loc_V_reg_942, "loc_V_reg_942");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, loc_V_1_fu_655_p1, "loc_V_1_fu_655_p1");
    sc_trace(mVcdFile, loc_V_1_reg_948, "loc_V_1_reg_948");
    sc_trace(mVcdFile, isNeg_fu_668_p3, "isNeg_fu_668_p3");
    sc_trace(mVcdFile, isNeg_reg_953, "isNeg_reg_953");
    sc_trace(mVcdFile, ap_CS_fsm_state59, "ap_CS_fsm_state59");
    sc_trace(mVcdFile, sh_assign_1_fu_685_p3, "sh_assign_1_fu_685_p3");
    sc_trace(mVcdFile, sh_assign_1_reg_958, "sh_assign_1_reg_958");
    sc_trace(mVcdFile, tmp_31_fu_778_p1, "tmp_31_fu_778_p1");
    sc_trace(mVcdFile, tmp_31_reg_967, "tmp_31_reg_967");
    sc_trace(mVcdFile, i_1_fu_782_p2, "i_1_fu_782_p2");
    sc_trace(mVcdFile, ap_block_state67, "ap_block_state67");
    sc_trace(mVcdFile, j_reg_166, "j_reg_166");
    sc_trace(mVcdFile, i_reg_178, "i_reg_178");
    sc_trace(mVcdFile, grp_fu_198_p2, "grp_fu_198_p2");
    sc_trace(mVcdFile, input2_sum_fu_293_p2, "input2_sum_fu_293_p2");
    sc_trace(mVcdFile, input2_sum5_fu_322_p2, "input2_sum5_fu_322_p2");
    sc_trace(mVcdFile, input2_sum6_fu_343_p2, "input2_sum6_fu_343_p2");
    sc_trace(mVcdFile, input2_sum7_fu_364_p2, "input2_sum7_fu_364_p2");
    sc_trace(mVcdFile, input2_sum8_fu_384_p2, "input2_sum8_fu_384_p2");
    sc_trace(mVcdFile, input2_sum9_fu_405_p2, "input2_sum9_fu_405_p2");
    sc_trace(mVcdFile, input2_sum1_fu_437_p2, "input2_sum1_fu_437_p2");
    sc_trace(mVcdFile, input2_sum2_fu_469_p2, "input2_sum2_fu_469_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_INPUT_BUNDLE_ARREADY, "ap_reg_ioackin_INPUT_BUNDLE_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY, "ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY, "ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY, "ap_reg_ioackin_OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_OUTPUT_BUNDLE_WREADY, "ap_sig_ioackin_OUTPUT_BUNDLE_WREADY");
    sc_trace(mVcdFile, grp_fu_190_p0, "grp_fu_190_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, tmp_9_fu_693_p1, "tmp_9_fu_693_p1");
    sc_trace(mVcdFile, tmp_2_fu_231_p3, "tmp_2_fu_231_p3");
    sc_trace(mVcdFile, tmp_3_fu_239_p2, "tmp_3_fu_239_p2");
    sc_trace(mVcdFile, tmp_9_cast_fu_279_p1, "tmp_9_cast_fu_279_p1");
    sc_trace(mVcdFile, sum2_fu_283_p2, "sum2_fu_283_p2");
    sc_trace(mVcdFile, sum2_cast_fu_289_p1, "sum2_cast_fu_289_p1");
    sc_trace(mVcdFile, tmp1_fu_304_p2, "tmp1_fu_304_p2");
    sc_trace(mVcdFile, sum4_fu_310_p3, "sum4_fu_310_p3");
    sc_trace(mVcdFile, sum4_cast_fu_318_p1, "sum4_cast_fu_318_p1");
    sc_trace(mVcdFile, sum6_fu_333_p2, "sum6_fu_333_p2");
    sc_trace(mVcdFile, sum6_cast_fu_339_p1, "sum6_cast_fu_339_p1");
    sc_trace(mVcdFile, sum8_fu_354_p2, "sum8_fu_354_p2");
    sc_trace(mVcdFile, sum8_cast_fu_360_p1, "sum8_cast_fu_360_p1");
    sc_trace(mVcdFile, tmp_8_cast5_fu_267_p1, "tmp_8_cast5_fu_267_p1");
    sc_trace(mVcdFile, sum3_fu_375_p2, "sum3_fu_375_p2");
    sc_trace(mVcdFile, sum3_cast_fu_380_p1, "sum3_cast_fu_380_p1");
    sc_trace(mVcdFile, sum5_fu_395_p2, "sum5_fu_395_p2");
    sc_trace(mVcdFile, sum5_cast_fu_401_p1, "sum5_cast_fu_401_p1");
    sc_trace(mVcdFile, tmp_11_fu_416_p4, "tmp_11_fu_416_p4");
    sc_trace(mVcdFile, tmp_12_fu_425_p3, "tmp_12_fu_425_p3");
    sc_trace(mVcdFile, tmp_13_fu_433_p1, "tmp_13_fu_433_p1");
    sc_trace(mVcdFile, tmp_15_fu_448_p4, "tmp_15_fu_448_p4");
    sc_trace(mVcdFile, tmp_16_fu_457_p3, "tmp_16_fu_457_p3");
    sc_trace(mVcdFile, tmp_17_fu_465_p1, "tmp_17_fu_465_p1");
    sc_trace(mVcdFile, tmp_1_fu_490_p3, "tmp_1_fu_490_p3");
    sc_trace(mVcdFile, tmp_7_cast_fu_486_p1, "tmp_7_cast_fu_486_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_502_p1, "tmp_13_cast_fu_502_p1");
    sc_trace(mVcdFile, tmp2_fu_506_p2, "tmp2_fu_506_p2");
    sc_trace(mVcdFile, tmp2_cast_fu_512_p1, "tmp2_cast_fu_512_p1");
    sc_trace(mVcdFile, tmp_12_cast_fu_498_p1, "tmp_12_cast_fu_498_p1");
    sc_trace(mVcdFile, tmp_8_fu_536_p3, "tmp_8_fu_536_p3");
    sc_trace(mVcdFile, tmp_7_fu_528_p1, "tmp_7_fu_528_p1");
    sc_trace(mVcdFile, sum1_cast_fu_552_p1, "sum1_cast_fu_552_p1");
    sc_trace(mVcdFile, tmp_16_cast_fu_544_p1, "tmp_16_cast_fu_544_p1");
    sc_trace(mVcdFile, tmp_17_cast_fu_548_p1, "tmp_17_cast_fu_548_p1");
    sc_trace(mVcdFile, tmp3_fu_561_p2, "tmp3_fu_561_p2");
    sc_trace(mVcdFile, tmp3_cast_fu_567_p1, "tmp3_cast_fu_567_p1");
    sc_trace(mVcdFile, tmp_10_fu_555_p2, "tmp_10_fu_555_p2");
    sc_trace(mVcdFile, sum5_neg_cast_fu_577_p1, "sum5_neg_cast_fu_577_p1");
    sc_trace(mVcdFile, tmp_14_cast_fu_532_p1, "tmp_14_cast_fu_532_p1");
    sc_trace(mVcdFile, sum6_neg_fu_580_p2, "sum6_neg_fu_580_p2");
    sc_trace(mVcdFile, tmp_14_fu_592_p3, "tmp_14_fu_592_p3");
    sc_trace(mVcdFile, tmp_18_fu_604_p3, "tmp_18_fu_604_p3");
    sc_trace(mVcdFile, tmp_28_cast_fu_616_p1, "tmp_28_cast_fu_616_p1");
    sc_trace(mVcdFile, tmp_23_cast_fu_600_p1, "tmp_23_cast_fu_600_p1");
    sc_trace(mVcdFile, tmp_20_fu_619_p2, "tmp_20_fu_619_p2");
    sc_trace(mVcdFile, tmp_27_cast_fu_612_p1, "tmp_27_cast_fu_612_p1");
    sc_trace(mVcdFile, grp_fu_193_p2, "grp_fu_193_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_641_p1, "p_Val2_s_fu_641_p1");
    sc_trace(mVcdFile, tmp_i_i_i_i_cast4_fu_659_p1, "tmp_i_i_i_i_cast4_fu_659_p1");
    sc_trace(mVcdFile, sh_assign_fu_662_p2, "sh_assign_fu_662_p2");
    sc_trace(mVcdFile, tmp_39_i_i_i_fu_676_p2, "tmp_39_i_i_i_fu_676_p2");
    sc_trace(mVcdFile, tmp_39_i_i_i_cast_fu_681_p1, "tmp_39_i_i_i_cast_fu_681_p1");
    sc_trace(mVcdFile, tmp_i_i_i_fu_697_p4, "tmp_i_i_i_fu_697_p4");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_710_p1, "sh_assign_1_cast_fu_710_p1");
    sc_trace(mVcdFile, tmp_40_i_i_i_cast_fu_717_p1, "tmp_40_i_i_i_cast_fu_717_p1");
    sc_trace(mVcdFile, tmp_i_i_i_cast_fu_706_p1, "tmp_i_i_i_cast_fu_706_p1");
    sc_trace(mVcdFile, tmp_40_i_i_i_fu_713_p1, "tmp_40_i_i_i_fu_713_p1");
    sc_trace(mVcdFile, tmp_41_i_i_i_fu_721_p2, "tmp_41_i_i_i_fu_721_p2");
    sc_trace(mVcdFile, tmp_29_fu_733_p3, "tmp_29_fu_733_p3");
    sc_trace(mVcdFile, tmp_42_i_i_i_fu_727_p2, "tmp_42_i_i_i_fu_727_p2");
    sc_trace(mVcdFile, tmp_29_cast_fu_741_p1, "tmp_29_cast_fu_741_p1");
    sc_trace(mVcdFile, tmp_27_fu_745_p4, "tmp_27_fu_745_p4");
    sc_trace(mVcdFile, tmp_28_fu_755_p3, "tmp_28_fu_755_p3");
    sc_trace(mVcdFile, tmp_30_fu_762_p4, "tmp_30_fu_762_p4");
    sc_trace(mVcdFile, tmp_24_fu_788_p0, "tmp_24_fu_788_p0");
    sc_trace(mVcdFile, tmp_23_fu_631_p1, "tmp_23_fu_631_p1");
    sc_trace(mVcdFile, tmp_24_fu_788_p1, "tmp_24_fu_788_p1");
    sc_trace(mVcdFile, grp_fu_794_p0, "grp_fu_794_p0");
    sc_trace(mVcdFile, tmp_21_fu_634_p1, "tmp_21_fu_634_p1");
    sc_trace(mVcdFile, grp_fu_794_p1, "grp_fu_794_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sobel.hdltvin.dat");
    mHdltvoutHandle.open("sobel.hdltvout.dat");
}

sobel::~sobel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sobel_AXILiteS_s_axi_U;
    delete sobel_INPUT_BUNDLE_m_axi_U;
    delete sobel_OUTPUT_BUNDLE_m_axi_U;
    delete sobel_uitodp_32nsbkb_U0;
    delete sobel_dsqrt_64ns_cud_U1;
    delete sobel_mul_mul_11sdEe_U2;
    delete sobel_mac_muladd_eOg_U3;
}

void sobel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sobel::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void sobel::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void sobel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void sobel::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv1_1;
}

void sobel::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void sobel::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void sobel::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void sobel::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void sobel::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_0;
}

void sobel::thread_ap_var_for_const10() {
    ap_var_for_const10 = ap_const_lv64_0;
}

void sobel::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_BUNDLE_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                     esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, INPUT_BUNDLE_ARREADY.read())))) {
            ap_reg_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_AWREADY.read())))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_BUNDLE_WREADY.read())))) {
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_225_p2.read()))) {
        i_reg_178 = ap_const_lv10_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && 
                !((esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read()))))) {
        i_reg_178 = i_1_fu_782_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_261_p2.read()))) {
        j_reg_166 = j_1_fu_480_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_166 = ap_const_lv10_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_261_p2.read()))) {
        INPUT_BUNDLE_addr_1_reg_850 = input2_sum5_fu_322_p2.read();
        INPUT_BUNDLE_addr_2_reg_856 = input2_sum6_fu_343_p2.read();
        INPUT_BUNDLE_addr_3_reg_862 = input2_sum7_fu_364_p2.read();
        INPUT_BUNDLE_addr_4_reg_868 = input2_sum8_fu_384_p2.read();
        INPUT_BUNDLE_addr_5_reg_874 = input2_sum9_fu_405_p2.read();
        INPUT_BUNDLE_addr_6_reg_880 = input2_sum1_fu_437_p2.read();
        INPUT_BUNDLE_addr_7_reg_886 = input2_sum2_fu_469_p2.read();
        INPUT_BUNDLE_addr_reg_844 = input2_sum_fu_293_p2.read();
        tmp_s_reg_839 = tmp_s_fu_271_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
        convulution_horizont_reg_907 = convulution_horizont_fu_571_p2.read();
        tmp_19_reg_912 = tmp_19_fu_586_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        convulution_vertical_reg_917 = convulution_vertical_fu_625_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        icmp_reg_963 = icmp_fu_772_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        input_read_reg_806 = input_r.read();
        output_read_reg_801 = output_r.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read())) {
        isNeg_reg_953 = sh_assign_fu_662_p2.read().range(11, 11);
        sh_assign_1_reg_958 = sh_assign_1_fu_685_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        loc_V_1_reg_948 = loc_V_1_fu_655_p1.read();
        loc_V_reg_942 = p_Val2_s_fu_641_p1.read().range(62, 52);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        p_reg_927 = grp_fu_794_p3.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_BUNDLE_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
  esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
  esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)))) {
        reg_208 = INPUT_BUNDLE_RDATA.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
  esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
  esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
  esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)))) {
        reg_212 = INPUT_BUNDLE_RDATA.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
  esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
  esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)))) {
        reg_216 = INPUT_BUNDLE_RDATA.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_772_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_772_p2.read())))) {
        reg_220 = grp_fu_198_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
        sum1_reg_897 = sum1_fu_516_p2.read();
        sum5_neg_reg_902 = sum5_neg_fu_522_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tmp_24_reg_922 = tmp_24_fu_788_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tmp_25_reg_937 = grp_fu_190_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_772_p2.read()))) {
        tmp_31_reg_967 = tmp_31_fu_778_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_225_p2.read()))) {
        tmp_3_cast_reg_821 = tmp_3_cast_fu_245_p1.read();
        tmp_4_reg_826 = tmp_4_fu_249_p2.read();
        tmp_5_reg_831 = tmp_5_fu_255_p2.read();
    }
}

void sobel::thread_INPUT_BUNDLE_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
             esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_7_reg_886.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_6_reg_880.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_5_reg_874.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_4_reg_868.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_3_reg_862.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_2_reg_856.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_1_reg_850.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_reg_844.read();
        } else {
            INPUT_BUNDLE_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        INPUT_BUNDLE_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sobel::thread_INPUT_BUNDLE_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())))) {
        INPUT_BUNDLE_ARVALID = ap_const_logic_1;
    } else {
        INPUT_BUNDLE_ARVALID = ap_const_logic_0;
    }
}

void sobel::thread_INPUT_BUNDLE_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_BUNDLE_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1)))) {
        INPUT_BUNDLE_RREADY = ap_const_logic_1;
    } else {
        INPUT_BUNDLE_RREADY = ap_const_logic_0;
    }
}

void sobel::thread_INPUT_BUNDLE_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        INPUT_BUNDLE_blk_n_AR = m_axi_INPUT_BUNDLE_ARREADY.read();
    } else {
        INPUT_BUNDLE_blk_n_AR = ap_const_logic_1;
    }
}

void sobel::thread_INPUT_BUNDLE_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        INPUT_BUNDLE_blk_n_R = m_axi_INPUT_BUNDLE_RVALID.read();
    } else {
        INPUT_BUNDLE_blk_n_R = ap_const_logic_1;
    }
}

void sobel::thread_OUTPUT_BUNDLE_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY.read())))) {
        OUTPUT_BUNDLE_AWVALID = ap_const_logic_1;
    } else {
        OUTPUT_BUNDLE_AWVALID = ap_const_logic_0;
    }
}

void sobel::thread_OUTPUT_BUNDLE_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && 
          esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_0) && 
          !((esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && 
          esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_1) && 
          !((esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())))))) {
        OUTPUT_BUNDLE_BREADY = ap_const_logic_1;
    } else {
        OUTPUT_BUNDLE_BREADY = ap_const_logic_0;
    }
}

void sobel::thread_OUTPUT_BUNDLE_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read())) {
            OUTPUT_BUNDLE_WDATA = tmp_31_reg_967.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read())) {
            OUTPUT_BUNDLE_WDATA = ap_const_lv8_FF;
        } else {
            OUTPUT_BUNDLE_WDATA =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        OUTPUT_BUNDLE_WDATA =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sobel::thread_OUTPUT_BUNDLE_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())))) {
        OUTPUT_BUNDLE_WVALID = ap_const_logic_1;
    } else {
        OUTPUT_BUNDLE_WVALID = ap_const_logic_0;
    }
}

void sobel::thread_OUTPUT_BUNDLE_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()))) {
        OUTPUT_BUNDLE_blk_n_AW = m_axi_OUTPUT_BUNDLE_AWREADY.read();
    } else {
        OUTPUT_BUNDLE_blk_n_AW = ap_const_logic_1;
    }
}

void sobel::thread_OUTPUT_BUNDLE_blk_n_B() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && 
          esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && 
          esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_1)))) {
        OUTPUT_BUNDLE_blk_n_B = m_axi_OUTPUT_BUNDLE_BVALID.read();
    } else {
        OUTPUT_BUNDLE_blk_n_B = ap_const_logic_1;
    }
}

void sobel::thread_OUTPUT_BUNDLE_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()))) {
        OUTPUT_BUNDLE_blk_n_W = m_axi_OUTPUT_BUNDLE_WREADY.read();
    } else {
        OUTPUT_BUNDLE_blk_n_W = ap_const_logic_1;
    }
}

void sobel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sobel::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sobel::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sobel::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sobel::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void sobel::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void sobel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void sobel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void sobel::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void sobel::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void sobel::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void sobel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sobel::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void sobel::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void sobel::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void sobel::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void sobel::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void sobel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sobel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sobel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sobel::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void sobel::thread_ap_CS_fsm_state59() {
    ap_CS_fsm_state59 = ap_CS_fsm.read()[58];
}

void sobel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sobel::thread_ap_CS_fsm_state60() {
    ap_CS_fsm_state60 = ap_CS_fsm.read()[59];
}

void sobel::thread_ap_CS_fsm_state61() {
    ap_CS_fsm_state61 = ap_CS_fsm.read()[60];
}

void sobel::thread_ap_CS_fsm_state62() {
    ap_CS_fsm_state62 = ap_CS_fsm.read()[61];
}

void sobel::thread_ap_CS_fsm_state67() {
    ap_CS_fsm_state67 = ap_CS_fsm.read()[66];
}

void sobel::thread_ap_CS_fsm_state68() {
    ap_CS_fsm_state68 = ap_CS_fsm.read()[67];
}

void sobel::thread_ap_CS_fsm_state69() {
    ap_CS_fsm_state69 = ap_CS_fsm.read()[68];
}

void sobel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sobel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sobel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sobel::thread_ap_block_state67() {
    ap_block_state67 = ((esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())));
}

void sobel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_225_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sobel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sobel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_225_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sobel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sobel::thread_ap_sig_ioackin_INPUT_BUNDLE_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY.read())) {
        ap_sig_ioackin_INPUT_BUNDLE_ARREADY = INPUT_BUNDLE_ARREADY.read();
    } else {
        ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1;
    }
}

void sobel::thread_ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY.read())) {
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = OUTPUT_BUNDLE_AWREADY.read();
    } else {
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1;
    }
}

void sobel::thread_ap_sig_ioackin_OUTPUT_BUNDLE_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY.read())) {
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = OUTPUT_BUNDLE_WREADY.read();
    } else {
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1;
    }
}

void sobel::thread_convulution_horizont_fu_571_p2() {
    convulution_horizont_fu_571_p2 = (!tmp3_cast_fu_567_p1.read().is_01() || !tmp_10_fu_555_p2.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp3_cast_fu_567_p1.read()) + sc_biguint<11>(tmp_10_fu_555_p2.read()));
}

void sobel::thread_convulution_vertical_fu_625_p2() {
    convulution_vertical_fu_625_p2 = (!tmp_20_fu_619_p2.read().is_01() || !tmp_27_cast_fu_612_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_20_fu_619_p2.read()) + sc_biguint<11>(tmp_27_cast_fu_612_p1.read()));
}

void sobel::thread_grp_fu_190_p0() {
    grp_fu_190_p0 = esl_zext<32,20>(p_reg_927.read());
}

void sobel::thread_grp_fu_198_p2() {
    grp_fu_198_p2 = (!tmp_9_fu_693_p1.read().is_01() || !output_read_reg_801.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_9_fu_693_p1.read()) + sc_biguint<32>(output_read_reg_801.read()));
}

void sobel::thread_grp_fu_794_p0() {
    grp_fu_794_p0 =  (sc_lv<11>) (tmp_21_fu_634_p1.read());
}

void sobel::thread_grp_fu_794_p1() {
    grp_fu_794_p1 =  (sc_lv<11>) (tmp_21_fu_634_p1.read());
}

void sobel::thread_i_1_fu_782_p2() {
    i_1_fu_782_p2 = (!i_reg_178.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_178.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sobel::thread_icmp_fu_772_p2() {
    icmp_fu_772_p2 = (!tmp_30_fu_762_p4.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_30_fu_762_p4.read() == ap_const_lv2_0);
}

void sobel::thread_input2_sum1_fu_437_p2() {
    input2_sum1_fu_437_p2 = (!tmp_13_fu_433_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_13_fu_433_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_input2_sum2_fu_469_p2() {
    input2_sum2_fu_469_p2 = (!tmp_17_fu_465_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_17_fu_465_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_input2_sum5_fu_322_p2() {
    input2_sum5_fu_322_p2 = (!sum4_cast_fu_318_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum4_cast_fu_318_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_input2_sum6_fu_343_p2() {
    input2_sum6_fu_343_p2 = (!sum6_cast_fu_339_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum6_cast_fu_339_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_input2_sum7_fu_364_p2() {
    input2_sum7_fu_364_p2 = (!sum8_cast_fu_360_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sum8_cast_fu_360_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_input2_sum8_fu_384_p2() {
    input2_sum8_fu_384_p2 = (!sum3_cast_fu_380_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum3_cast_fu_380_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_input2_sum9_fu_405_p2() {
    input2_sum9_fu_405_p2 = (!sum5_cast_fu_401_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum5_cast_fu_401_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_input2_sum_fu_293_p2() {
    input2_sum_fu_293_p2 = (!sum2_cast_fu_289_p1.read().is_01() || !input_read_reg_806.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sum2_cast_fu_289_p1.read()) + sc_biguint<32>(input_read_reg_806.read()));
}

void sobel::thread_isNeg_fu_668_p3() {
    isNeg_fu_668_p3 = sh_assign_fu_662_p2.read().range(11, 11);
}

void sobel::thread_j_1_fu_480_p2() {
    j_1_fu_480_p2 = (!j_reg_166.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_166.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sobel::thread_loc_V_1_fu_655_p1() {
    loc_V_1_fu_655_p1 = p_Val2_s_fu_641_p1.read().range(52-1, 0);
}

void sobel::thread_p_Val2_s_fu_641_p1() {
    p_Val2_s_fu_641_p1 = grp_fu_193_p2.read();
}

void sobel::thread_sh_assign_1_cast_fu_710_p1() {
    sh_assign_1_cast_fu_710_p1 = esl_sext<32,12>(sh_assign_1_reg_958.read());
}

void sobel::thread_sh_assign_1_fu_685_p3() {
    sh_assign_1_fu_685_p3 = (!isNeg_fu_668_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_668_p3.read()[0].to_bool())? tmp_39_i_i_i_cast_fu_681_p1.read(): sh_assign_fu_662_p2.read());
}

void sobel::thread_sh_assign_fu_662_p2() {
    sh_assign_fu_662_p2 = (!ap_const_lv12_C01.is_01() || !tmp_i_i_i_i_cast4_fu_659_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(tmp_i_i_i_i_cast4_fu_659_p1.read()));
}

void sobel::thread_sum1_cast_fu_552_p1() {
    sum1_cast_fu_552_p1 = esl_zext<11,10>(sum1_reg_897.read());
}

void sobel::thread_sum1_fu_516_p2() {
    sum1_fu_516_p2 = (!tmp2_cast_fu_512_p1.read().is_01() || !tmp_12_cast_fu_498_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp2_cast_fu_512_p1.read()) + sc_biguint<10>(tmp_12_cast_fu_498_p1.read()));
}

void sobel::thread_sum2_cast_fu_289_p1() {
    sum2_cast_fu_289_p1 = esl_sext<32,21>(sum2_fu_283_p2.read());
}

void sobel::thread_sum2_fu_283_p2() {
    sum2_fu_283_p2 = (!ap_const_lv21_1FFBFF.is_01() || !tmp_9_cast_fu_279_p1.read().is_01())? sc_lv<21>(): (sc_bigint<21>(ap_const_lv21_1FFBFF) + sc_biguint<21>(tmp_9_cast_fu_279_p1.read()));
}

void sobel::thread_sum3_cast_fu_380_p1() {
    sum3_cast_fu_380_p1 = esl_zext<32,21>(sum3_fu_375_p2.read());
}

void sobel::thread_sum3_fu_375_p2() {
    sum3_fu_375_p2 = (!tmp_3_cast_reg_821.read().is_01() || !tmp_8_cast5_fu_267_p1.read().is_01())? sc_lv<21>(): (sc_biguint<21>(tmp_3_cast_reg_821.read()) + sc_biguint<21>(tmp_8_cast5_fu_267_p1.read()));
}

void sobel::thread_sum4_cast_fu_318_p1() {
    sum4_cast_fu_318_p1 = esl_zext<32,20>(sum4_fu_310_p3.read());
}

void sobel::thread_sum4_fu_310_p3() {
    sum4_fu_310_p3 = esl_concat<10,10>(j_reg_166.read(), tmp1_fu_304_p2.read());
}

void sobel::thread_sum5_cast_fu_401_p1() {
    sum5_cast_fu_401_p1 = esl_zext<32,21>(sum5_fu_395_p2.read());
}

void sobel::thread_sum5_fu_395_p2() {
    sum5_fu_395_p2 = (!ap_const_lv21_401.is_01() || !tmp_9_cast_fu_279_p1.read().is_01())? sc_lv<21>(): (sc_biguint<21>(ap_const_lv21_401) + sc_biguint<21>(tmp_9_cast_fu_279_p1.read()));
}

void sobel::thread_sum5_neg_cast_fu_577_p1() {
    sum5_neg_cast_fu_577_p1 = esl_sext<10,9>(sum5_neg_reg_902.read());
}

void sobel::thread_sum5_neg_fu_522_p2() {
    sum5_neg_fu_522_p2 = (!tmp_7_cast_fu_486_p1.read().is_01() || !tmp_13_cast_fu_502_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_7_cast_fu_486_p1.read()) - sc_biguint<9>(tmp_13_cast_fu_502_p1.read()));
}

void sobel::thread_sum6_cast_fu_339_p1() {
    sum6_cast_fu_339_p1 = esl_zext<32,21>(sum6_fu_333_p2.read());
}

void sobel::thread_sum6_fu_333_p2() {
    sum6_fu_333_p2 = (!ap_const_lv21_3FF.is_01() || !tmp_9_cast_fu_279_p1.read().is_01())? sc_lv<21>(): (sc_biguint<21>(ap_const_lv21_3FF) + sc_biguint<21>(tmp_9_cast_fu_279_p1.read()));
}

void sobel::thread_sum6_neg_fu_580_p2() {
    sum6_neg_fu_580_p2 = (!sum5_neg_cast_fu_577_p1.read().is_01() || !tmp_14_cast_fu_532_p1.read().is_01())? sc_lv<10>(): (sc_bigint<10>(sum5_neg_cast_fu_577_p1.read()) + sc_biguint<10>(tmp_14_cast_fu_532_p1.read()));
}

void sobel::thread_sum8_cast_fu_360_p1() {
    sum8_cast_fu_360_p1 = esl_sext<32,21>(sum8_fu_354_p2.read());
}

void sobel::thread_sum8_fu_354_p2() {
    sum8_fu_354_p2 = (!ap_const_lv21_1FFC01.is_01() || !tmp_9_cast_fu_279_p1.read().is_01())? sc_lv<21>(): (sc_bigint<21>(ap_const_lv21_1FFC01) + sc_biguint<21>(tmp_9_cast_fu_279_p1.read()));
}

void sobel::thread_tmp1_fu_304_p2() {
    tmp1_fu_304_p2 = (!ap_const_lv10_3FF.is_01() || !i_reg_178.read().is_01())? sc_lv<10>(): (sc_bigint<10>(ap_const_lv10_3FF) + sc_biguint<10>(i_reg_178.read()));
}

void sobel::thread_tmp2_cast_fu_512_p1() {
    tmp2_cast_fu_512_p1 = esl_zext<10,9>(tmp2_fu_506_p2.read());
}

void sobel::thread_tmp2_fu_506_p2() {
    tmp2_fu_506_p2 = (!tmp_7_cast_fu_486_p1.read().is_01() || !tmp_13_cast_fu_502_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_7_cast_fu_486_p1.read()) + sc_biguint<9>(tmp_13_cast_fu_502_p1.read()));
}

void sobel::thread_tmp3_cast_fu_567_p1() {
    tmp3_cast_fu_567_p1 = esl_zext<11,10>(tmp3_fu_561_p2.read());
}

void sobel::thread_tmp3_fu_561_p2() {
    tmp3_fu_561_p2 = (!tmp_16_cast_fu_544_p1.read().is_01() || !tmp_17_cast_fu_548_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_16_cast_fu_544_p1.read()) + sc_biguint<10>(tmp_17_cast_fu_548_p1.read()));
}

void sobel::thread_tmp_10_fu_555_p2() {
    tmp_10_fu_555_p2 = (!tmp_7_fu_528_p1.read().is_01() || !sum1_cast_fu_552_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_7_fu_528_p1.read()) - sc_biguint<11>(sum1_cast_fu_552_p1.read()));
}

void sobel::thread_tmp_11_fu_416_p4() {
    tmp_11_fu_416_p4 = tmp_4_reg_826.read().range(19, 10);
}

void sobel::thread_tmp_12_cast_fu_498_p1() {
    tmp_12_cast_fu_498_p1 = esl_zext<10,9>(tmp_1_fu_490_p3.read());
}

void sobel::thread_tmp_12_fu_425_p3() {
    tmp_12_fu_425_p3 = esl_concat<10,10>(tmp_11_fu_416_p4.read(), i_reg_178.read());
}

void sobel::thread_tmp_13_cast_fu_502_p1() {
    tmp_13_cast_fu_502_p1 = esl_zext<9,8>(reg_216.read());
}

void sobel::thread_tmp_13_fu_433_p1() {
    tmp_13_fu_433_p1 = esl_zext<32,20>(tmp_12_fu_425_p3.read());
}

void sobel::thread_tmp_14_cast_fu_532_p1() {
    tmp_14_cast_fu_532_p1 = esl_zext<10,8>(reg_208.read());
}

void sobel::thread_tmp_14_fu_592_p3() {
    tmp_14_fu_592_p3 = esl_concat<8,1>(reg_208.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_15_fu_448_p4() {
    tmp_15_fu_448_p4 = tmp_5_reg_831.read().range(19, 10);
}

void sobel::thread_tmp_16_cast_fu_544_p1() {
    tmp_16_cast_fu_544_p1 = esl_zext<10,9>(tmp_8_fu_536_p3.read());
}

void sobel::thread_tmp_16_fu_457_p3() {
    tmp_16_fu_457_p3 = esl_concat<10,10>(tmp_15_fu_448_p4.read(), i_reg_178.read());
}

void sobel::thread_tmp_17_cast_fu_548_p1() {
    tmp_17_cast_fu_548_p1 = esl_zext<10,8>(reg_216.read());
}

void sobel::thread_tmp_17_fu_465_p1() {
    tmp_17_fu_465_p1 = esl_zext<32,20>(tmp_16_fu_457_p3.read());
}

void sobel::thread_tmp_18_fu_604_p3() {
    tmp_18_fu_604_p3 = esl_concat<8,1>(reg_212.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_19_fu_586_p2() {
    tmp_19_fu_586_p2 = (!sum6_neg_fu_580_p2.read().is_01() || !tmp_17_cast_fu_548_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(sum6_neg_fu_580_p2.read()) - sc_biguint<10>(tmp_17_cast_fu_548_p1.read()));
}

void sobel::thread_tmp_1_fu_490_p3() {
    tmp_1_fu_490_p3 = esl_concat<8,1>(reg_212.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_20_fu_619_p2() {
    tmp_20_fu_619_p2 = (!tmp_28_cast_fu_616_p1.read().is_01() || !tmp_23_cast_fu_600_p1.read().is_01())? sc_lv<11>(): (sc_bigint<11>(tmp_28_cast_fu_616_p1.read()) - sc_biguint<11>(tmp_23_cast_fu_600_p1.read()));
}

void sobel::thread_tmp_21_fu_634_p1() {
    tmp_21_fu_634_p1 = esl_sext<20,11>(convulution_horizont_reg_907.read());
}

void sobel::thread_tmp_23_cast_fu_600_p1() {
    tmp_23_cast_fu_600_p1 = esl_zext<11,9>(tmp_14_fu_592_p3.read());
}

void sobel::thread_tmp_23_fu_631_p1() {
    tmp_23_fu_631_p1 = esl_sext<20,11>(convulution_vertical_reg_917.read());
}

void sobel::thread_tmp_24_fu_788_p0() {
    tmp_24_fu_788_p0 =  (sc_lv<11>) (tmp_23_fu_631_p1.read());
}

void sobel::thread_tmp_24_fu_788_p1() {
    tmp_24_fu_788_p1 =  (sc_lv<11>) (tmp_23_fu_631_p1.read());
}

void sobel::thread_tmp_27_cast_fu_612_p1() {
    tmp_27_cast_fu_612_p1 = esl_zext<11,9>(tmp_18_fu_604_p3.read());
}

void sobel::thread_tmp_27_fu_745_p4() {
    tmp_27_fu_745_p4 = tmp_42_i_i_i_fu_727_p2.read().range(120, 53);
}

void sobel::thread_tmp_28_cast_fu_616_p1() {
    tmp_28_cast_fu_616_p1 = esl_sext<11,10>(tmp_19_reg_912.read());
}

void sobel::thread_tmp_28_fu_755_p3() {
    tmp_28_fu_755_p3 = (!isNeg_reg_953.read()[0].is_01())? sc_lv<68>(): ((isNeg_reg_953.read()[0].to_bool())? tmp_29_cast_fu_741_p1.read(): tmp_27_fu_745_p4.read());
}

void sobel::thread_tmp_29_cast_fu_741_p1() {
    tmp_29_cast_fu_741_p1 = esl_zext<68,1>(tmp_29_fu_733_p3.read());
}

void sobel::thread_tmp_29_fu_733_p3() {
    tmp_29_fu_733_p3 = tmp_41_i_i_i_fu_721_p2.read().range(53, 53);
}

void sobel::thread_tmp_2_fu_231_p3() {
    tmp_2_fu_231_p3 = esl_concat<10,10>(j_reg_166.read(), ap_const_lv10_0);
}

void sobel::thread_tmp_30_fu_762_p4() {
    tmp_30_fu_762_p4 = tmp_28_fu_755_p3.read().range(9, 8);
}

void sobel::thread_tmp_31_fu_778_p1() {
    tmp_31_fu_778_p1 = tmp_28_fu_755_p3.read().range(8-1, 0);
}

void sobel::thread_tmp_39_i_i_i_cast_fu_681_p1() {
    tmp_39_i_i_i_cast_fu_681_p1 = esl_sext<12,11>(tmp_39_i_i_i_fu_676_p2.read());
}

void sobel::thread_tmp_39_i_i_i_fu_676_p2() {
    tmp_39_i_i_i_fu_676_p2 = (!ap_const_lv11_3FF.is_01() || !loc_V_reg_942.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(loc_V_reg_942.read()));
}

void sobel::thread_tmp_3_cast_fu_245_p1() {
    tmp_3_cast_fu_245_p1 = esl_zext<21,20>(tmp_3_fu_239_p2.read());
}

void sobel::thread_tmp_3_fu_239_p2() {
    tmp_3_fu_239_p2 = (tmp_2_fu_231_p3.read() | ap_const_lv20_1);
}

void sobel::thread_tmp_40_i_i_i_cast_fu_717_p1() {
    tmp_40_i_i_i_cast_fu_717_p1 = esl_zext<54,32>(sh_assign_1_cast_fu_710_p1.read());
}

void sobel::thread_tmp_40_i_i_i_fu_713_p1() {
    tmp_40_i_i_i_fu_713_p1 = esl_zext<121,32>(sh_assign_1_cast_fu_710_p1.read());
}

void sobel::thread_tmp_41_i_i_i_fu_721_p2() {
    tmp_41_i_i_i_fu_721_p2 = (!tmp_40_i_i_i_cast_fu_717_p1.read().is_01())? sc_lv<54>(): tmp_i_i_i_fu_697_p4.read() >> (unsigned short)tmp_40_i_i_i_cast_fu_717_p1.read().to_uint();
}

void sobel::thread_tmp_42_i_i_i_fu_727_p2() {
    tmp_42_i_i_i_fu_727_p2 = (!tmp_40_i_i_i_fu_713_p1.read().is_01())? sc_lv<121>(): tmp_i_i_i_cast_fu_706_p1.read() << (unsigned short)tmp_40_i_i_i_fu_713_p1.read().to_uint();
}

void sobel::thread_tmp_4_fu_249_p2() {
    tmp_4_fu_249_p2 = (!tmp_2_fu_231_p3.read().is_01() || !ap_const_lv20_400.is_01())? sc_lv<20>(): (sc_biguint<20>(tmp_2_fu_231_p3.read()) + sc_biguint<20>(ap_const_lv20_400));
}

void sobel::thread_tmp_5_fu_255_p2() {
    tmp_5_fu_255_p2 = (!tmp_2_fu_231_p3.read().is_01() || !ap_const_lv20_FFC00.is_01())? sc_lv<20>(): (sc_biguint<20>(tmp_2_fu_231_p3.read()) + sc_bigint<20>(ap_const_lv20_FFC00));
}

void sobel::thread_tmp_6_fu_261_p2() {
    tmp_6_fu_261_p2 = (!i_reg_178.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_178.read() == ap_const_lv10_3FF);
}

void sobel::thread_tmp_7_cast_fu_486_p1() {
    tmp_7_cast_fu_486_p1 = esl_zext<9,8>(reg_208.read());
}

void sobel::thread_tmp_7_fu_528_p1() {
    tmp_7_fu_528_p1 = esl_zext<11,8>(reg_208.read());
}

void sobel::thread_tmp_8_cast5_fu_267_p1() {
    tmp_8_cast5_fu_267_p1 = esl_zext<21,10>(i_reg_178.read());
}

void sobel::thread_tmp_8_fu_536_p3() {
    tmp_8_fu_536_p3 = esl_concat<8,1>(reg_212.read(), ap_const_lv1_0);
}

void sobel::thread_tmp_9_cast_fu_279_p1() {
    tmp_9_cast_fu_279_p1 = esl_zext<21,20>(tmp_s_fu_271_p3.read());
}

void sobel::thread_tmp_9_fu_693_p1() {
    tmp_9_fu_693_p1 = esl_zext<32,20>(tmp_s_reg_839.read());
}

void sobel::thread_tmp_fu_225_p2() {
    tmp_fu_225_p2 = (!j_reg_166.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_166.read() == ap_const_lv10_3FF);
}

void sobel::thread_tmp_i_i_i_cast_fu_706_p1() {
    tmp_i_i_i_cast_fu_706_p1 = esl_zext<121,54>(tmp_i_i_i_fu_697_p4.read());
}

void sobel::thread_tmp_i_i_i_fu_697_p4() {
    tmp_i_i_i_fu_697_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, loc_V_1_reg_948.read()), ap_const_lv1_0);
}

void sobel::thread_tmp_i_i_i_i_cast4_fu_659_p1() {
    tmp_i_i_i_i_cast4_fu_659_p1 = esl_zext<12,11>(loc_V_reg_942.read());
}

void sobel::thread_tmp_s_fu_271_p3() {
    tmp_s_fu_271_p3 = esl_concat<10,10>(j_reg_166.read(), i_reg_178.read());
}

void sobel::thread_ap_NS_fsm() {
    if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_225_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state3;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_261_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state4;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state5;
        } else {
            ap_NS_fsm = ap_ST_fsm_state4;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state6;
        } else {
            ap_NS_fsm = ap_ST_fsm_state5;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state7;
        } else {
            ap_NS_fsm = ap_ST_fsm_state6;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state8;
        } else {
            ap_NS_fsm = ap_ST_fsm_state7;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state9;
        } else {
            ap_NS_fsm = ap_ST_fsm_state8;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state10;
        } else {
            ap_NS_fsm = ap_ST_fsm_state9;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state11;
        } else {
            ap_NS_fsm = ap_ST_fsm_state10;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_BUNDLE_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_INPUT_BUNDLE_ARREADY.read())))) {
            ap_NS_fsm = ap_ST_fsm_state12;
        } else {
            ap_NS_fsm = ap_ST_fsm_state11;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state13;
        } else {
            ap_NS_fsm = ap_ST_fsm_state12;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state14;
        } else {
            ap_NS_fsm = ap_ST_fsm_state13;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state15;
        } else {
            ap_NS_fsm = ap_ST_fsm_state14;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state16;
        } else {
            ap_NS_fsm = ap_ST_fsm_state15;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state17;
        } else {
            ap_NS_fsm = ap_ST_fsm_state16;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state18;
        } else {
            ap_NS_fsm = ap_ST_fsm_state17;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(INPUT_BUNDLE_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state19;
        } else {
            ap_NS_fsm = ap_ST_fsm_state18;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_772_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state68;
        } else {
            ap_NS_fsm = ap_ST_fsm_state61;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state62;
        } else {
            ap_NS_fsm = ap_ST_fsm_state61;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state63;
        } else {
            ap_NS_fsm = ap_ST_fsm_state62;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && !((esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read())) || (esl_seteq<1,1,1>(icmp_reg_963.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_BUNDLE_BVALID.read()))))) {
            ap_NS_fsm = ap_ST_fsm_state3;
        } else {
            ap_NS_fsm = ap_ST_fsm_state67;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state69;
        } else {
            ap_NS_fsm = ap_ST_fsm_state68;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_OUTPUT_BUNDLE_WREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state70;
        } else {
            ap_NS_fsm = ap_ST_fsm_state69;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state71;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state71))
    {
        ap_NS_fsm = ap_ST_fsm_state72;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state72))
    {
        ap_NS_fsm = ap_ST_fsm_state73;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state73))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else
    {
        ap_NS_fsm =  (sc_lv<73>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
void sobel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_INPUT_BUNDLE_AWVALID\" :  \"" << m_axi_INPUT_BUNDLE_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWREADY\" :  \"" << m_axi_INPUT_BUNDLE_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWADDR\" :  \"" << m_axi_INPUT_BUNDLE_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWID\" :  \"" << m_axi_INPUT_BUNDLE_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWLEN\" :  \"" << m_axi_INPUT_BUNDLE_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWSIZE\" :  \"" << m_axi_INPUT_BUNDLE_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWBURST\" :  \"" << m_axi_INPUT_BUNDLE_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWLOCK\" :  \"" << m_axi_INPUT_BUNDLE_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWCACHE\" :  \"" << m_axi_INPUT_BUNDLE_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWPROT\" :  \"" << m_axi_INPUT_BUNDLE_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWQOS\" :  \"" << m_axi_INPUT_BUNDLE_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWREGION\" :  \"" << m_axi_INPUT_BUNDLE_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_AWUSER\" :  \"" << m_axi_INPUT_BUNDLE_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WVALID\" :  \"" << m_axi_INPUT_BUNDLE_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WREADY\" :  \"" << m_axi_INPUT_BUNDLE_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WDATA\" :  \"" << m_axi_INPUT_BUNDLE_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WSTRB\" :  \"" << m_axi_INPUT_BUNDLE_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WLAST\" :  \"" << m_axi_INPUT_BUNDLE_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WID\" :  \"" << m_axi_INPUT_BUNDLE_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_WUSER\" :  \"" << m_axi_INPUT_BUNDLE_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARVALID\" :  \"" << m_axi_INPUT_BUNDLE_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARREADY\" :  \"" << m_axi_INPUT_BUNDLE_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARADDR\" :  \"" << m_axi_INPUT_BUNDLE_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARID\" :  \"" << m_axi_INPUT_BUNDLE_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARLEN\" :  \"" << m_axi_INPUT_BUNDLE_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARSIZE\" :  \"" << m_axi_INPUT_BUNDLE_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARBURST\" :  \"" << m_axi_INPUT_BUNDLE_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARLOCK\" :  \"" << m_axi_INPUT_BUNDLE_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARCACHE\" :  \"" << m_axi_INPUT_BUNDLE_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARPROT\" :  \"" << m_axi_INPUT_BUNDLE_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARQOS\" :  \"" << m_axi_INPUT_BUNDLE_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARREGION\" :  \"" << m_axi_INPUT_BUNDLE_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_ARUSER\" :  \"" << m_axi_INPUT_BUNDLE_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RVALID\" :  \"" << m_axi_INPUT_BUNDLE_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RREADY\" :  \"" << m_axi_INPUT_BUNDLE_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RDATA\" :  \"" << m_axi_INPUT_BUNDLE_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RLAST\" :  \"" << m_axi_INPUT_BUNDLE_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RID\" :  \"" << m_axi_INPUT_BUNDLE_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RUSER\" :  \"" << m_axi_INPUT_BUNDLE_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_RRESP\" :  \"" << m_axi_INPUT_BUNDLE_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BVALID\" :  \"" << m_axi_INPUT_BUNDLE_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BREADY\" :  \"" << m_axi_INPUT_BUNDLE_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BRESP\" :  \"" << m_axi_INPUT_BUNDLE_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BID\" :  \"" << m_axi_INPUT_BUNDLE_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_INPUT_BUNDLE_BUSER\" :  \"" << m_axi_INPUT_BUNDLE_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWADDR\" :  \"" << m_axi_OUTPUT_BUNDLE_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWID\" :  \"" << m_axi_OUTPUT_BUNDLE_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWLEN\" :  \"" << m_axi_OUTPUT_BUNDLE_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWSIZE\" :  \"" << m_axi_OUTPUT_BUNDLE_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWBURST\" :  \"" << m_axi_OUTPUT_BUNDLE_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWLOCK\" :  \"" << m_axi_OUTPUT_BUNDLE_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWCACHE\" :  \"" << m_axi_OUTPUT_BUNDLE_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWPROT\" :  \"" << m_axi_OUTPUT_BUNDLE_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWQOS\" :  \"" << m_axi_OUTPUT_BUNDLE_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWREGION\" :  \"" << m_axi_OUTPUT_BUNDLE_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_AWUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WDATA\" :  \"" << m_axi_OUTPUT_BUNDLE_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WSTRB\" :  \"" << m_axi_OUTPUT_BUNDLE_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WLAST\" :  \"" << m_axi_OUTPUT_BUNDLE_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WID\" :  \"" << m_axi_OUTPUT_BUNDLE_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_WUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARADDR\" :  \"" << m_axi_OUTPUT_BUNDLE_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARID\" :  \"" << m_axi_OUTPUT_BUNDLE_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARLEN\" :  \"" << m_axi_OUTPUT_BUNDLE_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARSIZE\" :  \"" << m_axi_OUTPUT_BUNDLE_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARBURST\" :  \"" << m_axi_OUTPUT_BUNDLE_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARLOCK\" :  \"" << m_axi_OUTPUT_BUNDLE_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARCACHE\" :  \"" << m_axi_OUTPUT_BUNDLE_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARPROT\" :  \"" << m_axi_OUTPUT_BUNDLE_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARQOS\" :  \"" << m_axi_OUTPUT_BUNDLE_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARREGION\" :  \"" << m_axi_OUTPUT_BUNDLE_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_ARUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RDATA\" :  \"" << m_axi_OUTPUT_BUNDLE_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RLAST\" :  \"" << m_axi_OUTPUT_BUNDLE_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RID\" :  \"" << m_axi_OUTPUT_BUNDLE_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_RRESP\" :  \"" << m_axi_OUTPUT_BUNDLE_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BVALID\" :  \"" << m_axi_OUTPUT_BUNDLE_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BREADY\" :  \"" << m_axi_OUTPUT_BUNDLE_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BRESP\" :  \"" << m_axi_OUTPUT_BUNDLE_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BID\" :  \"" << m_axi_OUTPUT_BUNDLE_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_OUTPUT_BUNDLE_BUSER\" :  \"" << m_axi_OUTPUT_BUNDLE_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

