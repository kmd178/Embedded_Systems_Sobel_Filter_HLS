// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=67893505,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=4634,HLS_SYN_LUT=6313}" *)

module sobel (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_BUNDLE_AWVALID,
        m_axi_INPUT_BUNDLE_AWREADY,
        m_axi_INPUT_BUNDLE_AWADDR,
        m_axi_INPUT_BUNDLE_AWID,
        m_axi_INPUT_BUNDLE_AWLEN,
        m_axi_INPUT_BUNDLE_AWSIZE,
        m_axi_INPUT_BUNDLE_AWBURST,
        m_axi_INPUT_BUNDLE_AWLOCK,
        m_axi_INPUT_BUNDLE_AWCACHE,
        m_axi_INPUT_BUNDLE_AWPROT,
        m_axi_INPUT_BUNDLE_AWQOS,
        m_axi_INPUT_BUNDLE_AWREGION,
        m_axi_INPUT_BUNDLE_AWUSER,
        m_axi_INPUT_BUNDLE_WVALID,
        m_axi_INPUT_BUNDLE_WREADY,
        m_axi_INPUT_BUNDLE_WDATA,
        m_axi_INPUT_BUNDLE_WSTRB,
        m_axi_INPUT_BUNDLE_WLAST,
        m_axi_INPUT_BUNDLE_WID,
        m_axi_INPUT_BUNDLE_WUSER,
        m_axi_INPUT_BUNDLE_ARVALID,
        m_axi_INPUT_BUNDLE_ARREADY,
        m_axi_INPUT_BUNDLE_ARADDR,
        m_axi_INPUT_BUNDLE_ARID,
        m_axi_INPUT_BUNDLE_ARLEN,
        m_axi_INPUT_BUNDLE_ARSIZE,
        m_axi_INPUT_BUNDLE_ARBURST,
        m_axi_INPUT_BUNDLE_ARLOCK,
        m_axi_INPUT_BUNDLE_ARCACHE,
        m_axi_INPUT_BUNDLE_ARPROT,
        m_axi_INPUT_BUNDLE_ARQOS,
        m_axi_INPUT_BUNDLE_ARREGION,
        m_axi_INPUT_BUNDLE_ARUSER,
        m_axi_INPUT_BUNDLE_RVALID,
        m_axi_INPUT_BUNDLE_RREADY,
        m_axi_INPUT_BUNDLE_RDATA,
        m_axi_INPUT_BUNDLE_RLAST,
        m_axi_INPUT_BUNDLE_RID,
        m_axi_INPUT_BUNDLE_RUSER,
        m_axi_INPUT_BUNDLE_RRESP,
        m_axi_INPUT_BUNDLE_BVALID,
        m_axi_INPUT_BUNDLE_BREADY,
        m_axi_INPUT_BUNDLE_BRESP,
        m_axi_INPUT_BUNDLE_BID,
        m_axi_INPUT_BUNDLE_BUSER,
        m_axi_OUTPUT_BUNDLE_AWVALID,
        m_axi_OUTPUT_BUNDLE_AWREADY,
        m_axi_OUTPUT_BUNDLE_AWADDR,
        m_axi_OUTPUT_BUNDLE_AWID,
        m_axi_OUTPUT_BUNDLE_AWLEN,
        m_axi_OUTPUT_BUNDLE_AWSIZE,
        m_axi_OUTPUT_BUNDLE_AWBURST,
        m_axi_OUTPUT_BUNDLE_AWLOCK,
        m_axi_OUTPUT_BUNDLE_AWCACHE,
        m_axi_OUTPUT_BUNDLE_AWPROT,
        m_axi_OUTPUT_BUNDLE_AWQOS,
        m_axi_OUTPUT_BUNDLE_AWREGION,
        m_axi_OUTPUT_BUNDLE_AWUSER,
        m_axi_OUTPUT_BUNDLE_WVALID,
        m_axi_OUTPUT_BUNDLE_WREADY,
        m_axi_OUTPUT_BUNDLE_WDATA,
        m_axi_OUTPUT_BUNDLE_WSTRB,
        m_axi_OUTPUT_BUNDLE_WLAST,
        m_axi_OUTPUT_BUNDLE_WID,
        m_axi_OUTPUT_BUNDLE_WUSER,
        m_axi_OUTPUT_BUNDLE_ARVALID,
        m_axi_OUTPUT_BUNDLE_ARREADY,
        m_axi_OUTPUT_BUNDLE_ARADDR,
        m_axi_OUTPUT_BUNDLE_ARID,
        m_axi_OUTPUT_BUNDLE_ARLEN,
        m_axi_OUTPUT_BUNDLE_ARSIZE,
        m_axi_OUTPUT_BUNDLE_ARBURST,
        m_axi_OUTPUT_BUNDLE_ARLOCK,
        m_axi_OUTPUT_BUNDLE_ARCACHE,
        m_axi_OUTPUT_BUNDLE_ARPROT,
        m_axi_OUTPUT_BUNDLE_ARQOS,
        m_axi_OUTPUT_BUNDLE_ARREGION,
        m_axi_OUTPUT_BUNDLE_ARUSER,
        m_axi_OUTPUT_BUNDLE_RVALID,
        m_axi_OUTPUT_BUNDLE_RREADY,
        m_axi_OUTPUT_BUNDLE_RDATA,
        m_axi_OUTPUT_BUNDLE_RLAST,
        m_axi_OUTPUT_BUNDLE_RID,
        m_axi_OUTPUT_BUNDLE_RUSER,
        m_axi_OUTPUT_BUNDLE_RRESP,
        m_axi_OUTPUT_BUNDLE_BVALID,
        m_axi_OUTPUT_BUNDLE_BREADY,
        m_axi_OUTPUT_BUNDLE_BRESP,
        m_axi_OUTPUT_BUNDLE_BID,
        m_axi_OUTPUT_BUNDLE_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_state5 = 73'd16;
parameter    ap_ST_fsm_state6 = 73'd32;
parameter    ap_ST_fsm_state7 = 73'd64;
parameter    ap_ST_fsm_state8 = 73'd128;
parameter    ap_ST_fsm_state9 = 73'd256;
parameter    ap_ST_fsm_state10 = 73'd512;
parameter    ap_ST_fsm_state11 = 73'd1024;
parameter    ap_ST_fsm_state12 = 73'd2048;
parameter    ap_ST_fsm_state13 = 73'd4096;
parameter    ap_ST_fsm_state14 = 73'd8192;
parameter    ap_ST_fsm_state15 = 73'd16384;
parameter    ap_ST_fsm_state16 = 73'd32768;
parameter    ap_ST_fsm_state17 = 73'd65536;
parameter    ap_ST_fsm_state18 = 73'd131072;
parameter    ap_ST_fsm_state19 = 73'd262144;
parameter    ap_ST_fsm_state20 = 73'd524288;
parameter    ap_ST_fsm_state21 = 73'd1048576;
parameter    ap_ST_fsm_state22 = 73'd2097152;
parameter    ap_ST_fsm_state23 = 73'd4194304;
parameter    ap_ST_fsm_state24 = 73'd8388608;
parameter    ap_ST_fsm_state25 = 73'd16777216;
parameter    ap_ST_fsm_state26 = 73'd33554432;
parameter    ap_ST_fsm_state27 = 73'd67108864;
parameter    ap_ST_fsm_state28 = 73'd134217728;
parameter    ap_ST_fsm_state29 = 73'd268435456;
parameter    ap_ST_fsm_state30 = 73'd536870912;
parameter    ap_ST_fsm_state31 = 73'd1073741824;
parameter    ap_ST_fsm_state32 = 73'd2147483648;
parameter    ap_ST_fsm_state33 = 73'd4294967296;
parameter    ap_ST_fsm_state34 = 73'd8589934592;
parameter    ap_ST_fsm_state35 = 73'd17179869184;
parameter    ap_ST_fsm_state36 = 73'd34359738368;
parameter    ap_ST_fsm_state37 = 73'd68719476736;
parameter    ap_ST_fsm_state38 = 73'd137438953472;
parameter    ap_ST_fsm_state39 = 73'd274877906944;
parameter    ap_ST_fsm_state40 = 73'd549755813888;
parameter    ap_ST_fsm_state41 = 73'd1099511627776;
parameter    ap_ST_fsm_state42 = 73'd2199023255552;
parameter    ap_ST_fsm_state43 = 73'd4398046511104;
parameter    ap_ST_fsm_state44 = 73'd8796093022208;
parameter    ap_ST_fsm_state45 = 73'd17592186044416;
parameter    ap_ST_fsm_state46 = 73'd35184372088832;
parameter    ap_ST_fsm_state47 = 73'd70368744177664;
parameter    ap_ST_fsm_state48 = 73'd140737488355328;
parameter    ap_ST_fsm_state49 = 73'd281474976710656;
parameter    ap_ST_fsm_state50 = 73'd562949953421312;
parameter    ap_ST_fsm_state51 = 73'd1125899906842624;
parameter    ap_ST_fsm_state52 = 73'd2251799813685248;
parameter    ap_ST_fsm_state53 = 73'd4503599627370496;
parameter    ap_ST_fsm_state54 = 73'd9007199254740992;
parameter    ap_ST_fsm_state55 = 73'd18014398509481984;
parameter    ap_ST_fsm_state56 = 73'd36028797018963968;
parameter    ap_ST_fsm_state57 = 73'd72057594037927936;
parameter    ap_ST_fsm_state58 = 73'd144115188075855872;
parameter    ap_ST_fsm_state59 = 73'd288230376151711744;
parameter    ap_ST_fsm_state60 = 73'd576460752303423488;
parameter    ap_ST_fsm_state61 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 73'd4722366482869645213696;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_BUNDLE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_BUNDLE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_BUNDLE_AWVALID;
input   m_axi_INPUT_BUNDLE_AWREADY;
output  [C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWADDR;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWID;
output  [7:0] m_axi_INPUT_BUNDLE_AWLEN;
output  [2:0] m_axi_INPUT_BUNDLE_AWSIZE;
output  [1:0] m_axi_INPUT_BUNDLE_AWBURST;
output  [1:0] m_axi_INPUT_BUNDLE_AWLOCK;
output  [3:0] m_axi_INPUT_BUNDLE_AWCACHE;
output  [2:0] m_axi_INPUT_BUNDLE_AWPROT;
output  [3:0] m_axi_INPUT_BUNDLE_AWQOS;
output  [3:0] m_axi_INPUT_BUNDLE_AWREGION;
output  [C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWUSER;
output   m_axi_INPUT_BUNDLE_WVALID;
input   m_axi_INPUT_BUNDLE_WREADY;
output  [C_M_AXI_INPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WDATA;
output  [C_M_AXI_INPUT_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WSTRB;
output   m_axi_INPUT_BUNDLE_WLAST;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WID;
output  [C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WUSER;
output   m_axi_INPUT_BUNDLE_ARVALID;
input   m_axi_INPUT_BUNDLE_ARREADY;
output  [C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARADDR;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARID;
output  [7:0] m_axi_INPUT_BUNDLE_ARLEN;
output  [2:0] m_axi_INPUT_BUNDLE_ARSIZE;
output  [1:0] m_axi_INPUT_BUNDLE_ARBURST;
output  [1:0] m_axi_INPUT_BUNDLE_ARLOCK;
output  [3:0] m_axi_INPUT_BUNDLE_ARCACHE;
output  [2:0] m_axi_INPUT_BUNDLE_ARPROT;
output  [3:0] m_axi_INPUT_BUNDLE_ARQOS;
output  [3:0] m_axi_INPUT_BUNDLE_ARREGION;
output  [C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARUSER;
input   m_axi_INPUT_BUNDLE_RVALID;
output   m_axi_INPUT_BUNDLE_RREADY;
input  [C_M_AXI_INPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RDATA;
input   m_axi_INPUT_BUNDLE_RLAST;
input  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RID;
input  [C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RUSER;
input  [1:0] m_axi_INPUT_BUNDLE_RRESP;
input   m_axi_INPUT_BUNDLE_BVALID;
output   m_axi_INPUT_BUNDLE_BREADY;
input  [1:0] m_axi_INPUT_BUNDLE_BRESP;
input  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_BID;
input  [C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_BUSER;
output   m_axi_OUTPUT_BUNDLE_AWVALID;
input   m_axi_OUTPUT_BUNDLE_AWREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWADDR;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWID;
output  [7:0] m_axi_OUTPUT_BUNDLE_AWLEN;
output  [2:0] m_axi_OUTPUT_BUNDLE_AWSIZE;
output  [1:0] m_axi_OUTPUT_BUNDLE_AWBURST;
output  [1:0] m_axi_OUTPUT_BUNDLE_AWLOCK;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWCACHE;
output  [2:0] m_axi_OUTPUT_BUNDLE_AWPROT;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWQOS;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWREGION;
output  [C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWUSER;
output   m_axi_OUTPUT_BUNDLE_WVALID;
input   m_axi_OUTPUT_BUNDLE_WREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WDATA;
output  [C_M_AXI_OUTPUT_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WSTRB;
output   m_axi_OUTPUT_BUNDLE_WLAST;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WID;
output  [C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WUSER;
output   m_axi_OUTPUT_BUNDLE_ARVALID;
input   m_axi_OUTPUT_BUNDLE_ARREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARADDR;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARID;
output  [7:0] m_axi_OUTPUT_BUNDLE_ARLEN;
output  [2:0] m_axi_OUTPUT_BUNDLE_ARSIZE;
output  [1:0] m_axi_OUTPUT_BUNDLE_ARBURST;
output  [1:0] m_axi_OUTPUT_BUNDLE_ARLOCK;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARCACHE;
output  [2:0] m_axi_OUTPUT_BUNDLE_ARPROT;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARQOS;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARREGION;
output  [C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARUSER;
input   m_axi_OUTPUT_BUNDLE_RVALID;
output   m_axi_OUTPUT_BUNDLE_RREADY;
input  [C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RDATA;
input   m_axi_OUTPUT_BUNDLE_RLAST;
input  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RID;
input  [C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RUSER;
input  [1:0] m_axi_OUTPUT_BUNDLE_RRESP;
input   m_axi_OUTPUT_BUNDLE_BVALID;
output   m_axi_OUTPUT_BUNDLE_BREADY;
input  [1:0] m_axi_OUTPUT_BUNDLE_BRESP;
input  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_BID;
input  [C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] output_r;
reg    INPUT_BUNDLE_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    INPUT_BUNDLE_blk_n_R;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    OUTPUT_BUNDLE_blk_n_AW;
wire    ap_CS_fsm_state61;
reg    OUTPUT_BUNDLE_blk_n_W;
wire    ap_CS_fsm_state62;
reg    OUTPUT_BUNDLE_blk_n_B;
wire    ap_CS_fsm_state67;
reg   [0:0] icmp_reg_963;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    INPUT_BUNDLE_AWREADY;
wire    INPUT_BUNDLE_WREADY;
reg    INPUT_BUNDLE_ARVALID;
wire    INPUT_BUNDLE_ARREADY;
reg   [31:0] INPUT_BUNDLE_ARADDR;
wire    INPUT_BUNDLE_RVALID;
reg    INPUT_BUNDLE_RREADY;
wire   [7:0] INPUT_BUNDLE_RDATA;
wire    INPUT_BUNDLE_RLAST;
wire   [0:0] INPUT_BUNDLE_RID;
wire   [0:0] INPUT_BUNDLE_RUSER;
wire   [1:0] INPUT_BUNDLE_RRESP;
wire    INPUT_BUNDLE_BVALID;
wire   [1:0] INPUT_BUNDLE_BRESP;
wire   [0:0] INPUT_BUNDLE_BID;
wire   [0:0] INPUT_BUNDLE_BUSER;
reg    OUTPUT_BUNDLE_AWVALID;
wire    OUTPUT_BUNDLE_AWREADY;
reg    OUTPUT_BUNDLE_WVALID;
wire    OUTPUT_BUNDLE_WREADY;
reg   [7:0] OUTPUT_BUNDLE_WDATA;
wire    OUTPUT_BUNDLE_ARREADY;
wire    OUTPUT_BUNDLE_RVALID;
wire   [7:0] OUTPUT_BUNDLE_RDATA;
wire    OUTPUT_BUNDLE_RLAST;
wire   [0:0] OUTPUT_BUNDLE_RID;
wire   [0:0] OUTPUT_BUNDLE_RUSER;
wire   [1:0] OUTPUT_BUNDLE_RRESP;
wire    OUTPUT_BUNDLE_BVALID;
reg    OUTPUT_BUNDLE_BREADY;
wire   [1:0] OUTPUT_BUNDLE_BRESP;
wire   [0:0] OUTPUT_BUNDLE_BID;
wire   [0:0] OUTPUT_BUNDLE_BUSER;
reg   [7:0] reg_208;
reg    ap_sig_ioackin_INPUT_BUNDLE_ARREADY;
reg   [7:0] reg_212;
reg   [7:0] reg_216;
reg   [31:0] reg_220;
wire    ap_CS_fsm_state60;
wire   [0:0] icmp_fu_772_p2;
reg   [31:0] output_read_reg_801;
reg   [31:0] input_read_reg_806;
wire   [20:0] tmp_3_cast_fu_245_p1;
reg   [20:0] tmp_3_cast_reg_821;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_225_p2;
wire   [19:0] tmp_4_fu_249_p2;
reg   [19:0] tmp_4_reg_826;
wire   [19:0] tmp_5_fu_255_p2;
reg   [19:0] tmp_5_reg_831;
wire   [19:0] tmp_s_fu_271_p3;
reg   [19:0] tmp_s_reg_839;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_6_fu_261_p2;
reg   [31:0] INPUT_BUNDLE_addr_reg_844;
reg   [31:0] INPUT_BUNDLE_addr_1_reg_850;
reg   [31:0] INPUT_BUNDLE_addr_2_reg_856;
reg   [31:0] INPUT_BUNDLE_addr_3_reg_862;
reg   [31:0] INPUT_BUNDLE_addr_4_reg_868;
reg   [31:0] INPUT_BUNDLE_addr_5_reg_874;
reg   [31:0] INPUT_BUNDLE_addr_6_reg_880;
reg   [31:0] INPUT_BUNDLE_addr_7_reg_886;
wire   [9:0] j_1_fu_480_p2;
wire   [9:0] sum1_fu_516_p2;
reg   [9:0] sum1_reg_897;
wire   [8:0] sum5_neg_fu_522_p2;
reg   [8:0] sum5_neg_reg_902;
wire   [10:0] convulution_horizont_fu_571_p2;
reg   [10:0] convulution_horizont_reg_907;
wire   [9:0] tmp_19_fu_586_p2;
reg   [9:0] tmp_19_reg_912;
wire   [10:0] convulution_vertical_fu_625_p2;
reg   [10:0] convulution_vertical_reg_917;
wire    ap_CS_fsm_state19;
wire  signed [19:0] tmp_24_fu_788_p2;
reg  signed [19:0] tmp_24_reg_922;
wire    ap_CS_fsm_state20;
wire  signed [19:0] grp_fu_794_p3;
reg  signed [19:0] p_reg_927;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [63:0] grp_fu_190_p1;
reg   [63:0] tmp_25_reg_937;
wire    ap_CS_fsm_state27;
reg   [10:0] loc_V_reg_942;
wire    ap_CS_fsm_state58;
wire   [51:0] loc_V_1_fu_655_p1;
reg   [51:0] loc_V_1_reg_948;
wire   [0:0] isNeg_fu_668_p3;
reg   [0:0] isNeg_reg_953;
wire    ap_CS_fsm_state59;
wire   [11:0] sh_assign_1_fu_685_p3;
reg   [11:0] sh_assign_1_reg_958;
wire   [7:0] tmp_31_fu_778_p1;
reg   [7:0] tmp_31_reg_967;
wire   [9:0] i_1_fu_782_p2;
reg    ap_block_state67;
reg   [9:0] j_reg_166;
reg   [9:0] i_reg_178;
wire   [31:0] grp_fu_198_p2;
wire   [31:0] input2_sum_fu_293_p2;
wire   [31:0] input2_sum5_fu_322_p2;
wire   [31:0] input2_sum6_fu_343_p2;
wire   [31:0] input2_sum7_fu_364_p2;
wire   [31:0] input2_sum8_fu_384_p2;
wire   [31:0] input2_sum9_fu_405_p2;
wire   [31:0] input2_sum1_fu_437_p2;
wire   [31:0] input2_sum2_fu_469_p2;
reg    ap_reg_ioackin_INPUT_BUNDLE_ARREADY;
reg    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY;
reg    ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY;
reg    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY;
reg    ap_sig_ioackin_OUTPUT_BUNDLE_WREADY;
wire   [31:0] grp_fu_190_p0;
wire    ap_CS_fsm_state28;
wire   [31:0] tmp_9_fu_693_p1;
wire   [19:0] tmp_2_fu_231_p3;
wire   [19:0] tmp_3_fu_239_p2;
wire   [20:0] tmp_9_cast_fu_279_p1;
wire   [20:0] sum2_fu_283_p2;
wire  signed [31:0] sum2_cast_fu_289_p1;
wire   [9:0] tmp1_fu_304_p2;
wire   [19:0] sum4_fu_310_p3;
wire   [31:0] sum4_cast_fu_318_p1;
wire   [20:0] sum6_fu_333_p2;
wire   [31:0] sum6_cast_fu_339_p1;
wire   [20:0] sum8_fu_354_p2;
wire  signed [31:0] sum8_cast_fu_360_p1;
wire   [20:0] tmp_8_cast5_fu_267_p1;
wire   [20:0] sum3_fu_375_p2;
wire   [31:0] sum3_cast_fu_380_p1;
wire   [20:0] sum5_fu_395_p2;
wire   [31:0] sum5_cast_fu_401_p1;
wire   [9:0] tmp_11_fu_416_p4;
wire   [19:0] tmp_12_fu_425_p3;
wire   [31:0] tmp_13_fu_433_p1;
wire   [9:0] tmp_15_fu_448_p4;
wire   [19:0] tmp_16_fu_457_p3;
wire   [31:0] tmp_17_fu_465_p1;
wire   [8:0] tmp_1_fu_490_p3;
wire   [8:0] tmp_7_cast_fu_486_p1;
wire   [8:0] tmp_13_cast_fu_502_p1;
wire   [8:0] tmp2_fu_506_p2;
wire   [9:0] tmp2_cast_fu_512_p1;
wire   [9:0] tmp_12_cast_fu_498_p1;
wire   [8:0] tmp_8_fu_536_p3;
wire   [10:0] tmp_7_fu_528_p1;
wire   [10:0] sum1_cast_fu_552_p1;
wire   [9:0] tmp_16_cast_fu_544_p1;
wire   [9:0] tmp_17_cast_fu_548_p1;
wire   [9:0] tmp3_fu_561_p2;
wire   [10:0] tmp3_cast_fu_567_p1;
wire   [10:0] tmp_10_fu_555_p2;
wire  signed [9:0] sum5_neg_cast_fu_577_p1;
wire   [9:0] tmp_14_cast_fu_532_p1;
wire   [9:0] sum6_neg_fu_580_p2;
wire   [8:0] tmp_14_fu_592_p3;
wire   [8:0] tmp_18_fu_604_p3;
wire  signed [10:0] tmp_28_cast_fu_616_p1;
wire   [10:0] tmp_23_cast_fu_600_p1;
wire   [10:0] tmp_20_fu_619_p2;
wire   [10:0] tmp_27_cast_fu_612_p1;
wire   [63:0] grp_fu_193_p2;
wire   [63:0] p_Val2_s_fu_641_p1;
wire   [11:0] tmp_i_i_i_i_cast4_fu_659_p1;
wire   [11:0] sh_assign_fu_662_p2;
wire   [10:0] tmp_39_i_i_i_fu_676_p2;
wire  signed [11:0] tmp_39_i_i_i_cast_fu_681_p1;
wire   [53:0] tmp_i_i_i_fu_697_p4;
wire  signed [31:0] sh_assign_1_cast_fu_710_p1;
wire   [53:0] tmp_40_i_i_i_cast_fu_717_p1;
wire   [120:0] tmp_i_i_i_cast_fu_706_p1;
wire   [120:0] tmp_40_i_i_i_fu_713_p1;
wire   [53:0] tmp_41_i_i_i_fu_721_p2;
wire   [0:0] tmp_29_fu_733_p3;
wire   [120:0] tmp_42_i_i_i_fu_727_p2;
wire   [67:0] tmp_29_cast_fu_741_p1;
wire   [67:0] tmp_27_fu_745_p4;
wire   [67:0] tmp_28_fu_755_p3;
wire   [1:0] tmp_30_fu_762_p4;
wire  signed [10:0] tmp_24_fu_788_p0;
wire  signed [19:0] tmp_23_fu_631_p1;
wire  signed [10:0] tmp_24_fu_788_p1;
wire  signed [10:0] grp_fu_794_p0;
wire  signed [19:0] tmp_21_fu_634_p1;
wire  signed [10:0] grp_fu_794_p1;
reg   [72:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 73'd1;
#0 ap_reg_ioackin_INPUT_BUNDLE_ARREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = 1'b0;
end

sobel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r(input_r),
    .output_r(output_r)
);

sobel_INPUT_BUNDLE_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_BUNDLE_CACHE_VALUE ))
sobel_INPUT_BUNDLE_m_axi_U(
    .AWVALID(m_axi_INPUT_BUNDLE_AWVALID),
    .AWREADY(m_axi_INPUT_BUNDLE_AWREADY),
    .AWADDR(m_axi_INPUT_BUNDLE_AWADDR),
    .AWID(m_axi_INPUT_BUNDLE_AWID),
    .AWLEN(m_axi_INPUT_BUNDLE_AWLEN),
    .AWSIZE(m_axi_INPUT_BUNDLE_AWSIZE),
    .AWBURST(m_axi_INPUT_BUNDLE_AWBURST),
    .AWLOCK(m_axi_INPUT_BUNDLE_AWLOCK),
    .AWCACHE(m_axi_INPUT_BUNDLE_AWCACHE),
    .AWPROT(m_axi_INPUT_BUNDLE_AWPROT),
    .AWQOS(m_axi_INPUT_BUNDLE_AWQOS),
    .AWREGION(m_axi_INPUT_BUNDLE_AWREGION),
    .AWUSER(m_axi_INPUT_BUNDLE_AWUSER),
    .WVALID(m_axi_INPUT_BUNDLE_WVALID),
    .WREADY(m_axi_INPUT_BUNDLE_WREADY),
    .WDATA(m_axi_INPUT_BUNDLE_WDATA),
    .WSTRB(m_axi_INPUT_BUNDLE_WSTRB),
    .WLAST(m_axi_INPUT_BUNDLE_WLAST),
    .WID(m_axi_INPUT_BUNDLE_WID),
    .WUSER(m_axi_INPUT_BUNDLE_WUSER),
    .ARVALID(m_axi_INPUT_BUNDLE_ARVALID),
    .ARREADY(m_axi_INPUT_BUNDLE_ARREADY),
    .ARADDR(m_axi_INPUT_BUNDLE_ARADDR),
    .ARID(m_axi_INPUT_BUNDLE_ARID),
    .ARLEN(m_axi_INPUT_BUNDLE_ARLEN),
    .ARSIZE(m_axi_INPUT_BUNDLE_ARSIZE),
    .ARBURST(m_axi_INPUT_BUNDLE_ARBURST),
    .ARLOCK(m_axi_INPUT_BUNDLE_ARLOCK),
    .ARCACHE(m_axi_INPUT_BUNDLE_ARCACHE),
    .ARPROT(m_axi_INPUT_BUNDLE_ARPROT),
    .ARQOS(m_axi_INPUT_BUNDLE_ARQOS),
    .ARREGION(m_axi_INPUT_BUNDLE_ARREGION),
    .ARUSER(m_axi_INPUT_BUNDLE_ARUSER),
    .RVALID(m_axi_INPUT_BUNDLE_RVALID),
    .RREADY(m_axi_INPUT_BUNDLE_RREADY),
    .RDATA(m_axi_INPUT_BUNDLE_RDATA),
    .RLAST(m_axi_INPUT_BUNDLE_RLAST),
    .RID(m_axi_INPUT_BUNDLE_RID),
    .RUSER(m_axi_INPUT_BUNDLE_RUSER),
    .RRESP(m_axi_INPUT_BUNDLE_RRESP),
    .BVALID(m_axi_INPUT_BUNDLE_BVALID),
    .BREADY(m_axi_INPUT_BUNDLE_BREADY),
    .BRESP(m_axi_INPUT_BUNDLE_BRESP),
    .BID(m_axi_INPUT_BUNDLE_BID),
    .BUSER(m_axi_INPUT_BUNDLE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_BUNDLE_ARVALID),
    .I_ARREADY(INPUT_BUNDLE_ARREADY),
    .I_ARADDR(INPUT_BUNDLE_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUT_BUNDLE_RVALID),
    .I_RREADY(INPUT_BUNDLE_RREADY),
    .I_RDATA(INPUT_BUNDLE_RDATA),
    .I_RID(INPUT_BUNDLE_RID),
    .I_RUSER(INPUT_BUNDLE_RUSER),
    .I_RRESP(INPUT_BUNDLE_RRESP),
    .I_RLAST(INPUT_BUNDLE_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_BUNDLE_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_BUNDLE_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(INPUT_BUNDLE_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_BUNDLE_BRESP),
    .I_BID(INPUT_BUNDLE_BID),
    .I_BUSER(INPUT_BUNDLE_BUSER)
);

sobel_OUTPUT_BUNDLE_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE ))
sobel_OUTPUT_BUNDLE_m_axi_U(
    .AWVALID(m_axi_OUTPUT_BUNDLE_AWVALID),
    .AWREADY(m_axi_OUTPUT_BUNDLE_AWREADY),
    .AWADDR(m_axi_OUTPUT_BUNDLE_AWADDR),
    .AWID(m_axi_OUTPUT_BUNDLE_AWID),
    .AWLEN(m_axi_OUTPUT_BUNDLE_AWLEN),
    .AWSIZE(m_axi_OUTPUT_BUNDLE_AWSIZE),
    .AWBURST(m_axi_OUTPUT_BUNDLE_AWBURST),
    .AWLOCK(m_axi_OUTPUT_BUNDLE_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_BUNDLE_AWCACHE),
    .AWPROT(m_axi_OUTPUT_BUNDLE_AWPROT),
    .AWQOS(m_axi_OUTPUT_BUNDLE_AWQOS),
    .AWREGION(m_axi_OUTPUT_BUNDLE_AWREGION),
    .AWUSER(m_axi_OUTPUT_BUNDLE_AWUSER),
    .WVALID(m_axi_OUTPUT_BUNDLE_WVALID),
    .WREADY(m_axi_OUTPUT_BUNDLE_WREADY),
    .WDATA(m_axi_OUTPUT_BUNDLE_WDATA),
    .WSTRB(m_axi_OUTPUT_BUNDLE_WSTRB),
    .WLAST(m_axi_OUTPUT_BUNDLE_WLAST),
    .WID(m_axi_OUTPUT_BUNDLE_WID),
    .WUSER(m_axi_OUTPUT_BUNDLE_WUSER),
    .ARVALID(m_axi_OUTPUT_BUNDLE_ARVALID),
    .ARREADY(m_axi_OUTPUT_BUNDLE_ARREADY),
    .ARADDR(m_axi_OUTPUT_BUNDLE_ARADDR),
    .ARID(m_axi_OUTPUT_BUNDLE_ARID),
    .ARLEN(m_axi_OUTPUT_BUNDLE_ARLEN),
    .ARSIZE(m_axi_OUTPUT_BUNDLE_ARSIZE),
    .ARBURST(m_axi_OUTPUT_BUNDLE_ARBURST),
    .ARLOCK(m_axi_OUTPUT_BUNDLE_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_BUNDLE_ARCACHE),
    .ARPROT(m_axi_OUTPUT_BUNDLE_ARPROT),
    .ARQOS(m_axi_OUTPUT_BUNDLE_ARQOS),
    .ARREGION(m_axi_OUTPUT_BUNDLE_ARREGION),
    .ARUSER(m_axi_OUTPUT_BUNDLE_ARUSER),
    .RVALID(m_axi_OUTPUT_BUNDLE_RVALID),
    .RREADY(m_axi_OUTPUT_BUNDLE_RREADY),
    .RDATA(m_axi_OUTPUT_BUNDLE_RDATA),
    .RLAST(m_axi_OUTPUT_BUNDLE_RLAST),
    .RID(m_axi_OUTPUT_BUNDLE_RID),
    .RUSER(m_axi_OUTPUT_BUNDLE_RUSER),
    .RRESP(m_axi_OUTPUT_BUNDLE_RRESP),
    .BVALID(m_axi_OUTPUT_BUNDLE_BVALID),
    .BREADY(m_axi_OUTPUT_BUNDLE_BREADY),
    .BRESP(m_axi_OUTPUT_BUNDLE_BRESP),
    .BID(m_axi_OUTPUT_BUNDLE_BID),
    .BUSER(m_axi_OUTPUT_BUNDLE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_BUNDLE_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_BUNDLE_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_BUNDLE_RDATA),
    .I_RID(OUTPUT_BUNDLE_RID),
    .I_RUSER(OUTPUT_BUNDLE_RUSER),
    .I_RRESP(OUTPUT_BUNDLE_RRESP),
    .I_RLAST(OUTPUT_BUNDLE_RLAST),
    .I_AWVALID(OUTPUT_BUNDLE_AWVALID),
    .I_AWREADY(OUTPUT_BUNDLE_AWREADY),
    .I_AWADDR(reg_220),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUT_BUNDLE_WVALID),
    .I_WREADY(OUTPUT_BUNDLE_WREADY),
    .I_WDATA(OUTPUT_BUNDLE_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(OUTPUT_BUNDLE_BVALID),
    .I_BREADY(OUTPUT_BUNDLE_BREADY),
    .I_BRESP(OUTPUT_BUNDLE_BRESP),
    .I_BID(OUTPUT_BUNDLE_BID),
    .I_BUSER(OUTPUT_BUNDLE_BUSER)
);

sobel_uitodp_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_uitodp_32nsbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_190_p0),
    .ce(1'b1),
    .dout(grp_fu_190_p1)
);

sobel_dsqrt_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_dsqrt_64ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_25_reg_937),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

sobel_mul_mul_11sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
sobel_mul_mul_11sdEe_U2(
    .din0(tmp_24_fu_788_p0),
    .din1(tmp_24_fu_788_p1),
    .dout(tmp_24_fu_788_p2)
);

sobel_mac_muladd_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
sobel_mac_muladd_eOg_U3(
    .din0(grp_fu_794_p0),
    .din1(grp_fu_794_p1),
    .din2(tmp_24_reg_922),
    .dout(grp_fu_794_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == INPUT_BUNDLE_RVALID) | (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY))) | ((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state11) & (INPUT_BUNDLE_RVALID == 1'b1) & (1'b1 == INPUT_BUNDLE_ARREADY)))) begin
            ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state61) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state68) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state61) & (1'b1 == OUTPUT_BUNDLE_AWREADY)) | ((1'b1 == ap_CS_fsm_state68) & (1'b1 == OUTPUT_BUNDLE_AWREADY)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state62) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state69) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state62) & (1'b1 == OUTPUT_BUNDLE_WREADY)) | ((1'b1 == ap_CS_fsm_state69) & (1'b1 == OUTPUT_BUNDLE_WREADY)))) begin
            ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_225_p2))) begin
        i_reg_178 <= 10'd1;
    end else if (((1'b1 == ap_CS_fsm_state67) & ~(((icmp_reg_963 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_963 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID))))) begin
        i_reg_178 <= i_1_fu_782_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_6_fu_261_p2))) begin
        j_reg_166 <= j_1_fu_480_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_166 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_6_fu_261_p2))) begin
        INPUT_BUNDLE_addr_1_reg_850 <= input2_sum5_fu_322_p2;
        INPUT_BUNDLE_addr_2_reg_856 <= input2_sum6_fu_343_p2;
        INPUT_BUNDLE_addr_3_reg_862 <= input2_sum7_fu_364_p2;
        INPUT_BUNDLE_addr_4_reg_868 <= input2_sum8_fu_384_p2;
        INPUT_BUNDLE_addr_5_reg_874 <= input2_sum9_fu_405_p2;
        INPUT_BUNDLE_addr_6_reg_880 <= input2_sum1_fu_437_p2;
        INPUT_BUNDLE_addr_7_reg_886 <= input2_sum2_fu_469_p2;
        INPUT_BUNDLE_addr_reg_844 <= input2_sum_fu_293_p2;
        tmp_s_reg_839 <= tmp_s_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
        convulution_horizont_reg_907 <= convulution_horizont_fu_571_p2;
        tmp_19_reg_912 <= tmp_19_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        convulution_vertical_reg_917 <= convulution_vertical_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        icmp_reg_963 <= icmp_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_read_reg_806 <= input_r;
        output_read_reg_801 <= output_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        isNeg_reg_953 <= sh_assign_fu_662_p2[32'd11];
        sh_assign_1_reg_958 <= sh_assign_1_fu_685_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        loc_V_1_reg_948 <= loc_V_1_fu_655_p1;
        loc_V_reg_942 <= {{p_Val2_s_fu_641_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        p_reg_927 <= grp_fu_794_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == INPUT_BUNDLE_RVALID) | (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY))) | ((1'b1 == ap_CS_fsm_state14) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (INPUT_BUNDLE_RVALID == 1'b1)))) begin
        reg_208 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (INPUT_BUNDLE_RVALID == 1'b1)))) begin
        reg_212 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (INPUT_BUNDLE_RVALID == 1'b1)))) begin
        reg_216 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state60) & (1'd0 == icmp_fu_772_p2)) | ((1'b1 == ap_CS_fsm_state60) & (1'd1 == icmp_fu_772_p2)))) begin
        reg_220 <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
        sum1_reg_897 <= sum1_fu_516_p2;
        sum5_neg_reg_902 <= sum5_neg_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_24_reg_922 <= tmp_24_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_25_reg_937 <= grp_fu_190_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'd1 == icmp_fu_772_p2))) begin
        tmp_31_reg_967 <= tmp_31_fu_778_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_225_p2))) begin
        tmp_3_cast_reg_821[19 : 10] <= tmp_3_cast_fu_245_p1[19 : 10];
        tmp_4_reg_826[19 : 10] <= tmp_4_fu_249_p2[19 : 10];
        tmp_5_reg_831[19 : 10] <= tmp_5_fu_255_p2[19 : 10];
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) begin
        if (((1'b1 == ap_CS_fsm_state11) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_7_reg_886;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_6_reg_880;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_5_reg_874;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_4_reg_868;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_3_reg_862;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_2_reg_856;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_1_reg_850;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_reg_844;
        end else begin
            INPUT_BUNDLE_ARADDR = 'bx;
        end
    end else begin
        INPUT_BUNDLE_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_CS_fsm_state11) & (INPUT_BUNDLE_RVALID == 1'b1) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)))) begin
        INPUT_BUNDLE_ARVALID = 1'b1;
    end else begin
        INPUT_BUNDLE_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == INPUT_BUNDLE_RVALID) | (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY))) | ((1'b1 == ap_CS_fsm_state14) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (INPUT_BUNDLE_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (INPUT_BUNDLE_RVALID == 1'b1)))) begin
        INPUT_BUNDLE_RREADY = 1'b1;
    end else begin
        INPUT_BUNDLE_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        INPUT_BUNDLE_blk_n_AR = m_axi_INPUT_BUNDLE_ARREADY;
    end else begin
        INPUT_BUNDLE_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18))) begin
        INPUT_BUNDLE_blk_n_R = m_axi_INPUT_BUNDLE_RVALID;
    end else begin
        INPUT_BUNDLE_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) | ((1'b1 == ap_CS_fsm_state68) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)))) begin
        OUTPUT_BUNDLE_AWVALID = 1'b1;
    end else begin
        OUTPUT_BUNDLE_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state67) & (icmp_reg_963 == 1'd0) & ~(((icmp_reg_963 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_963 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID)))) | ((1'b1 == ap_CS_fsm_state67) & (icmp_reg_963 == 1'd1) & ~(((icmp_reg_963 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_963 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID)))))) begin
        OUTPUT_BUNDLE_BREADY = 1'b1;
    end else begin
        OUTPUT_BUNDLE_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state69)) begin
            OUTPUT_BUNDLE_WDATA = tmp_31_reg_967;
        end else if ((1'b1 == ap_CS_fsm_state62)) begin
            OUTPUT_BUNDLE_WDATA = 8'd255;
        end else begin
            OUTPUT_BUNDLE_WDATA = 'bx;
        end
    end else begin
        OUTPUT_BUNDLE_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state62) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) | ((1'b1 == ap_CS_fsm_state69) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)))) begin
        OUTPUT_BUNDLE_WVALID = 1'b1;
    end else begin
        OUTPUT_BUNDLE_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state68))) begin
        OUTPUT_BUNDLE_blk_n_AW = m_axi_OUTPUT_BUNDLE_AWREADY;
    end else begin
        OUTPUT_BUNDLE_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state67) & (icmp_reg_963 == 1'd0)) | ((1'b1 == ap_CS_fsm_state67) & (icmp_reg_963 == 1'd1)))) begin
        OUTPUT_BUNDLE_blk_n_B = m_axi_OUTPUT_BUNDLE_BVALID;
    end else begin
        OUTPUT_BUNDLE_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state69))) begin
        OUTPUT_BUNDLE_blk_n_W = m_axi_OUTPUT_BUNDLE_WREADY;
    end else begin
        OUTPUT_BUNDLE_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_225_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_225_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) begin
        ap_sig_ioackin_INPUT_BUNDLE_ARREADY = INPUT_BUNDLE_ARREADY;
    end else begin
        ap_sig_ioackin_INPUT_BUNDLE_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) begin
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = OUTPUT_BUNDLE_AWREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) begin
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = OUTPUT_BUNDLE_WREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_225_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_6_fu_261_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (ap_sig_ioackin_INPUT_BUNDLE_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == INPUT_BUNDLE_RVALID) | (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (INPUT_BUNDLE_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (1'd1 == icmp_fu_772_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & ~(((icmp_reg_963 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_963 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID))))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state67 = (((icmp_reg_963 == 1'd0) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((icmp_reg_963 == 1'd1) & (1'b0 == OUTPUT_BUNDLE_BVALID)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign convulution_horizont_fu_571_p2 = (tmp3_cast_fu_567_p1 + tmp_10_fu_555_p2);

assign convulution_vertical_fu_625_p2 = (tmp_20_fu_619_p2 + tmp_27_cast_fu_612_p1);

assign grp_fu_190_p0 = $unsigned(p_reg_927);

assign grp_fu_198_p2 = (tmp_9_fu_693_p1 + output_read_reg_801);

assign grp_fu_794_p0 = tmp_21_fu_634_p1;

assign grp_fu_794_p1 = tmp_21_fu_634_p1;

assign i_1_fu_782_p2 = (i_reg_178 + 10'd1);

assign icmp_fu_772_p2 = ((tmp_30_fu_762_p4 == 2'd0) ? 1'b1 : 1'b0);

assign input2_sum1_fu_437_p2 = (tmp_13_fu_433_p1 + input_read_reg_806);

assign input2_sum2_fu_469_p2 = (tmp_17_fu_465_p1 + input_read_reg_806);

assign input2_sum5_fu_322_p2 = (sum4_cast_fu_318_p1 + input_read_reg_806);

assign input2_sum6_fu_343_p2 = (sum6_cast_fu_339_p1 + input_read_reg_806);

assign input2_sum7_fu_364_p2 = ($signed(sum8_cast_fu_360_p1) + $signed(input_read_reg_806));

assign input2_sum8_fu_384_p2 = (sum3_cast_fu_380_p1 + input_read_reg_806);

assign input2_sum9_fu_405_p2 = (sum5_cast_fu_401_p1 + input_read_reg_806);

assign input2_sum_fu_293_p2 = ($signed(sum2_cast_fu_289_p1) + $signed(input_read_reg_806));

assign isNeg_fu_668_p3 = sh_assign_fu_662_p2[32'd11];

assign j_1_fu_480_p2 = (j_reg_166 + 10'd1);

assign loc_V_1_fu_655_p1 = p_Val2_s_fu_641_p1[51:0];

assign p_Val2_s_fu_641_p1 = grp_fu_193_p2;

assign sh_assign_1_cast_fu_710_p1 = $signed(sh_assign_1_reg_958);

assign sh_assign_1_fu_685_p3 = ((isNeg_fu_668_p3[0:0] === 1'b1) ? tmp_39_i_i_i_cast_fu_681_p1 : sh_assign_fu_662_p2);

assign sh_assign_fu_662_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast4_fu_659_p1));

assign sum1_cast_fu_552_p1 = sum1_reg_897;

assign sum1_fu_516_p2 = (tmp2_cast_fu_512_p1 + tmp_12_cast_fu_498_p1);

assign sum2_cast_fu_289_p1 = $signed(sum2_fu_283_p2);

assign sum2_fu_283_p2 = ($signed(21'd2096127) + $signed(tmp_9_cast_fu_279_p1));

assign sum3_cast_fu_380_p1 = sum3_fu_375_p2;

assign sum3_fu_375_p2 = (tmp_3_cast_reg_821 + tmp_8_cast5_fu_267_p1);

assign sum4_cast_fu_318_p1 = sum4_fu_310_p3;

assign sum4_fu_310_p3 = {{j_reg_166}, {tmp1_fu_304_p2}};

assign sum5_cast_fu_401_p1 = sum5_fu_395_p2;

assign sum5_fu_395_p2 = (21'd1025 + tmp_9_cast_fu_279_p1);

assign sum5_neg_cast_fu_577_p1 = $signed(sum5_neg_reg_902);

assign sum5_neg_fu_522_p2 = (tmp_7_cast_fu_486_p1 - tmp_13_cast_fu_502_p1);

assign sum6_cast_fu_339_p1 = sum6_fu_333_p2;

assign sum6_fu_333_p2 = (21'd1023 + tmp_9_cast_fu_279_p1);

assign sum6_neg_fu_580_p2 = ($signed(sum5_neg_cast_fu_577_p1) + $signed(tmp_14_cast_fu_532_p1));

assign sum8_cast_fu_360_p1 = $signed(sum8_fu_354_p2);

assign sum8_fu_354_p2 = ($signed(21'd2096129) + $signed(tmp_9_cast_fu_279_p1));

assign tmp1_fu_304_p2 = ($signed(10'd1023) + $signed(i_reg_178));

assign tmp2_cast_fu_512_p1 = tmp2_fu_506_p2;

assign tmp2_fu_506_p2 = (tmp_7_cast_fu_486_p1 + tmp_13_cast_fu_502_p1);

assign tmp3_cast_fu_567_p1 = tmp3_fu_561_p2;

assign tmp3_fu_561_p2 = (tmp_16_cast_fu_544_p1 + tmp_17_cast_fu_548_p1);

assign tmp_10_fu_555_p2 = (tmp_7_fu_528_p1 - sum1_cast_fu_552_p1);

assign tmp_11_fu_416_p4 = {{tmp_4_reg_826[19:10]}};

assign tmp_12_cast_fu_498_p1 = tmp_1_fu_490_p3;

assign tmp_12_fu_425_p3 = {{tmp_11_fu_416_p4}, {i_reg_178}};

assign tmp_13_cast_fu_502_p1 = reg_216;

assign tmp_13_fu_433_p1 = tmp_12_fu_425_p3;

assign tmp_14_cast_fu_532_p1 = reg_208;

assign tmp_14_fu_592_p3 = {{reg_208}, {1'd0}};

assign tmp_15_fu_448_p4 = {{tmp_5_reg_831[19:10]}};

assign tmp_16_cast_fu_544_p1 = tmp_8_fu_536_p3;

assign tmp_16_fu_457_p3 = {{tmp_15_fu_448_p4}, {i_reg_178}};

assign tmp_17_cast_fu_548_p1 = reg_216;

assign tmp_17_fu_465_p1 = tmp_16_fu_457_p3;

assign tmp_18_fu_604_p3 = {{reg_212}, {1'd0}};

assign tmp_19_fu_586_p2 = (sum6_neg_fu_580_p2 - tmp_17_cast_fu_548_p1);

assign tmp_1_fu_490_p3 = {{reg_212}, {1'd0}};

assign tmp_20_fu_619_p2 = ($signed(tmp_28_cast_fu_616_p1) - $signed(tmp_23_cast_fu_600_p1));

assign tmp_21_fu_634_p1 = $signed(convulution_horizont_reg_907);

assign tmp_23_cast_fu_600_p1 = tmp_14_fu_592_p3;

assign tmp_23_fu_631_p1 = $signed(convulution_vertical_reg_917);

assign tmp_24_fu_788_p0 = tmp_23_fu_631_p1;

assign tmp_24_fu_788_p1 = tmp_23_fu_631_p1;

assign tmp_27_cast_fu_612_p1 = tmp_18_fu_604_p3;

assign tmp_27_fu_745_p4 = {{tmp_42_i_i_i_fu_727_p2[120:53]}};

assign tmp_28_cast_fu_616_p1 = $signed(tmp_19_reg_912);

assign tmp_28_fu_755_p3 = ((isNeg_reg_953[0:0] === 1'b1) ? tmp_29_cast_fu_741_p1 : tmp_27_fu_745_p4);

assign tmp_29_cast_fu_741_p1 = tmp_29_fu_733_p3;

assign tmp_29_fu_733_p3 = tmp_41_i_i_i_fu_721_p2[32'd53];

assign tmp_2_fu_231_p3 = {{j_reg_166}, {10'd0}};

assign tmp_30_fu_762_p4 = {{tmp_28_fu_755_p3[9:8]}};

assign tmp_31_fu_778_p1 = tmp_28_fu_755_p3[7:0];

assign tmp_39_i_i_i_cast_fu_681_p1 = $signed(tmp_39_i_i_i_fu_676_p2);

assign tmp_39_i_i_i_fu_676_p2 = (11'd1023 - loc_V_reg_942);

assign tmp_3_cast_fu_245_p1 = tmp_3_fu_239_p2;

assign tmp_3_fu_239_p2 = (tmp_2_fu_231_p3 | 20'd1);

assign tmp_40_i_i_i_cast_fu_717_p1 = $unsigned(sh_assign_1_cast_fu_710_p1);

assign tmp_40_i_i_i_fu_713_p1 = $unsigned(sh_assign_1_cast_fu_710_p1);

assign tmp_41_i_i_i_fu_721_p2 = tmp_i_i_i_fu_697_p4 >> tmp_40_i_i_i_cast_fu_717_p1;

assign tmp_42_i_i_i_fu_727_p2 = tmp_i_i_i_cast_fu_706_p1 << tmp_40_i_i_i_fu_713_p1;

assign tmp_4_fu_249_p2 = (tmp_2_fu_231_p3 + 20'd1024);

assign tmp_5_fu_255_p2 = ($signed(tmp_2_fu_231_p3) + $signed(20'd1047552));

assign tmp_6_fu_261_p2 = ((i_reg_178 == 10'd1023) ? 1'b1 : 1'b0);

assign tmp_7_cast_fu_486_p1 = reg_208;

assign tmp_7_fu_528_p1 = reg_208;

assign tmp_8_cast5_fu_267_p1 = i_reg_178;

assign tmp_8_fu_536_p3 = {{reg_212}, {1'd0}};

assign tmp_9_cast_fu_279_p1 = tmp_s_fu_271_p3;

assign tmp_9_fu_693_p1 = tmp_s_reg_839;

assign tmp_fu_225_p2 = ((j_reg_166 == 10'd1023) ? 1'b1 : 1'b0);

assign tmp_i_i_i_cast_fu_706_p1 = tmp_i_i_i_fu_697_p4;

assign tmp_i_i_i_fu_697_p4 = {{{{1'd1}, {loc_V_1_reg_948}}}, {1'd0}};

assign tmp_i_i_i_i_cast4_fu_659_p1 = loc_V_reg_942;

assign tmp_s_fu_271_p3 = {{j_reg_166}, {i_reg_178}};

always @ (posedge ap_clk) begin
    tmp_3_cast_reg_821[9:0] <= 10'b0000000001;
    tmp_3_cast_reg_821[20] <= 1'b0;
    tmp_4_reg_826[9:0] <= 10'b0000000000;
    tmp_5_reg_831[9:0] <= 10'b0000000000;
end

endmodule //sobel
