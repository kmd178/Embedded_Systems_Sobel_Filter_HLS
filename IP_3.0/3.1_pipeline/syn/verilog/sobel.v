// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=8355931,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=7014,HLS_SYN_LUT=7970}" *)

module sobel (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_BUNDLE_AWVALID,
        m_axi_INPUT_BUNDLE_AWREADY,
        m_axi_INPUT_BUNDLE_AWADDR,
        m_axi_INPUT_BUNDLE_AWID,
        m_axi_INPUT_BUNDLE_AWLEN,
        m_axi_INPUT_BUNDLE_AWSIZE,
        m_axi_INPUT_BUNDLE_AWBURST,
        m_axi_INPUT_BUNDLE_AWLOCK,
        m_axi_INPUT_BUNDLE_AWCACHE,
        m_axi_INPUT_BUNDLE_AWPROT,
        m_axi_INPUT_BUNDLE_AWQOS,
        m_axi_INPUT_BUNDLE_AWREGION,
        m_axi_INPUT_BUNDLE_AWUSER,
        m_axi_INPUT_BUNDLE_WVALID,
        m_axi_INPUT_BUNDLE_WREADY,
        m_axi_INPUT_BUNDLE_WDATA,
        m_axi_INPUT_BUNDLE_WSTRB,
        m_axi_INPUT_BUNDLE_WLAST,
        m_axi_INPUT_BUNDLE_WID,
        m_axi_INPUT_BUNDLE_WUSER,
        m_axi_INPUT_BUNDLE_ARVALID,
        m_axi_INPUT_BUNDLE_ARREADY,
        m_axi_INPUT_BUNDLE_ARADDR,
        m_axi_INPUT_BUNDLE_ARID,
        m_axi_INPUT_BUNDLE_ARLEN,
        m_axi_INPUT_BUNDLE_ARSIZE,
        m_axi_INPUT_BUNDLE_ARBURST,
        m_axi_INPUT_BUNDLE_ARLOCK,
        m_axi_INPUT_BUNDLE_ARCACHE,
        m_axi_INPUT_BUNDLE_ARPROT,
        m_axi_INPUT_BUNDLE_ARQOS,
        m_axi_INPUT_BUNDLE_ARREGION,
        m_axi_INPUT_BUNDLE_ARUSER,
        m_axi_INPUT_BUNDLE_RVALID,
        m_axi_INPUT_BUNDLE_RREADY,
        m_axi_INPUT_BUNDLE_RDATA,
        m_axi_INPUT_BUNDLE_RLAST,
        m_axi_INPUT_BUNDLE_RID,
        m_axi_INPUT_BUNDLE_RUSER,
        m_axi_INPUT_BUNDLE_RRESP,
        m_axi_INPUT_BUNDLE_BVALID,
        m_axi_INPUT_BUNDLE_BREADY,
        m_axi_INPUT_BUNDLE_BRESP,
        m_axi_INPUT_BUNDLE_BID,
        m_axi_INPUT_BUNDLE_BUSER,
        m_axi_OUTPUT_BUNDLE_AWVALID,
        m_axi_OUTPUT_BUNDLE_AWREADY,
        m_axi_OUTPUT_BUNDLE_AWADDR,
        m_axi_OUTPUT_BUNDLE_AWID,
        m_axi_OUTPUT_BUNDLE_AWLEN,
        m_axi_OUTPUT_BUNDLE_AWSIZE,
        m_axi_OUTPUT_BUNDLE_AWBURST,
        m_axi_OUTPUT_BUNDLE_AWLOCK,
        m_axi_OUTPUT_BUNDLE_AWCACHE,
        m_axi_OUTPUT_BUNDLE_AWPROT,
        m_axi_OUTPUT_BUNDLE_AWQOS,
        m_axi_OUTPUT_BUNDLE_AWREGION,
        m_axi_OUTPUT_BUNDLE_AWUSER,
        m_axi_OUTPUT_BUNDLE_WVALID,
        m_axi_OUTPUT_BUNDLE_WREADY,
        m_axi_OUTPUT_BUNDLE_WDATA,
        m_axi_OUTPUT_BUNDLE_WSTRB,
        m_axi_OUTPUT_BUNDLE_WLAST,
        m_axi_OUTPUT_BUNDLE_WID,
        m_axi_OUTPUT_BUNDLE_WUSER,
        m_axi_OUTPUT_BUNDLE_ARVALID,
        m_axi_OUTPUT_BUNDLE_ARREADY,
        m_axi_OUTPUT_BUNDLE_ARADDR,
        m_axi_OUTPUT_BUNDLE_ARID,
        m_axi_OUTPUT_BUNDLE_ARLEN,
        m_axi_OUTPUT_BUNDLE_ARSIZE,
        m_axi_OUTPUT_BUNDLE_ARBURST,
        m_axi_OUTPUT_BUNDLE_ARLOCK,
        m_axi_OUTPUT_BUNDLE_ARCACHE,
        m_axi_OUTPUT_BUNDLE_ARPROT,
        m_axi_OUTPUT_BUNDLE_ARQOS,
        m_axi_OUTPUT_BUNDLE_ARREGION,
        m_axi_OUTPUT_BUNDLE_ARUSER,
        m_axi_OUTPUT_BUNDLE_RVALID,
        m_axi_OUTPUT_BUNDLE_RREADY,
        m_axi_OUTPUT_BUNDLE_RDATA,
        m_axi_OUTPUT_BUNDLE_RLAST,
        m_axi_OUTPUT_BUNDLE_RID,
        m_axi_OUTPUT_BUNDLE_RUSER,
        m_axi_OUTPUT_BUNDLE_RRESP,
        m_axi_OUTPUT_BUNDLE_BVALID,
        m_axi_OUTPUT_BUNDLE_BREADY,
        m_axi_OUTPUT_BUNDLE_BRESP,
        m_axi_OUTPUT_BUNDLE_BID,
        m_axi_OUTPUT_BUNDLE_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state68 = 10'd512;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_BUNDLE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_BUNDLE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_BUNDLE_AWVALID;
input   m_axi_INPUT_BUNDLE_AWREADY;
output  [C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWADDR;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWID;
output  [7:0] m_axi_INPUT_BUNDLE_AWLEN;
output  [2:0] m_axi_INPUT_BUNDLE_AWSIZE;
output  [1:0] m_axi_INPUT_BUNDLE_AWBURST;
output  [1:0] m_axi_INPUT_BUNDLE_AWLOCK;
output  [3:0] m_axi_INPUT_BUNDLE_AWCACHE;
output  [2:0] m_axi_INPUT_BUNDLE_AWPROT;
output  [3:0] m_axi_INPUT_BUNDLE_AWQOS;
output  [3:0] m_axi_INPUT_BUNDLE_AWREGION;
output  [C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_AWUSER;
output   m_axi_INPUT_BUNDLE_WVALID;
input   m_axi_INPUT_BUNDLE_WREADY;
output  [C_M_AXI_INPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WDATA;
output  [C_M_AXI_INPUT_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WSTRB;
output   m_axi_INPUT_BUNDLE_WLAST;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WID;
output  [C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_WUSER;
output   m_axi_INPUT_BUNDLE_ARVALID;
input   m_axi_INPUT_BUNDLE_ARREADY;
output  [C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARADDR;
output  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARID;
output  [7:0] m_axi_INPUT_BUNDLE_ARLEN;
output  [2:0] m_axi_INPUT_BUNDLE_ARSIZE;
output  [1:0] m_axi_INPUT_BUNDLE_ARBURST;
output  [1:0] m_axi_INPUT_BUNDLE_ARLOCK;
output  [3:0] m_axi_INPUT_BUNDLE_ARCACHE;
output  [2:0] m_axi_INPUT_BUNDLE_ARPROT;
output  [3:0] m_axi_INPUT_BUNDLE_ARQOS;
output  [3:0] m_axi_INPUT_BUNDLE_ARREGION;
output  [C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_ARUSER;
input   m_axi_INPUT_BUNDLE_RVALID;
output   m_axi_INPUT_BUNDLE_RREADY;
input  [C_M_AXI_INPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RDATA;
input   m_axi_INPUT_BUNDLE_RLAST;
input  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RID;
input  [C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_RUSER;
input  [1:0] m_axi_INPUT_BUNDLE_RRESP;
input   m_axi_INPUT_BUNDLE_BVALID;
output   m_axi_INPUT_BUNDLE_BREADY;
input  [1:0] m_axi_INPUT_BUNDLE_BRESP;
input  [C_M_AXI_INPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_INPUT_BUNDLE_BID;
input  [C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH - 1:0] m_axi_INPUT_BUNDLE_BUSER;
output   m_axi_OUTPUT_BUNDLE_AWVALID;
input   m_axi_OUTPUT_BUNDLE_AWREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWADDR;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWID;
output  [7:0] m_axi_OUTPUT_BUNDLE_AWLEN;
output  [2:0] m_axi_OUTPUT_BUNDLE_AWSIZE;
output  [1:0] m_axi_OUTPUT_BUNDLE_AWBURST;
output  [1:0] m_axi_OUTPUT_BUNDLE_AWLOCK;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWCACHE;
output  [2:0] m_axi_OUTPUT_BUNDLE_AWPROT;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWQOS;
output  [3:0] m_axi_OUTPUT_BUNDLE_AWREGION;
output  [C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_AWUSER;
output   m_axi_OUTPUT_BUNDLE_WVALID;
input   m_axi_OUTPUT_BUNDLE_WREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WDATA;
output  [C_M_AXI_OUTPUT_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WSTRB;
output   m_axi_OUTPUT_BUNDLE_WLAST;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WID;
output  [C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_WUSER;
output   m_axi_OUTPUT_BUNDLE_ARVALID;
input   m_axi_OUTPUT_BUNDLE_ARREADY;
output  [C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARADDR;
output  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARID;
output  [7:0] m_axi_OUTPUT_BUNDLE_ARLEN;
output  [2:0] m_axi_OUTPUT_BUNDLE_ARSIZE;
output  [1:0] m_axi_OUTPUT_BUNDLE_ARBURST;
output  [1:0] m_axi_OUTPUT_BUNDLE_ARLOCK;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARCACHE;
output  [2:0] m_axi_OUTPUT_BUNDLE_ARPROT;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARQOS;
output  [3:0] m_axi_OUTPUT_BUNDLE_ARREGION;
output  [C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_ARUSER;
input   m_axi_OUTPUT_BUNDLE_RVALID;
output   m_axi_OUTPUT_BUNDLE_RREADY;
input  [C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RDATA;
input   m_axi_OUTPUT_BUNDLE_RLAST;
input  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RID;
input  [C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_RUSER;
input  [1:0] m_axi_OUTPUT_BUNDLE_RRESP;
input   m_axi_OUTPUT_BUNDLE_BVALID;
output   m_axi_OUTPUT_BUNDLE_BREADY;
input  [1:0] m_axi_OUTPUT_BUNDLE_BRESP;
input  [C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_BID;
input  [C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH - 1:0] m_axi_OUTPUT_BUNDLE_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] output_r;
reg    INPUT_BUNDLE_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage2_flag00000000;
reg   [0:0] exitcond_flatten_reg_896;
reg    INPUT_BUNDLE_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_flag00000000;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_896;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_flag00000000;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_flag00000000;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_flag00000000;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_flag00000000;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_flag00000000;
reg    ap_enable_reg_pp0_iter2;
reg    OUTPUT_BUNDLE_blk_n_AW;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] tmp_30_reg_1060;
reg   [0:0] ap_reg_pp0_iter6_tmp_30_reg_1060;
reg    OUTPUT_BUNDLE_blk_n_W;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_896;
reg    OUTPUT_BUNDLE_blk_n_B;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] tmp_32_reg_1064;
reg   [0:0] ap_reg_pp0_iter8_tmp_32_reg_1064;
wire    INPUT_BUNDLE_AWREADY;
wire    INPUT_BUNDLE_WREADY;
reg    INPUT_BUNDLE_ARVALID;
wire    INPUT_BUNDLE_ARREADY;
reg   [31:0] INPUT_BUNDLE_ARADDR;
wire    INPUT_BUNDLE_RVALID;
reg    INPUT_BUNDLE_RREADY;
wire   [7:0] INPUT_BUNDLE_RDATA;
wire    INPUT_BUNDLE_RLAST;
wire   [0:0] INPUT_BUNDLE_RID;
wire   [0:0] INPUT_BUNDLE_RUSER;
wire   [1:0] INPUT_BUNDLE_RRESP;
wire    INPUT_BUNDLE_BVALID;
wire   [1:0] INPUT_BUNDLE_BRESP;
wire   [0:0] INPUT_BUNDLE_BID;
wire   [0:0] INPUT_BUNDLE_BUSER;
reg    OUTPUT_BUNDLE_AWVALID;
wire    OUTPUT_BUNDLE_AWREADY;
reg    OUTPUT_BUNDLE_WVALID;
wire    OUTPUT_BUNDLE_WREADY;
wire    OUTPUT_BUNDLE_ARREADY;
wire    OUTPUT_BUNDLE_RVALID;
wire   [7:0] OUTPUT_BUNDLE_RDATA;
wire    OUTPUT_BUNDLE_RLAST;
wire   [0:0] OUTPUT_BUNDLE_RID;
wire   [0:0] OUTPUT_BUNDLE_RUSER;
wire   [1:0] OUTPUT_BUNDLE_RRESP;
wire    OUTPUT_BUNDLE_BVALID;
reg    OUTPUT_BUNDLE_BREADY;
wire   [1:0] OUTPUT_BUNDLE_BRESP;
wire   [0:0] OUTPUT_BUNDLE_BID;
wire   [0:0] OUTPUT_BUNDLE_BUSER;
reg   [19:0] indvar_flatten_reg_187;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
reg    ap_sig_ioackin_INPUT_BUNDLE_ARREADY;
reg    ap_block_state10_io;
reg    ap_block_state18_pp0_stage0_iter2;
wire    ap_block_state26_pp0_stage0_iter3;
wire    ap_block_state34_pp0_stage0_iter4;
wire    ap_block_state42_pp0_stage0_iter5;
wire    ap_block_state50_pp0_stage0_iter6;
wire    ap_block_state58_pp0_stage0_iter7;
wire    ap_block_state66_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_flag00011001;
reg   [9:0] j_reg_199;
reg   [9:0] i_reg_210;
reg   [7:0] reg_229;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state11_pp0_stage1_iter1;
reg    ap_block_state11_io;
wire    ap_block_state19_pp0_stage1_iter2;
wire    ap_block_state27_pp0_stage1_iter3;
wire    ap_block_state35_pp0_stage1_iter4;
wire    ap_block_state43_pp0_stage1_iter5;
wire    ap_block_state51_pp0_stage1_iter6;
wire    ap_block_state59_pp0_stage1_iter7;
reg    ap_block_state67_pp0_stage1_iter8;
reg    ap_block_pp0_stage1_flag00011001;
reg   [31:0] output_read_reg_879;
reg   [31:0] input_read_reg_884;
wire   [0:0] exitcond_flatten_fu_233_p2;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_896;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_896;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_896;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_896;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_896;
wire   [19:0] indvar_flatten_next_fu_239_p2;
reg   [19:0] indvar_flatten_next_reg_900;
wire   [9:0] i_mid2_fu_251_p3;
reg   [9:0] i_mid2_reg_906;
wire   [9:0] tmp_3_cast_mid2_v_v_s_fu_265_p3;
reg   [9:0] tmp_3_cast_mid2_v_v_s_reg_916;
reg   [31:0] OUTPUT_BUNDLE_addr_reg_924;
reg   [31:0] ap_reg_pp0_iter1_OUTPUT_BUNDLE_addr_reg_924;
reg   [31:0] ap_reg_pp0_iter2_OUTPUT_BUNDLE_addr_reg_924;
reg   [31:0] ap_reg_pp0_iter3_OUTPUT_BUNDLE_addr_reg_924;
reg   [31:0] ap_reg_pp0_iter4_OUTPUT_BUNDLE_addr_reg_924;
reg   [31:0] ap_reg_pp0_iter5_OUTPUT_BUNDLE_addr_reg_924;
reg   [31:0] ap_reg_pp0_iter6_OUTPUT_BUNDLE_addr_reg_924;
reg   [31:0] ap_reg_pp0_iter7_OUTPUT_BUNDLE_addr_reg_924;
wire   [20:0] tmp_9_cast_fu_324_p1;
reg   [20:0] tmp_9_cast_reg_929;
reg   [31:0] INPUT_BUNDLE_addr_reg_936;
reg   [31:0] INPUT_BUNDLE_addr_1_reg_942;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
reg    ap_block_state12_pp0_stage2_iter1;
wire    ap_block_state20_pp0_stage2_iter2;
wire    ap_block_state28_pp0_stage2_iter3;
wire    ap_block_state36_pp0_stage2_iter4;
wire    ap_block_state44_pp0_stage2_iter5;
wire    ap_block_state52_pp0_stage2_iter6;
wire    ap_block_state60_pp0_stage2_iter7;
reg    ap_block_pp0_stage2_flag00011001;
reg   [31:0] INPUT_BUNDLE_addr_2_reg_948;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
reg    ap_block_state13_pp0_stage3_iter1;
wire    ap_block_state21_pp0_stage3_iter2;
wire    ap_block_state29_pp0_stage3_iter3;
wire    ap_block_state37_pp0_stage3_iter4;
wire    ap_block_state45_pp0_stage3_iter5;
wire    ap_block_state53_pp0_stage3_iter6;
wire    ap_block_state61_pp0_stage3_iter7;
reg    ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY;
reg    ap_block_state61_io;
reg    ap_block_pp0_stage3_flag00011001;
reg   [31:0] INPUT_BUNDLE_addr_3_reg_954;
reg   [31:0] INPUT_BUNDLE_addr_5_reg_960;
reg   [31:0] INPUT_BUNDLE_addr_4_reg_966;
wire    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_state7_io;
reg    ap_block_state15_pp0_stage5_iter1;
wire    ap_block_state23_pp0_stage5_iter2;
wire    ap_block_state31_pp0_stage5_iter3;
wire    ap_block_state39_pp0_stage5_iter4;
wire    ap_block_state47_pp0_stage5_iter5;
wire    ap_block_state55_pp0_stage5_iter6;
wire    ap_block_state63_pp0_stage5_iter7;
reg    ap_block_pp0_stage5_flag00011001;
reg   [31:0] INPUT_BUNDLE_addr_6_reg_972;
reg   [31:0] INPUT_BUNDLE_addr_7_reg_978;
wire   [9:0] i_1_fu_558_p2;
reg   [9:0] i_1_reg_984;
reg   [7:0] INPUT_BUNDLE_addr_1_s_reg_989;
reg   [7:0] INPUT_BUNDLE_addr_2_s_reg_994;
reg   [7:0] INPUT_BUNDLE_addr_3_s_reg_999;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_state6_io;
reg    ap_block_state14_pp0_stage4_iter1;
wire    ap_block_state22_pp0_stage4_iter2;
wire    ap_block_state30_pp0_stage4_iter3;
wire    ap_block_state38_pp0_stage4_iter4;
wire    ap_block_state46_pp0_stage4_iter5;
wire    ap_block_state54_pp0_stage4_iter6;
wire    ap_block_state62_pp0_stage4_iter7;
reg    ap_sig_ioackin_OUTPUT_BUNDLE_WREADY;
reg    ap_block_state62_io;
reg    ap_block_pp0_stage4_flag00011001;
reg   [7:0] INPUT_BUNDLE_addr_4_s_reg_1005;
reg   [7:0] INPUT_BUNDLE_addr_5_s_reg_1010;
wire    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_state8_io;
reg    ap_block_state16_pp0_stage6_iter1;
wire    ap_block_state24_pp0_stage6_iter2;
wire    ap_block_state32_pp0_stage6_iter3;
wire    ap_block_state40_pp0_stage6_iter4;
wire    ap_block_state48_pp0_stage6_iter5;
wire    ap_block_state56_pp0_stage6_iter6;
wire    ap_block_state64_pp0_stage6_iter7;
reg    ap_block_pp0_stage6_flag00011001;
reg   [7:0] INPUT_BUNDLE_addr_6_s_reg_1015;
wire    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_state9_io;
reg    ap_block_state17_pp0_stage7_iter1;
wire    ap_block_state25_pp0_stage7_iter2;
wire    ap_block_state33_pp0_stage7_iter3;
wire    ap_block_state41_pp0_stage7_iter4;
wire    ap_block_state49_pp0_stage7_iter5;
wire    ap_block_state57_pp0_stage7_iter6;
wire    ap_block_state65_pp0_stage7_iter7;
reg    ap_block_pp0_stage7_flag00011001;
wire   [9:0] sum1_fu_608_p2;
reg   [9:0] sum1_reg_1020;
wire   [9:0] tmp3_fu_614_p2;
reg   [9:0] tmp3_reg_1025;
wire   [9:0] tmp_16_fu_636_p2;
reg   [9:0] tmp_16_reg_1030;
wire   [10:0] convulution_horizont_fu_657_p2;
reg   [10:0] convulution_horizont_reg_1035;
wire   [10:0] convulution_vertical_fu_695_p2;
reg   [10:0] convulution_vertical_reg_1040;
wire  signed [19:0] tmp_21_fu_866_p2;
reg  signed [19:0] tmp_21_reg_1045;
wire  signed [19:0] grp_fu_872_p3;
reg  signed [19:0] p_reg_1050;
wire   [0:0] tmp_30_fu_711_p2;
reg   [0:0] ap_reg_pp0_iter3_tmp_30_reg_1060;
reg   [0:0] ap_reg_pp0_iter4_tmp_30_reg_1060;
reg   [0:0] ap_reg_pp0_iter5_tmp_30_reg_1060;
wire   [0:0] tmp_32_fu_717_p2;
reg   [0:0] ap_reg_pp0_iter4_tmp_32_reg_1064;
reg   [0:0] ap_reg_pp0_iter5_tmp_32_reg_1064;
reg   [0:0] ap_reg_pp0_iter6_tmp_32_reg_1064;
reg   [0:0] ap_reg_pp0_iter7_tmp_32_reg_1064;
wire   [63:0] grp_fu_221_p1;
reg   [63:0] tmp_23_reg_1068;
reg   [10:0] loc_V_reg_1073;
wire   [51:0] loc_V_1_fu_737_p1;
reg   [51:0] loc_V_1_reg_1079;
wire   [0:0] isNeg_fu_750_p3;
reg   [0:0] isNeg_reg_1084;
wire   [11:0] sh_assign_1_fu_767_p3;
reg   [11:0] sh_assign_1_reg_1089;
wire   [0:0] icmp_fu_850_p2;
reg   [0:0] icmp_reg_1094;
wire   [7:0] tmp_27_fu_856_p1;
reg   [7:0] tmp_27_reg_1099;
wire   [7:0] tmp_28_fu_860_p3;
reg   [7:0] tmp_28_reg_1104;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_flag00011011;
reg    ap_block_pp0_stage1_flag00011011;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [19:0] indvar_flatten_phi_fu_191_p4;
reg   [9:0] j_phi_fu_203_p4;
reg   [9:0] i_phi_fu_214_p4;
wire   [31:0] output4_sum1_fu_301_p2;
wire   [31:0] input2_sum_fu_338_p2;
wire   [31:0] input2_sum5_fu_370_p2;
wire   [31:0] input2_sum6_fu_390_p2;
wire   [31:0] input2_sum7_fu_410_p2;
wire   [31:0] input2_sum9_fu_430_p2;
wire   [31:0] input2_sum8_fu_483_p2;
wire   [31:0] input2_sum1_fu_515_p2;
wire   [31:0] input2_sum2_fu_547_p2;
reg    ap_reg_ioackin_INPUT_BUNDLE_ARREADY;
reg    ap_block_pp0_stage2_flag00001001;
reg    ap_block_pp0_stage3_flag00001001;
reg    ap_block_pp0_stage4_flag00001001;
reg    ap_block_pp0_stage5_flag00001001;
reg    ap_block_pp0_stage6_flag00001001;
reg    ap_block_pp0_stage7_flag00001001;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_block_pp0_stage1_flag00001001;
reg    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY;
reg    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY;
wire   [31:0] grp_fu_221_p0;
wire   [0:0] tmp_1_fu_245_p2;
wire   [9:0] j_s_fu_259_p2;
wire   [19:0] tmp_1_mid1_fu_273_p3;
wire   [19:0] tmp_6_fu_281_p3;
wire   [19:0] tmp_7_mid2_v_fu_289_p3;
wire   [31:0] tmp_7_mid2_fu_297_p1;
wire   [10:0] grp_fu_312_p1;
wire   [19:0] tmp_8_fu_318_p3;
wire   [20:0] sum2_fu_328_p2;
wire  signed [31:0] sum2_cast_fu_334_p1;
wire   [10:0] grp_fu_349_p1;
wire   [9:0] tmp1_fu_354_p2;
wire   [19:0] sum4_fu_359_p3;
wire   [31:0] sum4_cast_fu_366_p1;
wire   [20:0] sum6_fu_381_p2;
wire   [31:0] sum6_cast_fu_386_p1;
wire   [20:0] sum8_fu_401_p2;
wire  signed [31:0] sum8_cast_fu_406_p1;
wire   [20:0] sum5_fu_421_p2;
wire   [31:0] sum5_cast_fu_426_p1;
wire   [19:0] tmp_3_cast_mid2_v_v_fu_441_p3;
wire   [19:0] tmp_3_cast_mid2_v_fu_448_p2;
wire   [20:0] tmp_3_cast_mid2_fu_454_p1;
wire   [20:0] tmp_8_cast5_fu_470_p1;
wire   [20:0] sum3_fu_473_p2;
wire   [31:0] sum3_cast_fu_479_p1;
wire   [19:0] tmp_4_mid2_fu_458_p2;
wire   [9:0] tmp_7_fu_494_p4;
wire   [19:0] tmp_9_fu_504_p3;
wire   [31:0] tmp_10_fu_511_p1;
wire   [19:0] tmp_5_mid2_fu_464_p2;
wire   [9:0] tmp_12_fu_526_p4;
wire   [19:0] tmp_13_fu_536_p3;
wire   [31:0] tmp_14_fu_543_p1;
wire   [8:0] tmp_2_fu_567_p3;
wire   [8:0] tmp_4_fu_584_p3;
wire   [8:0] tmp_7_cast_fu_563_p1;
wire   [8:0] tmp_13_cast_fu_578_p1;
wire   [8:0] tmp2_fu_598_p2;
wire   [9:0] tmp2_cast_fu_604_p1;
wire   [9:0] tmp_12_cast_fu_574_p1;
wire   [9:0] tmp_17_cast_fu_591_p1;
wire   [9:0] tmp_18_cast_fu_595_p1;
wire   [8:0] sum5_neg_fu_620_p2;
wire  signed [9:0] sum5_neg_cast_fu_626_p1;
wire   [9:0] tmp_15_cast_fu_581_p1;
wire   [9:0] sum6_neg_fu_630_p2;
wire   [10:0] tmp_3_fu_642_p1;
wire   [10:0] sum1_cast_fu_645_p1;
wire   [10:0] tmp3_cast_fu_654_p1;
wire   [10:0] tmp_5_fu_648_p2;
wire   [8:0] tmp_11_fu_663_p3;
wire   [8:0] tmp_15_fu_674_p3;
wire  signed [10:0] tmp_29_cast_fu_686_p1;
wire   [10:0] tmp_24_cast_fu_670_p1;
wire   [10:0] tmp_17_fu_689_p2;
wire   [10:0] tmp_28_cast_fu_682_p1;
wire   [19:0] grp_fu_312_p2;
wire   [19:0] grp_fu_349_p2;
wire   [63:0] grp_fu_224_p2;
wire   [63:0] p_Val2_s_fu_723_p1;
wire   [11:0] tmp_i_i_i_i_cast4_fu_741_p1;
wire   [11:0] sh_assign_fu_744_p2;
wire   [10:0] tmp_41_i_i_i_fu_758_p2;
wire  signed [11:0] tmp_41_i_i_i_cast_fu_763_p1;
wire   [53:0] tmp_i_i_i_fu_775_p4;
wire  signed [31:0] sh_assign_1_cast_fu_788_p1;
wire   [53:0] tmp_42_i_i_i_cast_fu_795_p1;
wire   [120:0] tmp_i_i_i_cast_fu_784_p1;
wire   [120:0] tmp_42_i_i_i_fu_791_p1;
wire   [53:0] tmp_43_i_i_i_fu_799_p2;
wire   [0:0] tmp_fu_811_p3;
wire   [120:0] tmp_44_i_i_i_fu_805_p2;
wire   [67:0] tmp_24_cast1_fu_819_p1;
wire   [67:0] tmp_24_fu_823_p4;
wire   [67:0] tmp_25_fu_833_p3;
wire   [1:0] tmp_26_fu_840_p4;
wire  signed [10:0] tmp_21_fu_866_p0;
wire  signed [19:0] tmp_20_fu_701_p1;
wire  signed [10:0] tmp_21_fu_866_p1;
wire  signed [10:0] grp_fu_872_p0;
wire  signed [19:0] tmp_18_fu_704_p1;
wire  signed [10:0] grp_fu_872_p1;
reg    grp_fu_221_ce;
reg    grp_fu_224_ce;
reg    grp_fu_312_ce;
reg    grp_fu_349_ce;
wire    ap_CS_fsm_state68;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_flag00011011;
reg    ap_block_pp0_stage3_flag00011011;
reg    ap_block_pp0_stage4_flag00011011;
reg    ap_block_pp0_stage5_flag00011011;
reg    ap_block_pp0_stage6_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_853;
reg    ap_condition_867;
reg    ap_condition_879;
reg    ap_condition_891;
reg    ap_condition_901;
reg    ap_condition_913;
reg    ap_condition_925;
reg    ap_condition_936;
reg    ap_condition_1547;
reg    ap_condition_1551;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_reg_ioackin_INPUT_BUNDLE_ARREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_BUNDLE_WREADY = 1'b0;
end

sobel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r(input_r),
    .output_r(output_r)
);

sobel_INPUT_BUNDLE_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_BUNDLE_CACHE_VALUE ))
sobel_INPUT_BUNDLE_m_axi_U(
    .AWVALID(m_axi_INPUT_BUNDLE_AWVALID),
    .AWREADY(m_axi_INPUT_BUNDLE_AWREADY),
    .AWADDR(m_axi_INPUT_BUNDLE_AWADDR),
    .AWID(m_axi_INPUT_BUNDLE_AWID),
    .AWLEN(m_axi_INPUT_BUNDLE_AWLEN),
    .AWSIZE(m_axi_INPUT_BUNDLE_AWSIZE),
    .AWBURST(m_axi_INPUT_BUNDLE_AWBURST),
    .AWLOCK(m_axi_INPUT_BUNDLE_AWLOCK),
    .AWCACHE(m_axi_INPUT_BUNDLE_AWCACHE),
    .AWPROT(m_axi_INPUT_BUNDLE_AWPROT),
    .AWQOS(m_axi_INPUT_BUNDLE_AWQOS),
    .AWREGION(m_axi_INPUT_BUNDLE_AWREGION),
    .AWUSER(m_axi_INPUT_BUNDLE_AWUSER),
    .WVALID(m_axi_INPUT_BUNDLE_WVALID),
    .WREADY(m_axi_INPUT_BUNDLE_WREADY),
    .WDATA(m_axi_INPUT_BUNDLE_WDATA),
    .WSTRB(m_axi_INPUT_BUNDLE_WSTRB),
    .WLAST(m_axi_INPUT_BUNDLE_WLAST),
    .WID(m_axi_INPUT_BUNDLE_WID),
    .WUSER(m_axi_INPUT_BUNDLE_WUSER),
    .ARVALID(m_axi_INPUT_BUNDLE_ARVALID),
    .ARREADY(m_axi_INPUT_BUNDLE_ARREADY),
    .ARADDR(m_axi_INPUT_BUNDLE_ARADDR),
    .ARID(m_axi_INPUT_BUNDLE_ARID),
    .ARLEN(m_axi_INPUT_BUNDLE_ARLEN),
    .ARSIZE(m_axi_INPUT_BUNDLE_ARSIZE),
    .ARBURST(m_axi_INPUT_BUNDLE_ARBURST),
    .ARLOCK(m_axi_INPUT_BUNDLE_ARLOCK),
    .ARCACHE(m_axi_INPUT_BUNDLE_ARCACHE),
    .ARPROT(m_axi_INPUT_BUNDLE_ARPROT),
    .ARQOS(m_axi_INPUT_BUNDLE_ARQOS),
    .ARREGION(m_axi_INPUT_BUNDLE_ARREGION),
    .ARUSER(m_axi_INPUT_BUNDLE_ARUSER),
    .RVALID(m_axi_INPUT_BUNDLE_RVALID),
    .RREADY(m_axi_INPUT_BUNDLE_RREADY),
    .RDATA(m_axi_INPUT_BUNDLE_RDATA),
    .RLAST(m_axi_INPUT_BUNDLE_RLAST),
    .RID(m_axi_INPUT_BUNDLE_RID),
    .RUSER(m_axi_INPUT_BUNDLE_RUSER),
    .RRESP(m_axi_INPUT_BUNDLE_RRESP),
    .BVALID(m_axi_INPUT_BUNDLE_BVALID),
    .BREADY(m_axi_INPUT_BUNDLE_BREADY),
    .BRESP(m_axi_INPUT_BUNDLE_BRESP),
    .BID(m_axi_INPUT_BUNDLE_BID),
    .BUSER(m_axi_INPUT_BUNDLE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_BUNDLE_ARVALID),
    .I_ARREADY(INPUT_BUNDLE_ARREADY),
    .I_ARADDR(INPUT_BUNDLE_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUT_BUNDLE_RVALID),
    .I_RREADY(INPUT_BUNDLE_RREADY),
    .I_RDATA(INPUT_BUNDLE_RDATA),
    .I_RID(INPUT_BUNDLE_RID),
    .I_RUSER(INPUT_BUNDLE_RUSER),
    .I_RRESP(INPUT_BUNDLE_RRESP),
    .I_RLAST(INPUT_BUNDLE_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_BUNDLE_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_BUNDLE_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(INPUT_BUNDLE_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_BUNDLE_BRESP),
    .I_BID(INPUT_BUNDLE_BID),
    .I_BUSER(INPUT_BUNDLE_BUSER)
);

sobel_OUTPUT_BUNDLE_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE ))
sobel_OUTPUT_BUNDLE_m_axi_U(
    .AWVALID(m_axi_OUTPUT_BUNDLE_AWVALID),
    .AWREADY(m_axi_OUTPUT_BUNDLE_AWREADY),
    .AWADDR(m_axi_OUTPUT_BUNDLE_AWADDR),
    .AWID(m_axi_OUTPUT_BUNDLE_AWID),
    .AWLEN(m_axi_OUTPUT_BUNDLE_AWLEN),
    .AWSIZE(m_axi_OUTPUT_BUNDLE_AWSIZE),
    .AWBURST(m_axi_OUTPUT_BUNDLE_AWBURST),
    .AWLOCK(m_axi_OUTPUT_BUNDLE_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_BUNDLE_AWCACHE),
    .AWPROT(m_axi_OUTPUT_BUNDLE_AWPROT),
    .AWQOS(m_axi_OUTPUT_BUNDLE_AWQOS),
    .AWREGION(m_axi_OUTPUT_BUNDLE_AWREGION),
    .AWUSER(m_axi_OUTPUT_BUNDLE_AWUSER),
    .WVALID(m_axi_OUTPUT_BUNDLE_WVALID),
    .WREADY(m_axi_OUTPUT_BUNDLE_WREADY),
    .WDATA(m_axi_OUTPUT_BUNDLE_WDATA),
    .WSTRB(m_axi_OUTPUT_BUNDLE_WSTRB),
    .WLAST(m_axi_OUTPUT_BUNDLE_WLAST),
    .WID(m_axi_OUTPUT_BUNDLE_WID),
    .WUSER(m_axi_OUTPUT_BUNDLE_WUSER),
    .ARVALID(m_axi_OUTPUT_BUNDLE_ARVALID),
    .ARREADY(m_axi_OUTPUT_BUNDLE_ARREADY),
    .ARADDR(m_axi_OUTPUT_BUNDLE_ARADDR),
    .ARID(m_axi_OUTPUT_BUNDLE_ARID),
    .ARLEN(m_axi_OUTPUT_BUNDLE_ARLEN),
    .ARSIZE(m_axi_OUTPUT_BUNDLE_ARSIZE),
    .ARBURST(m_axi_OUTPUT_BUNDLE_ARBURST),
    .ARLOCK(m_axi_OUTPUT_BUNDLE_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_BUNDLE_ARCACHE),
    .ARPROT(m_axi_OUTPUT_BUNDLE_ARPROT),
    .ARQOS(m_axi_OUTPUT_BUNDLE_ARQOS),
    .ARREGION(m_axi_OUTPUT_BUNDLE_ARREGION),
    .ARUSER(m_axi_OUTPUT_BUNDLE_ARUSER),
    .RVALID(m_axi_OUTPUT_BUNDLE_RVALID),
    .RREADY(m_axi_OUTPUT_BUNDLE_RREADY),
    .RDATA(m_axi_OUTPUT_BUNDLE_RDATA),
    .RLAST(m_axi_OUTPUT_BUNDLE_RLAST),
    .RID(m_axi_OUTPUT_BUNDLE_RID),
    .RUSER(m_axi_OUTPUT_BUNDLE_RUSER),
    .RRESP(m_axi_OUTPUT_BUNDLE_RRESP),
    .BVALID(m_axi_OUTPUT_BUNDLE_BVALID),
    .BREADY(m_axi_OUTPUT_BUNDLE_BREADY),
    .BRESP(m_axi_OUTPUT_BUNDLE_BRESP),
    .BID(m_axi_OUTPUT_BUNDLE_BID),
    .BUSER(m_axi_OUTPUT_BUNDLE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_BUNDLE_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_BUNDLE_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_BUNDLE_RDATA),
    .I_RID(OUTPUT_BUNDLE_RID),
    .I_RUSER(OUTPUT_BUNDLE_RUSER),
    .I_RRESP(OUTPUT_BUNDLE_RRESP),
    .I_RLAST(OUTPUT_BUNDLE_RLAST),
    .I_AWVALID(OUTPUT_BUNDLE_AWVALID),
    .I_AWREADY(OUTPUT_BUNDLE_AWREADY),
    .I_AWADDR(ap_reg_pp0_iter7_OUTPUT_BUNDLE_addr_reg_924),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1022),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUT_BUNDLE_WVALID),
    .I_WREADY(OUTPUT_BUNDLE_WREADY),
    .I_WDATA(tmp_28_reg_1104),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(OUTPUT_BUNDLE_BVALID),
    .I_BREADY(OUTPUT_BUNDLE_BREADY),
    .I_BRESP(OUTPUT_BUNDLE_BRESP),
    .I_BID(OUTPUT_BUNDLE_BID),
    .I_BUSER(OUTPUT_BUNDLE_BUSER)
);

sobel_uitodp_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_uitodp_32nsbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_221_p0),
    .ce(grp_fu_221_ce),
    .dout(grp_fu_221_p1)
);

sobel_dsqrt_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_dsqrt_64ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_23_reg_1068),
    .ce(grp_fu_224_ce),
    .dout(grp_fu_224_p2)
);

sobel_urem_20ns_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 24 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
sobel_urem_20ns_1dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten_phi_fu_191_p4),
    .din1(grp_fu_312_p1),
    .ce(grp_fu_312_ce),
    .dout(grp_fu_312_p2)
);

sobel_urem_20ns_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 24 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
sobel_urem_20ns_1dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten_next_reg_900),
    .din1(grp_fu_349_p1),
    .ce(grp_fu_349_ce),
    .dout(grp_fu_349_p2)
);

sobel_mul_mul_11seOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
sobel_mul_mul_11seOg_U4(
    .din0(tmp_21_fu_866_p0),
    .din1(tmp_21_fu_866_p1),
    .dout(tmp_21_fu_866_p2)
);

sobel_mac_muladd_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
sobel_mac_muladd_fYi_U5(
    .din0(grp_fu_872_p0),
    .din1(grp_fu_872_p1),
    .din2(tmp_21_reg_1045),
    .dout(grp_fu_872_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage4_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage5_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage6_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage7_flag00001001 == 1'b0)) | ((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b0;
    end else begin
        if ((ap_condition_1547 == 1'b1)) begin
            if ((ap_block_pp0_stage3_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b0;
            end else if (((ap_block_pp0_stage3_flag00001001 == 1'b0) & (1'b1 == OUTPUT_BUNDLE_AWREADY))) begin
                ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_1551 == 1'b1)) begin
            if ((ap_block_pp0_stage4_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage4_flag00001001 == 1'b0) & (1'b1 == OUTPUT_BUNDLE_WREADY))) begin
                ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_reg_210 <= i_1_reg_984;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_210 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_reg_187 <= indvar_flatten_next_reg_900;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_187 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        j_reg_199 <= tmp_3_cast_mid2_v_v_s_reg_916;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_199 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_896 == 1'd0) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_1_reg_942 <= input2_sum5_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_1_s_reg_989 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_2_reg_948 <= input2_sum6_fu_390_p2;
        INPUT_BUNDLE_addr_3_reg_954 <= input2_sum7_fu_410_p2;
        INPUT_BUNDLE_addr_5_reg_960 <= input2_sum9_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_2_s_reg_994 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_3_s_reg_999 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_4_reg_966 <= input2_sum8_fu_483_p2;
        INPUT_BUNDLE_addr_6_reg_972 <= input2_sum1_fu_515_p2;
        INPUT_BUNDLE_addr_7_reg_978 <= input2_sum2_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_4_s_reg_1005 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_5_s_reg_1010 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_6_s_reg_1015 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        INPUT_BUNDLE_addr_reg_936 <= input2_sum_fu_338_p2;
        tmp_9_cast_reg_929[19 : 0] <= tmp_9_cast_fu_324_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_233_p2))) begin
        OUTPUT_BUNDLE_addr_reg_924 <= output4_sum1_fu_301_p2;
        i_mid2_reg_906 <= i_mid2_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_OUTPUT_BUNDLE_addr_reg_924 <= OUTPUT_BUNDLE_addr_reg_924;
        ap_reg_pp0_iter1_exitcond_flatten_reg_896 <= exitcond_flatten_reg_896;
        ap_reg_pp0_iter2_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter1_OUTPUT_BUNDLE_addr_reg_924;
        ap_reg_pp0_iter2_exitcond_flatten_reg_896 <= ap_reg_pp0_iter1_exitcond_flatten_reg_896;
        ap_reg_pp0_iter3_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter2_OUTPUT_BUNDLE_addr_reg_924;
        ap_reg_pp0_iter3_exitcond_flatten_reg_896 <= ap_reg_pp0_iter2_exitcond_flatten_reg_896;
        ap_reg_pp0_iter4_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter3_OUTPUT_BUNDLE_addr_reg_924;
        ap_reg_pp0_iter4_exitcond_flatten_reg_896 <= ap_reg_pp0_iter3_exitcond_flatten_reg_896;
        ap_reg_pp0_iter4_tmp_32_reg_1064 <= tmp_32_reg_1064;
        ap_reg_pp0_iter5_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter4_OUTPUT_BUNDLE_addr_reg_924;
        ap_reg_pp0_iter5_exitcond_flatten_reg_896 <= ap_reg_pp0_iter4_exitcond_flatten_reg_896;
        ap_reg_pp0_iter5_tmp_32_reg_1064 <= ap_reg_pp0_iter4_tmp_32_reg_1064;
        ap_reg_pp0_iter6_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter5_OUTPUT_BUNDLE_addr_reg_924;
        ap_reg_pp0_iter6_exitcond_flatten_reg_896 <= ap_reg_pp0_iter5_exitcond_flatten_reg_896;
        ap_reg_pp0_iter6_tmp_32_reg_1064 <= ap_reg_pp0_iter5_tmp_32_reg_1064;
        ap_reg_pp0_iter7_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter6_OUTPUT_BUNDLE_addr_reg_924;
        ap_reg_pp0_iter7_exitcond_flatten_reg_896 <= ap_reg_pp0_iter6_exitcond_flatten_reg_896;
        ap_reg_pp0_iter7_tmp_32_reg_1064 <= ap_reg_pp0_iter6_tmp_32_reg_1064;
        ap_reg_pp0_iter8_tmp_32_reg_1064 <= ap_reg_pp0_iter7_tmp_32_reg_1064;
        exitcond_flatten_reg_896 <= exitcond_flatten_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter3_tmp_30_reg_1060 <= tmp_30_reg_1060;
        ap_reg_pp0_iter4_tmp_30_reg_1060 <= ap_reg_pp0_iter3_tmp_30_reg_1060;
        ap_reg_pp0_iter5_tmp_30_reg_1060 <= ap_reg_pp0_iter4_tmp_30_reg_1060;
        ap_reg_pp0_iter6_tmp_30_reg_1060 <= ap_reg_pp0_iter5_tmp_30_reg_1060;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_896))) begin
        convulution_horizont_reg_1035 <= convulution_horizont_fu_657_p2;
        convulution_vertical_reg_1040 <= convulution_vertical_fu_695_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        i_1_reg_984 <= i_1_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_896) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        icmp_reg_1094 <= icmp_fu_850_p2;
        tmp_27_reg_1099 <= tmp_27_fu_856_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_next_reg_900 <= indvar_flatten_next_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_read_reg_884 <= input_r;
        output_read_reg_879 <= output_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_896) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        isNeg_reg_1084 <= sh_assign_fu_744_p2[32'd11];
        sh_assign_1_reg_1089 <= sh_assign_1_fu_767_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter6_exitcond_flatten_reg_896))) begin
        loc_V_1_reg_1079 <= loc_V_1_fu_737_p1;
        loc_V_reg_1073 <= {{p_Val2_s_fu_723_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_896))) begin
        p_reg_1050 <= grp_fu_872_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        reg_229 <= INPUT_BUNDLE_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        sum1_reg_1020 <= sum1_fu_608_p2;
        tmp3_reg_1025 <= tmp3_fu_614_p2;
        tmp_16_reg_1030 <= tmp_16_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_896))) begin
        tmp_21_reg_1045 <= tmp_21_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_896))) begin
        tmp_23_reg_1068 <= grp_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_896) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        tmp_28_reg_1104 <= tmp_28_fu_860_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_896))) begin
        tmp_30_reg_1060 <= tmp_30_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_896))) begin
        tmp_32_reg_1064 <= tmp_32_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_233_p2))) begin
        tmp_3_cast_mid2_v_v_s_reg_916 <= tmp_3_cast_mid2_v_v_s_fu_265_p3;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) begin
        if ((ap_condition_936 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_7_reg_978;
        end else if ((ap_condition_925 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_6_reg_972;
        end else if ((ap_condition_913 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_5_reg_960;
        end else if ((ap_condition_901 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_4_reg_966;
        end else if ((ap_condition_891 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_3_reg_954;
        end else if ((ap_condition_879 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_2_reg_948;
        end else if ((ap_condition_867 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_1_reg_942;
        end else if ((ap_condition_853 == 1'b1)) begin
            INPUT_BUNDLE_ARADDR = INPUT_BUNDLE_addr_reg_936;
        end else begin
            INPUT_BUNDLE_ARADDR = 'bx;
        end
    end else begin
        INPUT_BUNDLE_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (ap_block_pp0_stage2_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage4_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage5_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage6_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage7_flag00001001 == 1'b0)) | ((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)))) begin
        INPUT_BUNDLE_ARVALID = 1'b1;
    end else begin
        INPUT_BUNDLE_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
        INPUT_BUNDLE_RREADY = 1'b1;
    end else begin
        INPUT_BUNDLE_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (exitcond_flatten_reg_896 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0)))) begin
        INPUT_BUNDLE_blk_n_AR = m_axi_INPUT_BUNDLE_ARREADY;
    end else begin
        INPUT_BUNDLE_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        INPUT_BUNDLE_blk_n_R = m_axi_INPUT_BUNDLE_RVALID;
    end else begin
        INPUT_BUNDLE_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_reg_pp0_iter6_tmp_30_reg_1060 == 1'd1) & (ap_block_pp0_stage3_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY))) begin
        OUTPUT_BUNDLE_AWVALID = 1'b1;
    end else begin
        OUTPUT_BUNDLE_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter8) & (1'd1 == ap_reg_pp0_iter8_tmp_32_reg_1064) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        OUTPUT_BUNDLE_BREADY = 1'b1;
    end else begin
        OUTPUT_BUNDLE_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_896) & (ap_block_pp0_stage4_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY))) begin
        OUTPUT_BUNDLE_WVALID = 1'b1;
    end else begin
        OUTPUT_BUNDLE_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_reg_pp0_iter6_tmp_30_reg_1060 == 1'd1))) begin
        OUTPUT_BUNDLE_blk_n_AW = m_axi_OUTPUT_BUNDLE_AWREADY;
    end else begin
        OUTPUT_BUNDLE_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter8) & (1'd1 == ap_reg_pp0_iter8_tmp_32_reg_1064))) begin
        OUTPUT_BUNDLE_blk_n_B = m_axi_OUTPUT_BUNDLE_BVALID;
    end else begin
        OUTPUT_BUNDLE_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_896))) begin
        OUTPUT_BUNDLE_blk_n_W = m_axi_OUTPUT_BUNDLE_WREADY;
    end else begin
        OUTPUT_BUNDLE_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten_fu_233_p2)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) begin
        ap_sig_ioackin_INPUT_BUNDLE_ARREADY = INPUT_BUNDLE_ARREADY;
    end else begin
        ap_sig_ioackin_INPUT_BUNDLE_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) begin
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = OUTPUT_BUNDLE_AWREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) begin
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = OUTPUT_BUNDLE_WREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        grp_fu_221_ce = 1'b1;
    end else begin
        grp_fu_221_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        grp_fu_312_ce = 1'b1;
    end else begin
        grp_fu_312_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        grp_fu_349_ce = 1'b1;
    end else begin
        grp_fu_349_ce = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_214_p4 = i_1_reg_984;
    end else begin
        i_phi_fu_214_p4 = i_reg_210;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_191_p4 = indvar_flatten_next_reg_900;
    end else begin
        indvar_flatten_phi_fu_191_p4 = indvar_flatten_reg_187;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        j_phi_fu_203_p4 = tmp_3_cast_mid2_v_v_s_reg_916;
    end else begin
        j_phi_fu_203_p4 = j_reg_199;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_233_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_233_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10_io)) | ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == INPUT_BUNDLE_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10_io)) | ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == INPUT_BUNDLE_RVALID)));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter8) & (1'd1 == ap_reg_pp0_iter8_tmp_32_reg_1064) & (1'b0 == OUTPUT_BUNDLE_BVALID)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | (1'b1 == ap_block_state11_io))) | ((1'b1 == ap_enable_reg_pp0_iter8) & (1'd1 == ap_reg_pp0_iter8_tmp_32_reg_1064) & (1'b0 == OUTPUT_BUNDLE_BVALID)));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | (1'b1 == ap_block_state11_io))) | ((1'b1 == ap_enable_reg_pp0_iter8) & (1'd1 == ap_reg_pp0_iter8_tmp_32_reg_1064) & (1'b0 == OUTPUT_BUNDLE_BVALID)));
end

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state4_io)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state4_io)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)));
end

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state5_io)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_block_state61_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state5_io)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_block_state61_io)));
end

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage4_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_block_state62_io)));
end

always @ (*) begin
    ap_block_pp0_stage4_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b1 == ap_block_state62_io)));
end

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage5_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state7_io)));
end

always @ (*) begin
    ap_block_pp0_stage5_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state7_io)));
end

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage6_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage6_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8_io)));
end

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage7_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage7_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_state10_io = ((exitcond_flatten_reg_896 == 1'd0) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_state14_pp0_stage4_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_state15_pp0_stage5_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_state16_pp0_stage6_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_state17_pp0_stage7_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter2 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (1'b0 == INPUT_BUNDLE_RVALID));
end

assign ap_block_state19_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage6_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage7_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_flatten_reg_896 == 1'd0) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage5_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage6_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage7_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond_flatten_reg_896 == 1'd0) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state61_io = ((ap_reg_pp0_iter6_tmp_30_reg_1060 == 1'd1) & (1'b0 == ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY));
end

assign ap_block_state61_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state62_io = ((1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_896) & (1'b0 == ap_sig_ioackin_OUTPUT_BUNDLE_WREADY));
end

assign ap_block_state62_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage5_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage6_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage7_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state67_pp0_stage1_iter8 = ((1'd1 == ap_reg_pp0_iter8_tmp_32_reg_1064) & (1'b0 == OUTPUT_BUNDLE_BVALID));
end

always @ (*) begin
    ap_block_state6_io = ((exitcond_flatten_reg_896 == 1'd0) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((exitcond_flatten_reg_896 == 1'd0) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((exitcond_flatten_reg_896 == 1'd0) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((exitcond_flatten_reg_896 == 1'd0) & (1'b0 == ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
end

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1547 = ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_reg_pp0_iter6_tmp_30_reg_1060 == 1'd1));
end

always @ (*) begin
    ap_condition_1551 = ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_896));
end

always @ (*) begin
    ap_condition_853 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (ap_block_pp0_stage2_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_867 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_879 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_891 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_901 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_913 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_925 = ((exitcond_flatten_reg_896 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_936 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_896) & (ap_block_pp0_stage1_flag00001001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign convulution_horizont_fu_657_p2 = (tmp3_cast_fu_654_p1 + tmp_5_fu_648_p2);

assign convulution_vertical_fu_695_p2 = (tmp_17_fu_689_p2 + tmp_28_cast_fu_682_p1);

assign exitcond_flatten_fu_233_p2 = ((indvar_flatten_phi_fu_191_p4 == 20'd1044484) ? 1'b1 : 1'b0);

assign grp_fu_221_p0 = $unsigned(p_reg_1050);

assign grp_fu_312_p1 = 20'd1022;

assign grp_fu_349_p1 = 20'd1022;

assign grp_fu_872_p0 = tmp_18_fu_704_p1;

assign grp_fu_872_p1 = tmp_18_fu_704_p1;

assign i_1_fu_558_p2 = (i_mid2_reg_906 + 10'd1);

assign i_mid2_fu_251_p3 = ((tmp_1_fu_245_p2[0:0] === 1'b1) ? 10'd1 : i_phi_fu_214_p4);

assign icmp_fu_850_p2 = ((tmp_26_fu_840_p4 != 2'd0) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_239_p2 = (indvar_flatten_phi_fu_191_p4 + 20'd1);

assign input2_sum1_fu_515_p2 = (tmp_10_fu_511_p1 + input_read_reg_884);

assign input2_sum2_fu_547_p2 = (tmp_14_fu_543_p1 + input_read_reg_884);

assign input2_sum5_fu_370_p2 = (sum4_cast_fu_366_p1 + input_read_reg_884);

assign input2_sum6_fu_390_p2 = (sum6_cast_fu_386_p1 + input_read_reg_884);

assign input2_sum7_fu_410_p2 = ($signed(sum8_cast_fu_406_p1) + $signed(input_read_reg_884));

assign input2_sum8_fu_483_p2 = (sum3_cast_fu_479_p1 + input_read_reg_884);

assign input2_sum9_fu_430_p2 = (sum5_cast_fu_426_p1 + input_read_reg_884);

assign input2_sum_fu_338_p2 = ($signed(sum2_cast_fu_334_p1) + $signed(input_read_reg_884));

assign isNeg_fu_750_p3 = sh_assign_fu_744_p2[32'd11];

assign j_s_fu_259_p2 = (10'd1 + j_phi_fu_203_p4);

assign loc_V_1_fu_737_p1 = p_Val2_s_fu_723_p1[51:0];

assign output4_sum1_fu_301_p2 = (tmp_7_mid2_fu_297_p1 + output_read_reg_879);

assign p_Val2_s_fu_723_p1 = grp_fu_224_p2;

assign sh_assign_1_cast_fu_788_p1 = $signed(sh_assign_1_reg_1089);

assign sh_assign_1_fu_767_p3 = ((isNeg_fu_750_p3[0:0] === 1'b1) ? tmp_41_i_i_i_cast_fu_763_p1 : sh_assign_fu_744_p2);

assign sh_assign_fu_744_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast4_fu_741_p1));

assign sum1_cast_fu_645_p1 = sum1_reg_1020;

assign sum1_fu_608_p2 = (tmp2_cast_fu_604_p1 + tmp_12_cast_fu_574_p1);

assign sum2_cast_fu_334_p1 = $signed(sum2_fu_328_p2);

assign sum2_fu_328_p2 = ($signed(21'd2096127) + $signed(tmp_9_cast_fu_324_p1));

assign sum3_cast_fu_479_p1 = sum3_fu_473_p2;

assign sum3_fu_473_p2 = (tmp_3_cast_mid2_fu_454_p1 + tmp_8_cast5_fu_470_p1);

assign sum4_cast_fu_366_p1 = sum4_fu_359_p3;

assign sum4_fu_359_p3 = {{tmp_3_cast_mid2_v_v_s_reg_916}, {tmp1_fu_354_p2}};

assign sum5_cast_fu_426_p1 = sum5_fu_421_p2;

assign sum5_fu_421_p2 = (21'd1025 + tmp_9_cast_reg_929);

assign sum5_neg_cast_fu_626_p1 = $signed(sum5_neg_fu_620_p2);

assign sum5_neg_fu_620_p2 = (tmp_7_cast_fu_563_p1 - tmp_13_cast_fu_578_p1);

assign sum6_cast_fu_386_p1 = sum6_fu_381_p2;

assign sum6_fu_381_p2 = (21'd1023 + tmp_9_cast_reg_929);

assign sum6_neg_fu_630_p2 = ($signed(sum5_neg_cast_fu_626_p1) + $signed(tmp_15_cast_fu_581_p1));

assign sum8_cast_fu_406_p1 = $signed(sum8_fu_401_p2);

assign sum8_fu_401_p2 = ($signed(21'd2096129) + $signed(tmp_9_cast_reg_929));

assign tmp1_fu_354_p2 = ($signed(10'd1023) + $signed(i_mid2_reg_906));

assign tmp2_cast_fu_604_p1 = tmp2_fu_598_p2;

assign tmp2_fu_598_p2 = (tmp_7_cast_fu_563_p1 + tmp_13_cast_fu_578_p1);

assign tmp3_cast_fu_654_p1 = tmp3_reg_1025;

assign tmp3_fu_614_p2 = (tmp_17_cast_fu_591_p1 + tmp_18_cast_fu_595_p1);

assign tmp_10_fu_511_p1 = tmp_9_fu_504_p3;

assign tmp_11_fu_663_p3 = {{INPUT_BUNDLE_addr_6_s_reg_1015}, {1'd0}};

assign tmp_12_cast_fu_574_p1 = tmp_2_fu_567_p3;

assign tmp_12_fu_526_p4 = {{tmp_5_mid2_fu_464_p2[19:10]}};

assign tmp_13_cast_fu_578_p1 = INPUT_BUNDLE_addr_2_s_reg_994;

assign tmp_13_fu_536_p3 = {{tmp_12_fu_526_p4}, {i_mid2_reg_906}};

assign tmp_14_fu_543_p1 = tmp_13_fu_536_p3;

assign tmp_15_cast_fu_581_p1 = INPUT_BUNDLE_addr_3_s_reg_999;

assign tmp_15_fu_674_p3 = {{reg_229}, {1'd0}};

assign tmp_16_fu_636_p2 = (sum6_neg_fu_630_p2 - tmp_18_cast_fu_595_p1);

assign tmp_17_cast_fu_591_p1 = tmp_4_fu_584_p3;

assign tmp_17_fu_689_p2 = ($signed(tmp_29_cast_fu_686_p1) - $signed(tmp_24_cast_fu_670_p1));

assign tmp_18_cast_fu_595_p1 = INPUT_BUNDLE_addr_5_s_reg_1010;

assign tmp_18_fu_704_p1 = $signed(convulution_horizont_reg_1035);

assign tmp_1_fu_245_p2 = ((i_phi_fu_214_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign tmp_1_mid1_fu_273_p3 = {{j_s_fu_259_p2}, {10'd1}};

assign tmp_20_fu_701_p1 = $signed(convulution_vertical_reg_1040);

assign tmp_21_fu_866_p0 = tmp_20_fu_701_p1;

assign tmp_21_fu_866_p1 = tmp_20_fu_701_p1;

assign tmp_24_cast1_fu_819_p1 = tmp_fu_811_p3;

assign tmp_24_cast_fu_670_p1 = tmp_11_fu_663_p3;

assign tmp_24_fu_823_p4 = {{tmp_44_i_i_i_fu_805_p2[120:53]}};

assign tmp_25_fu_833_p3 = ((isNeg_reg_1084[0:0] === 1'b1) ? tmp_24_cast1_fu_819_p1 : tmp_24_fu_823_p4);

assign tmp_26_fu_840_p4 = {{tmp_25_fu_833_p3[9:8]}};

assign tmp_27_fu_856_p1 = tmp_25_fu_833_p3[7:0];

assign tmp_28_cast_fu_682_p1 = tmp_15_fu_674_p3;

assign tmp_28_fu_860_p3 = ((icmp_reg_1094[0:0] === 1'b1) ? 8'd255 : tmp_27_reg_1099);

assign tmp_29_cast_fu_686_p1 = $signed(tmp_16_reg_1030);

assign tmp_2_fu_567_p3 = {{INPUT_BUNDLE_addr_1_s_reg_989}, {1'd0}};

assign tmp_30_fu_711_p2 = ((grp_fu_312_p2 == 20'd0) ? 1'b1 : 1'b0);

assign tmp_32_fu_717_p2 = ((grp_fu_349_p2 == 20'd0) ? 1'b1 : 1'b0);

assign tmp_3_cast_mid2_fu_454_p1 = tmp_3_cast_mid2_v_fu_448_p2;

assign tmp_3_cast_mid2_v_fu_448_p2 = (tmp_3_cast_mid2_v_v_fu_441_p3 | 20'd1);

assign tmp_3_cast_mid2_v_v_fu_441_p3 = {{tmp_3_cast_mid2_v_v_s_reg_916}, {10'd0}};

assign tmp_3_cast_mid2_v_v_s_fu_265_p3 = ((tmp_1_fu_245_p2[0:0] === 1'b1) ? j_s_fu_259_p2 : j_phi_fu_203_p4);

assign tmp_3_fu_642_p1 = INPUT_BUNDLE_addr_3_s_reg_999;

assign tmp_41_i_i_i_cast_fu_763_p1 = $signed(tmp_41_i_i_i_fu_758_p2);

assign tmp_41_i_i_i_fu_758_p2 = (11'd1023 - loc_V_reg_1073);

assign tmp_42_i_i_i_cast_fu_795_p1 = $unsigned(sh_assign_1_cast_fu_788_p1);

assign tmp_42_i_i_i_fu_791_p1 = $unsigned(sh_assign_1_cast_fu_788_p1);

assign tmp_43_i_i_i_fu_799_p2 = tmp_i_i_i_fu_775_p4 >> tmp_42_i_i_i_cast_fu_795_p1;

assign tmp_44_i_i_i_fu_805_p2 = tmp_i_i_i_cast_fu_784_p1 << tmp_42_i_i_i_fu_791_p1;

assign tmp_4_fu_584_p3 = {{INPUT_BUNDLE_addr_4_s_reg_1005}, {1'd0}};

assign tmp_4_mid2_fu_458_p2 = (20'd1024 + tmp_3_cast_mid2_v_v_fu_441_p3);

assign tmp_5_fu_648_p2 = (tmp_3_fu_642_p1 - sum1_cast_fu_645_p1);

assign tmp_5_mid2_fu_464_p2 = ($signed(20'd1047552) + $signed(tmp_3_cast_mid2_v_v_fu_441_p3));

assign tmp_6_fu_281_p3 = {{j_phi_fu_203_p4}, {10'd1}};

assign tmp_7_cast_fu_563_p1 = reg_229;

assign tmp_7_fu_494_p4 = {{tmp_4_mid2_fu_458_p2[19:10]}};

assign tmp_7_mid2_fu_297_p1 = tmp_7_mid2_v_fu_289_p3;

assign tmp_7_mid2_v_fu_289_p3 = ((tmp_1_fu_245_p2[0:0] === 1'b1) ? tmp_1_mid1_fu_273_p3 : tmp_6_fu_281_p3);

assign tmp_8_cast5_fu_470_p1 = i_mid2_reg_906;

assign tmp_8_fu_318_p3 = {{tmp_3_cast_mid2_v_v_s_reg_916}, {i_mid2_reg_906}};

assign tmp_9_cast_fu_324_p1 = tmp_8_fu_318_p3;

assign tmp_9_fu_504_p3 = {{tmp_7_fu_494_p4}, {i_mid2_reg_906}};

assign tmp_fu_811_p3 = tmp_43_i_i_i_fu_799_p2[32'd53];

assign tmp_i_i_i_cast_fu_784_p1 = tmp_i_i_i_fu_775_p4;

assign tmp_i_i_i_fu_775_p4 = {{{{1'd1}, {loc_V_1_reg_1079}}}, {1'd0}};

assign tmp_i_i_i_i_cast4_fu_741_p1 = loc_V_reg_1073;

always @ (posedge ap_clk) begin
    tmp_9_cast_reg_929[20] <= 1'b0;
end

endmodule //sobel
