-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
generic (
    C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_BUNDLE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_BUNDLE_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_BUNDLE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_WREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_BUNDLE_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_BUNDLE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RVALID : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RLAST : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_BVALID : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_BUNDLE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_BUNDLE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=8355931,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=7014,HLS_SYN_LUT=7970}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111110";
    constant ap_const_lv20_FF004 : STD_LOGIC_VECTOR (19 downto 0) := "11111111000000000100";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv20_3FE : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111111110";
    constant ap_const_lv21_1FFBFF : STD_LOGIC_VECTOR (20 downto 0) := "111111111101111111111";
    constant ap_const_lv21_3FF : STD_LOGIC_VECTOR (20 downto 0) := "000000000001111111111";
    constant ap_const_lv21_1FFC01 : STD_LOGIC_VECTOR (20 downto 0) := "111111111110000000001";
    constant ap_const_lv21_401 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv20_400 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_const_lv20_FFC00 : STD_LOGIC_VECTOR (19 downto 0) := "11111111110000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal OUTPUT_BUNDLE_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal tmp_30_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_30_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_blk_n_W : STD_LOGIC;
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal tmp_32_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_32_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal INPUT_BUNDLE_WREADY : STD_LOGIC;
    signal INPUT_BUNDLE_ARVALID : STD_LOGIC;
    signal INPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal INPUT_BUNDLE_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_RVALID : STD_LOGIC;
    signal INPUT_BUNDLE_RREADY : STD_LOGIC;
    signal INPUT_BUNDLE_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_BUNDLE_RLAST : STD_LOGIC;
    signal INPUT_BUNDLE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_BUNDLE_BVALID : STD_LOGIC;
    signal INPUT_BUNDLE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_BUNDLE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_AWVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_WVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_WREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_RVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_BUNDLE_RLAST : STD_LOGIC;
    signal OUTPUT_BUNDLE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_BUNDLE_BVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_BREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_BUNDLE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_187 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_INPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal j_reg_199 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_210 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state43_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state67_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal output_read_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_read_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_239_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_flatten_next_reg_900 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_mid2_fu_251_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_reg_906 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_cast_mid2_v_v_s_fu_265_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_cast_mid2_v_v_s_reg_916 : STD_LOGIC_VECTOR (9 downto 0);
    signal OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter2_OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter3_OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter5_OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_OUTPUT_BUNDLE_addr_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_324_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_9_cast_reg_929 : STD_LOGIC_VECTOR (20 downto 0);
    signal INPUT_BUNDLE_addr_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_1_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state36_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state44_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state52_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state60_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal INPUT_BUNDLE_addr_2_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state37_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state45_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state53_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state61_pp0_stage3_iter7 : BOOLEAN;
    signal ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal ap_block_state61_io : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal INPUT_BUNDLE_addr_3_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_5_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_4_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state15_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state31_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state39_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_state47_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_state55_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_state63_pp0_stage5_iter7 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal INPUT_BUNDLE_addr_6_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_7_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_984 : STD_LOGIC_VECTOR (9 downto 0);
    signal INPUT_BUNDLE_addr_1_s_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_BUNDLE_addr_2_s_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_BUNDLE_addr_3_s_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state30_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state38_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state46_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state54_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state62_pp0_stage4_iter7 : BOOLEAN;
    signal ap_sig_ioackin_OUTPUT_BUNDLE_WREADY : STD_LOGIC;
    signal ap_block_state62_io : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011001 : BOOLEAN;
    signal INPUT_BUNDLE_addr_4_s_reg_1005 : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_BUNDLE_addr_5_s_reg_1010 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state16_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state32_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state40_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_state48_pp0_stage6_iter5 : BOOLEAN;
    signal ap_block_state56_pp0_stage6_iter6 : BOOLEAN;
    signal ap_block_state64_pp0_stage6_iter7 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011001 : BOOLEAN;
    signal INPUT_BUNDLE_addr_6_s_reg_1015 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state17_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state33_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_state41_pp0_stage7_iter4 : BOOLEAN;
    signal ap_block_state49_pp0_stage7_iter5 : BOOLEAN;
    signal ap_block_state57_pp0_stage7_iter6 : BOOLEAN;
    signal ap_block_state65_pp0_stage7_iter7 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011001 : BOOLEAN;
    signal sum1_fu_608_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum1_reg_1020 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_614_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_reg_1025 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_636_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_reg_1030 : STD_LOGIC_VECTOR (9 downto 0);
    signal convulution_horizont_fu_657_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal convulution_horizont_reg_1035 : STD_LOGIC_VECTOR (10 downto 0);
    signal convulution_vertical_fu_695_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal convulution_vertical_reg_1040 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_866_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_21_reg_1045 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_872_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_reg_1050 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_30_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_30_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_30_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_30_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_32_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_32_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_32_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_32_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1068 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_reg_1073 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_737_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1079 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_750_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1084 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_767_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_1089 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1094 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_856_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_860_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage7_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal indvar_flatten_phi_fu_191_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_phi_fu_203_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_phi_fu_214_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal output4_sum1_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum5_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum6_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum7_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum9_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum8_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum1_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum2_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_INPUT_BUNDLE_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUTPUT_BUNDLE_WREADY : STD_LOGIC := '0';
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_s_fu_259_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_mid1_fu_273_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_281_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_mid2_v_fu_289_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_mid2_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_318_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum2_fu_328_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum2_cast_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum4_fu_359_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum4_cast_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum6_fu_381_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum6_cast_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_fu_401_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum8_cast_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum5_fu_421_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum5_cast_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_mid2_v_v_fu_441_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_cast_mid2_v_fu_448_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_cast_mid2_fu_454_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_8_cast5_fu_470_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum3_fu_473_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum3_cast_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid2_fu_458_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_fu_494_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_504_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_mid2_fu_464_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_fu_526_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_536_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_14_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_567_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_584_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_cast_fu_563_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_cast_fu_578_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_598_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_cast_fu_604_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_cast_fu_574_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_cast_fu_591_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_cast_fu_595_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum5_neg_fu_620_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum5_neg_cast_fu_626_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_cast_fu_581_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum6_neg_fu_630_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_642_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum1_cast_fu_645_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_cast_fu_654_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_648_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_663_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_674_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_cast_fu_686_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_cast_fu_670_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_cast_fu_682_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_i_cast4_fu_741_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_744_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_i_i_i_fu_758_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_i_i_i_cast_fu_763_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_775_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_1_cast_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_i_i_cast_fu_795_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_784_p1 : STD_LOGIC_VECTOR (120 downto 0);
    signal tmp_42_i_i_i_fu_791_p1 : STD_LOGIC_VECTOR (120 downto 0);
    signal tmp_43_i_i_i_fu_799_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_811_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_i_i_i_fu_805_p2 : STD_LOGIC_VECTOR (120 downto 0);
    signal tmp_24_cast1_fu_819_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_24_fu_823_p4 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_25_fu_833_p3 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_26_fu_840_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_866_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_701_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_21_fu_866_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_872_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_704_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_872_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_221_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_312_ce : STD_LOGIC;
    signal grp_fu_349_ce : STD_LOGIC;
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_853 : BOOLEAN;
    signal ap_condition_867 : BOOLEAN;
    signal ap_condition_879 : BOOLEAN;
    signal ap_condition_891 : BOOLEAN;
    signal ap_condition_901 : BOOLEAN;
    signal ap_condition_913 : BOOLEAN;
    signal ap_condition_925 : BOOLEAN;
    signal ap_condition_936 : BOOLEAN;
    signal ap_condition_1547 : BOOLEAN;
    signal ap_condition_1551 : BOOLEAN;

    component sobel_uitodp_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_dsqrt_64ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_urem_20ns_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component sobel_mul_mul_11seOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component sobel_mac_muladd_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component sobel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_INPUT_BUNDLE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sobel_OUTPUT_BUNDLE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sobel_AXILiteS_s_axi_U : component sobel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r => input_r,
        output_r => output_r);

    sobel_INPUT_BUNDLE_m_axi_U : component sobel_INPUT_BUNDLE_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_BUNDLE_AWVALID,
        AWREADY => m_axi_INPUT_BUNDLE_AWREADY,
        AWADDR => m_axi_INPUT_BUNDLE_AWADDR,
        AWID => m_axi_INPUT_BUNDLE_AWID,
        AWLEN => m_axi_INPUT_BUNDLE_AWLEN,
        AWSIZE => m_axi_INPUT_BUNDLE_AWSIZE,
        AWBURST => m_axi_INPUT_BUNDLE_AWBURST,
        AWLOCK => m_axi_INPUT_BUNDLE_AWLOCK,
        AWCACHE => m_axi_INPUT_BUNDLE_AWCACHE,
        AWPROT => m_axi_INPUT_BUNDLE_AWPROT,
        AWQOS => m_axi_INPUT_BUNDLE_AWQOS,
        AWREGION => m_axi_INPUT_BUNDLE_AWREGION,
        AWUSER => m_axi_INPUT_BUNDLE_AWUSER,
        WVALID => m_axi_INPUT_BUNDLE_WVALID,
        WREADY => m_axi_INPUT_BUNDLE_WREADY,
        WDATA => m_axi_INPUT_BUNDLE_WDATA,
        WSTRB => m_axi_INPUT_BUNDLE_WSTRB,
        WLAST => m_axi_INPUT_BUNDLE_WLAST,
        WID => m_axi_INPUT_BUNDLE_WID,
        WUSER => m_axi_INPUT_BUNDLE_WUSER,
        ARVALID => m_axi_INPUT_BUNDLE_ARVALID,
        ARREADY => m_axi_INPUT_BUNDLE_ARREADY,
        ARADDR => m_axi_INPUT_BUNDLE_ARADDR,
        ARID => m_axi_INPUT_BUNDLE_ARID,
        ARLEN => m_axi_INPUT_BUNDLE_ARLEN,
        ARSIZE => m_axi_INPUT_BUNDLE_ARSIZE,
        ARBURST => m_axi_INPUT_BUNDLE_ARBURST,
        ARLOCK => m_axi_INPUT_BUNDLE_ARLOCK,
        ARCACHE => m_axi_INPUT_BUNDLE_ARCACHE,
        ARPROT => m_axi_INPUT_BUNDLE_ARPROT,
        ARQOS => m_axi_INPUT_BUNDLE_ARQOS,
        ARREGION => m_axi_INPUT_BUNDLE_ARREGION,
        ARUSER => m_axi_INPUT_BUNDLE_ARUSER,
        RVALID => m_axi_INPUT_BUNDLE_RVALID,
        RREADY => m_axi_INPUT_BUNDLE_RREADY,
        RDATA => m_axi_INPUT_BUNDLE_RDATA,
        RLAST => m_axi_INPUT_BUNDLE_RLAST,
        RID => m_axi_INPUT_BUNDLE_RID,
        RUSER => m_axi_INPUT_BUNDLE_RUSER,
        RRESP => m_axi_INPUT_BUNDLE_RRESP,
        BVALID => m_axi_INPUT_BUNDLE_BVALID,
        BREADY => m_axi_INPUT_BUNDLE_BREADY,
        BRESP => m_axi_INPUT_BUNDLE_BRESP,
        BID => m_axi_INPUT_BUNDLE_BID,
        BUSER => m_axi_INPUT_BUNDLE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_BUNDLE_ARVALID,
        I_ARREADY => INPUT_BUNDLE_ARREADY,
        I_ARADDR => INPUT_BUNDLE_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_BUNDLE_RVALID,
        I_RREADY => INPUT_BUNDLE_RREADY,
        I_RDATA => INPUT_BUNDLE_RDATA,
        I_RID => INPUT_BUNDLE_RID,
        I_RUSER => INPUT_BUNDLE_RUSER,
        I_RRESP => INPUT_BUNDLE_RRESP,
        I_RLAST => INPUT_BUNDLE_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_BUNDLE_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_BUNDLE_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => INPUT_BUNDLE_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_BUNDLE_BRESP,
        I_BID => INPUT_BUNDLE_BID,
        I_BUSER => INPUT_BUNDLE_BUSER);

    sobel_OUTPUT_BUNDLE_m_axi_U : component sobel_OUTPUT_BUNDLE_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_BUNDLE_AWVALID,
        AWREADY => m_axi_OUTPUT_BUNDLE_AWREADY,
        AWADDR => m_axi_OUTPUT_BUNDLE_AWADDR,
        AWID => m_axi_OUTPUT_BUNDLE_AWID,
        AWLEN => m_axi_OUTPUT_BUNDLE_AWLEN,
        AWSIZE => m_axi_OUTPUT_BUNDLE_AWSIZE,
        AWBURST => m_axi_OUTPUT_BUNDLE_AWBURST,
        AWLOCK => m_axi_OUTPUT_BUNDLE_AWLOCK,
        AWCACHE => m_axi_OUTPUT_BUNDLE_AWCACHE,
        AWPROT => m_axi_OUTPUT_BUNDLE_AWPROT,
        AWQOS => m_axi_OUTPUT_BUNDLE_AWQOS,
        AWREGION => m_axi_OUTPUT_BUNDLE_AWREGION,
        AWUSER => m_axi_OUTPUT_BUNDLE_AWUSER,
        WVALID => m_axi_OUTPUT_BUNDLE_WVALID,
        WREADY => m_axi_OUTPUT_BUNDLE_WREADY,
        WDATA => m_axi_OUTPUT_BUNDLE_WDATA,
        WSTRB => m_axi_OUTPUT_BUNDLE_WSTRB,
        WLAST => m_axi_OUTPUT_BUNDLE_WLAST,
        WID => m_axi_OUTPUT_BUNDLE_WID,
        WUSER => m_axi_OUTPUT_BUNDLE_WUSER,
        ARVALID => m_axi_OUTPUT_BUNDLE_ARVALID,
        ARREADY => m_axi_OUTPUT_BUNDLE_ARREADY,
        ARADDR => m_axi_OUTPUT_BUNDLE_ARADDR,
        ARID => m_axi_OUTPUT_BUNDLE_ARID,
        ARLEN => m_axi_OUTPUT_BUNDLE_ARLEN,
        ARSIZE => m_axi_OUTPUT_BUNDLE_ARSIZE,
        ARBURST => m_axi_OUTPUT_BUNDLE_ARBURST,
        ARLOCK => m_axi_OUTPUT_BUNDLE_ARLOCK,
        ARCACHE => m_axi_OUTPUT_BUNDLE_ARCACHE,
        ARPROT => m_axi_OUTPUT_BUNDLE_ARPROT,
        ARQOS => m_axi_OUTPUT_BUNDLE_ARQOS,
        ARREGION => m_axi_OUTPUT_BUNDLE_ARREGION,
        ARUSER => m_axi_OUTPUT_BUNDLE_ARUSER,
        RVALID => m_axi_OUTPUT_BUNDLE_RVALID,
        RREADY => m_axi_OUTPUT_BUNDLE_RREADY,
        RDATA => m_axi_OUTPUT_BUNDLE_RDATA,
        RLAST => m_axi_OUTPUT_BUNDLE_RLAST,
        RID => m_axi_OUTPUT_BUNDLE_RID,
        RUSER => m_axi_OUTPUT_BUNDLE_RUSER,
        RRESP => m_axi_OUTPUT_BUNDLE_RRESP,
        BVALID => m_axi_OUTPUT_BUNDLE_BVALID,
        BREADY => m_axi_OUTPUT_BUNDLE_BREADY,
        BRESP => m_axi_OUTPUT_BUNDLE_BRESP,
        BID => m_axi_OUTPUT_BUNDLE_BID,
        BUSER => m_axi_OUTPUT_BUNDLE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_BUNDLE_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_BUNDLE_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_BUNDLE_RDATA,
        I_RID => OUTPUT_BUNDLE_RID,
        I_RUSER => OUTPUT_BUNDLE_RUSER,
        I_RRESP => OUTPUT_BUNDLE_RRESP,
        I_RLAST => OUTPUT_BUNDLE_RLAST,
        I_AWVALID => OUTPUT_BUNDLE_AWVALID,
        I_AWREADY => OUTPUT_BUNDLE_AWREADY,
        I_AWADDR => ap_reg_pp0_iter7_OUTPUT_BUNDLE_addr_reg_924,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_3FE,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_BUNDLE_WVALID,
        I_WREADY => OUTPUT_BUNDLE_WREADY,
        I_WDATA => tmp_28_reg_1104,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => OUTPUT_BUNDLE_BVALID,
        I_BREADY => OUTPUT_BUNDLE_BREADY,
        I_BRESP => OUTPUT_BUNDLE_BRESP,
        I_BID => OUTPUT_BUNDLE_BID,
        I_BUSER => OUTPUT_BUNDLE_BUSER);

    sobel_uitodp_32nsbkb_U0 : component sobel_uitodp_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_221_p0,
        ce => grp_fu_221_ce,
        dout => grp_fu_221_p1);

    sobel_dsqrt_64ns_cud_U1 : component sobel_dsqrt_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_23_reg_1068,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    sobel_urem_20ns_1dEe_U2 : component sobel_urem_20ns_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 24,
        din0_WIDTH => 20,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten_phi_fu_191_p4,
        din1 => grp_fu_312_p1,
        ce => grp_fu_312_ce,
        dout => grp_fu_312_p2);

    sobel_urem_20ns_1dEe_U3 : component sobel_urem_20ns_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 24,
        din0_WIDTH => 20,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten_next_reg_900,
        din1 => grp_fu_349_p1,
        ce => grp_fu_349_ce,
        dout => grp_fu_349_p2);

    sobel_mul_mul_11seOg_U4 : component sobel_mul_mul_11seOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_21_fu_866_p0,
        din1 => tmp_21_fu_866_p1,
        dout => tmp_21_fu_866_p2);

    sobel_mac_muladd_fYi_U5 : component sobel_mac_muladd_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_872_p0,
        din1 => grp_fu_872_p1,
        din2 => tmp_21_reg_1045,
        dout => grp_fu_872_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_INPUT_BUNDLE_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage4_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage5_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage6_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage7_flag00001001 = ap_const_boolean_0)) or ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage1_flag00001001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_0;
            else
                if ((ap_condition_1547 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = OUTPUT_BUNDLE_AWREADY))) then 
                        ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_0;
            else
                if ((ap_condition_1551 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage4_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = OUTPUT_BUNDLE_WREADY))) then 
                        ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                i_reg_210 <= i_1_reg_984;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_210 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                indvar_flatten_reg_187 <= indvar_flatten_next_reg_900;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_187 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    j_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                j_reg_199 <= tmp_3_cast_mid2_v_v_s_reg_916;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_199 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_1_reg_942 <= input2_sum5_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_1_s_reg_989 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_2_reg_948 <= input2_sum6_fu_390_p2;
                INPUT_BUNDLE_addr_3_reg_954 <= input2_sum7_fu_410_p2;
                INPUT_BUNDLE_addr_5_reg_960 <= input2_sum9_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_2_s_reg_994 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_3_s_reg_999 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_4_reg_966 <= input2_sum8_fu_483_p2;
                INPUT_BUNDLE_addr_6_reg_972 <= input2_sum1_fu_515_p2;
                INPUT_BUNDLE_addr_7_reg_978 <= input2_sum2_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_4_s_reg_1005 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_5_s_reg_1010 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_6_s_reg_1015 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                INPUT_BUNDLE_addr_reg_936 <= input2_sum_fu_338_p2;
                    tmp_9_cast_reg_929(19 downto 0) <= tmp_9_cast_fu_324_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_233_p2))) then
                OUTPUT_BUNDLE_addr_reg_924 <= output4_sum1_fu_301_p2;
                i_mid2_reg_906 <= i_mid2_fu_251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_OUTPUT_BUNDLE_addr_reg_924 <= OUTPUT_BUNDLE_addr_reg_924;
                ap_reg_pp0_iter1_exitcond_flatten_reg_896 <= exitcond_flatten_reg_896;
                ap_reg_pp0_iter2_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter1_OUTPUT_BUNDLE_addr_reg_924;
                ap_reg_pp0_iter2_exitcond_flatten_reg_896 <= ap_reg_pp0_iter1_exitcond_flatten_reg_896;
                ap_reg_pp0_iter3_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter2_OUTPUT_BUNDLE_addr_reg_924;
                ap_reg_pp0_iter3_exitcond_flatten_reg_896 <= ap_reg_pp0_iter2_exitcond_flatten_reg_896;
                ap_reg_pp0_iter4_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter3_OUTPUT_BUNDLE_addr_reg_924;
                ap_reg_pp0_iter4_exitcond_flatten_reg_896 <= ap_reg_pp0_iter3_exitcond_flatten_reg_896;
                ap_reg_pp0_iter4_tmp_32_reg_1064 <= tmp_32_reg_1064;
                ap_reg_pp0_iter5_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter4_OUTPUT_BUNDLE_addr_reg_924;
                ap_reg_pp0_iter5_exitcond_flatten_reg_896 <= ap_reg_pp0_iter4_exitcond_flatten_reg_896;
                ap_reg_pp0_iter5_tmp_32_reg_1064 <= ap_reg_pp0_iter4_tmp_32_reg_1064;
                ap_reg_pp0_iter6_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter5_OUTPUT_BUNDLE_addr_reg_924;
                ap_reg_pp0_iter6_exitcond_flatten_reg_896 <= ap_reg_pp0_iter5_exitcond_flatten_reg_896;
                ap_reg_pp0_iter6_tmp_32_reg_1064 <= ap_reg_pp0_iter5_tmp_32_reg_1064;
                ap_reg_pp0_iter7_OUTPUT_BUNDLE_addr_reg_924 <= ap_reg_pp0_iter6_OUTPUT_BUNDLE_addr_reg_924;
                ap_reg_pp0_iter7_exitcond_flatten_reg_896 <= ap_reg_pp0_iter6_exitcond_flatten_reg_896;
                ap_reg_pp0_iter7_tmp_32_reg_1064 <= ap_reg_pp0_iter6_tmp_32_reg_1064;
                ap_reg_pp0_iter8_tmp_32_reg_1064 <= ap_reg_pp0_iter7_tmp_32_reg_1064;
                exitcond_flatten_reg_896 <= exitcond_flatten_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter3_tmp_30_reg_1060 <= tmp_30_reg_1060;
                ap_reg_pp0_iter4_tmp_30_reg_1060 <= ap_reg_pp0_iter3_tmp_30_reg_1060;
                ap_reg_pp0_iter5_tmp_30_reg_1060 <= ap_reg_pp0_iter4_tmp_30_reg_1060;
                ap_reg_pp0_iter6_tmp_30_reg_1060 <= ap_reg_pp0_iter5_tmp_30_reg_1060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_896))) then
                convulution_horizont_reg_1035 <= convulution_horizont_fu_657_p2;
                convulution_vertical_reg_1040 <= convulution_vertical_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then
                i_1_reg_984 <= i_1_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_896) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                icmp_reg_1094 <= icmp_fu_850_p2;
                tmp_27_reg_1099 <= tmp_27_fu_856_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                indvar_flatten_next_reg_900 <= indvar_flatten_next_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_read_reg_884 <= input_r;
                output_read_reg_879 <= output_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_896) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                isNeg_reg_1084 <= sh_assign_fu_744_p2(11 downto 11);
                sh_assign_1_reg_1089 <= sh_assign_1_fu_767_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter6_exitcond_flatten_reg_896))) then
                loc_V_1_reg_1079 <= loc_V_1_fu_737_p1;
                loc_V_reg_1073 <= p_Val2_s_fu_723_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_896))) then
                p_reg_1050 <= grp_fu_872_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then
                reg_229 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                sum1_reg_1020 <= sum1_fu_608_p2;
                tmp3_reg_1025 <= tmp3_fu_614_p2;
                tmp_16_reg_1030 <= tmp_16_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_896))) then
                tmp_21_reg_1045 <= tmp_21_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_896))) then
                tmp_23_reg_1068 <= grp_fu_221_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_896) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then
                tmp_28_reg_1104 <= tmp_28_fu_860_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_896))) then
                tmp_30_reg_1060 <= tmp_30_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_896))) then
                tmp_32_reg_1064 <= tmp_32_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_233_p2))) then
                tmp_3_cast_mid2_v_v_s_reg_916 <= tmp_3_cast_mid2_v_v_s_fu_265_p3;
            end if;
        end if;
    end process;
    tmp_9_cast_reg_929(20) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, exitcond_flatten_fu_233_p2, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage7_flag00011011, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage4_flag00011011, ap_block_pp0_stage5_flag00011011, ap_block_pp0_stage6_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_233_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_233_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    INPUT_BUNDLE_ARADDR_assign_proc : process(INPUT_BUNDLE_addr_reg_936, INPUT_BUNDLE_addr_1_reg_942, INPUT_BUNDLE_addr_2_reg_948, INPUT_BUNDLE_addr_3_reg_954, INPUT_BUNDLE_addr_5_reg_960, INPUT_BUNDLE_addr_4_reg_966, INPUT_BUNDLE_addr_6_reg_972, INPUT_BUNDLE_addr_7_reg_978, ap_reg_ioackin_INPUT_BUNDLE_ARREADY, ap_condition_853, ap_condition_867, ap_condition_879, ap_condition_891, ap_condition_901, ap_condition_913, ap_condition_925, ap_condition_936)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) then
            if ((ap_condition_936 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_7_reg_978;
            elsif ((ap_condition_925 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_6_reg_972;
            elsif ((ap_condition_913 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_5_reg_960;
            elsif ((ap_condition_901 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_4_reg_966;
            elsif ((ap_condition_891 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_3_reg_954;
            elsif ((ap_condition_879 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_2_reg_948;
            elsif ((ap_condition_867 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_1_reg_942;
            elsif ((ap_condition_853 = ap_const_boolean_1)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_reg_936;
            else 
                INPUT_BUNDLE_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            INPUT_BUNDLE_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_BUNDLE_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_reg_ioackin_INPUT_BUNDLE_ARREADY, ap_block_pp0_stage2_flag00001001, ap_block_pp0_stage3_flag00001001, ap_block_pp0_stage4_flag00001001, ap_block_pp0_stage5_flag00001001, ap_block_pp0_stage6_flag00001001, ap_block_pp0_stage7_flag00001001, ap_block_pp0_stage0_flag00001001, ap_block_pp0_stage1_flag00001001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage4_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage5_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage6_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage7_flag00001001 = ap_const_boolean_0)) or ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY) and (ap_block_pp0_stage1_flag00001001 = ap_const_boolean_0)))) then 
            INPUT_BUNDLE_ARVALID <= ap_const_logic_1;
        else 
            INPUT_BUNDLE_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_BUNDLE_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage3_flag00011001, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage7_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)))) then 
            INPUT_BUNDLE_RREADY <= ap_const_logic_1;
        else 
            INPUT_BUNDLE_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_BUNDLE_blk_n_AR_assign_proc : process(m_axi_INPUT_BUNDLE_ARREADY, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_flag00000000, exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_flag00000000, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00000000, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00000000, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00000000, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00000000, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_896 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00000000 = ap_const_boolean_0)) or ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            INPUT_BUNDLE_blk_n_AR <= m_axi_INPUT_BUNDLE_ARREADY;
        else 
            INPUT_BUNDLE_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_BUNDLE_blk_n_R_assign_proc : process(m_axi_INPUT_BUNDLE_RVALID, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00000000, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_flag00000000, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00000000, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00000000, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00000000, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00000000, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00000000 = ap_const_boolean_0)) or ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            INPUT_BUNDLE_blk_n_R <= m_axi_INPUT_BUNDLE_RVALID;
        else 
            INPUT_BUNDLE_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter6_tmp_30_reg_1060, ap_block_pp0_stage3_flag00001001, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_reg_pp0_iter6_tmp_30_reg_1060 = ap_const_lv1_1) and (ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY))) then 
            OUTPUT_BUNDLE_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter8_tmp_32_reg_1064, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_32_reg_1064) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            OUTPUT_BUNDLE_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter7_exitcond_flatten_reg_896, ap_block_pp0_stage4_flag00001001, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_896) and (ap_block_pp0_stage4_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY))) then 
            OUTPUT_BUNDLE_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_AW_assign_proc : process(m_axi_OUTPUT_BUNDLE_AWREADY, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00000000, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter6_tmp_30_reg_1060)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_reg_pp0_iter6_tmp_30_reg_1060 = ap_const_lv1_1))) then 
            OUTPUT_BUNDLE_blk_n_AW <= m_axi_OUTPUT_BUNDLE_AWREADY;
        else 
            OUTPUT_BUNDLE_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_B_assign_proc : process(m_axi_OUTPUT_BUNDLE_BVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter8_tmp_32_reg_1064)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_32_reg_1064))) then 
            OUTPUT_BUNDLE_blk_n_B <= m_axi_OUTPUT_BUNDLE_BVALID;
        else 
            OUTPUT_BUNDLE_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_W_assign_proc : process(m_axi_OUTPUT_BUNDLE_WREADY, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter7_exitcond_flatten_reg_896)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_896))) then 
            OUTPUT_BUNDLE_blk_n_W <= m_axi_OUTPUT_BUNDLE_WREADY;
        else 
            OUTPUT_BUNDLE_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state68 <= ap_CS_fsm(9);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter2, INPUT_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter2, INPUT_BUNDLE_RVALID, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state10_io)) or ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter2, INPUT_BUNDLE_RVALID, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state10_io)) or ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)));
    end process;

        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_flag00001001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter8_tmp_32_reg_1064, INPUT_BUNDLE_RVALID, OUTPUT_BUNDLE_BVALID)
    begin
                ap_block_pp0_stage1_flag00001001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_32_reg_1064) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)));
    end process;


    ap_block_pp0_stage1_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter8_tmp_32_reg_1064, INPUT_BUNDLE_RVALID, OUTPUT_BUNDLE_BVALID, ap_block_state11_io)
    begin
                ap_block_pp0_stage1_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or (ap_const_boolean_1 = ap_block_state11_io))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_32_reg_1064) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)));
    end process;


    ap_block_pp0_stage1_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter8_tmp_32_reg_1064, INPUT_BUNDLE_RVALID, OUTPUT_BUNDLE_BVALID, ap_block_state11_io)
    begin
                ap_block_pp0_stage1_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or (ap_const_boolean_1 = ap_block_state11_io))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_32_reg_1064) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)));
    end process;

        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_flag00001001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage2_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_pp0_stage2_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage2_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)));
    end process;


    ap_block_pp0_stage2_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage2_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)));
    end process;

        ap_block_pp0_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_flag00001001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage3_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_pp0_stage3_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter7, INPUT_BUNDLE_RVALID, ap_block_state5_io, ap_block_state61_io)
    begin
                ap_block_pp0_stage3_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_boolean_1 = ap_block_state61_io)));
    end process;


    ap_block_pp0_stage3_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter7, INPUT_BUNDLE_RVALID, ap_block_state5_io, ap_block_state61_io)
    begin
                ap_block_pp0_stage3_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_boolean_1 = ap_block_state61_io)));
    end process;

        ap_block_pp0_stage4_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_flag00001001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage4_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_pp0_stage4_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter7, INPUT_BUNDLE_RVALID, ap_block_state6_io, ap_block_state62_io)
    begin
                ap_block_pp0_stage4_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_boolean_1 = ap_block_state62_io)));
    end process;


    ap_block_pp0_stage4_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_enable_reg_pp0_iter7, INPUT_BUNDLE_RVALID, ap_block_state6_io, ap_block_state62_io)
    begin
                ap_block_pp0_stage4_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_boolean_1 = ap_block_state62_io)));
    end process;

        ap_block_pp0_stage5_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_flag00001001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage5_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_pp0_stage5_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state7_io)
    begin
                ap_block_pp0_stage5_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state7_io)));
    end process;


    ap_block_pp0_stage5_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state7_io)
    begin
                ap_block_pp0_stage5_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state7_io)));
    end process;

        ap_block_pp0_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_flag00001001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage6_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_pp0_stage6_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage6_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;


    ap_block_pp0_stage6_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage6_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;

        ap_block_pp0_stage7_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_flag00001001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_pp0_stage7_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_pp0_stage7_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state9_io)
    begin
                ap_block_pp0_stage7_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;


    ap_block_pp0_stage7_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID, ap_block_state9_io)
    begin
                ap_block_pp0_stage7_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;


    ap_block_state10_io_assign_proc : process(exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state10_io <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;

        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state11_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;


    ap_block_state11_pp0_stage1_iter1_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state11_pp0_stage1_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_state12_pp0_stage2_iter1_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state12_pp0_stage2_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_state13_pp0_stage3_iter1_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state13_pp0_stage3_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_state14_pp0_stage4_iter1_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state14_pp0_stage4_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_state15_pp0_stage5_iter1_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state15_pp0_stage5_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_state16_pp0_stage6_iter1_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state16_pp0_stage6_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_state17_pp0_stage7_iter1_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state17_pp0_stage7_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;


    ap_block_state18_pp0_stage0_iter2_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_896, INPUT_BUNDLE_RVALID)
    begin
                ap_block_state18_pp0_stage0_iter2 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_const_logic_0 = INPUT_BUNDLE_RVALID));
    end process;

        ap_block_state19_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage7_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state4_io <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage6_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage7_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state5_io <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;

        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state61_io_assign_proc : process(ap_reg_pp0_iter6_tmp_30_reg_1060, ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
                ap_block_state61_io <= ((ap_reg_pp0_iter6_tmp_30_reg_1060 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY));
    end process;

        ap_block_state61_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state62_io_assign_proc : process(ap_reg_pp0_iter7_exitcond_flatten_reg_896, ap_sig_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
                ap_block_state62_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_896) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_BUNDLE_WREADY));
    end process;

        ap_block_state62_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage5_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage6_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage7_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state67_pp0_stage1_iter8_assign_proc : process(ap_reg_pp0_iter8_tmp_32_reg_1064, OUTPUT_BUNDLE_BVALID)
    begin
                ap_block_state67_pp0_stage1_iter8 <= ((ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_32_reg_1064) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID));
    end process;


    ap_block_state6_io_assign_proc : process(exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state6_io <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;

        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state7_io <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;

        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state8_io <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;

        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(exitcond_flatten_reg_896, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
                ap_block_state9_io <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY));
    end process;

        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1547_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter6_tmp_30_reg_1060)
    begin
                ap_condition_1547 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_reg_pp0_iter6_tmp_30_reg_1060 = ap_const_lv1_1));
    end process;


    ap_condition_1551_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter7_exitcond_flatten_reg_896)
    begin
                ap_condition_1551 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_896));
    end process;


    ap_condition_853_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_896, ap_block_pp0_stage2_flag00001001)
    begin
                ap_condition_853 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_867_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00001001)
    begin
                ap_condition_867 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_879_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00001001)
    begin
                ap_condition_879 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_891_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00001001)
    begin
                ap_condition_891 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_901_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00001001)
    begin
                ap_condition_901 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_913_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_896, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00001001)
    begin
                ap_condition_913 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_925_assign_proc : process(exitcond_flatten_reg_896, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00001001)
    begin
                ap_condition_925 <= ((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_936_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten_reg_896, ap_block_pp0_stage1_flag00001001)
    begin
                ap_condition_936 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_896) and (ap_block_pp0_stage1_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_233_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten_fu_233_p2)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_INPUT_BUNDLE_ARREADY_assign_proc : process(INPUT_BUNDLE_ARREADY, ap_reg_ioackin_INPUT_BUNDLE_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) then 
            ap_sig_ioackin_INPUT_BUNDLE_ARREADY <= INPUT_BUNDLE_ARREADY;
        else 
            ap_sig_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY_assign_proc : process(OUTPUT_BUNDLE_AWREADY, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) then 
            ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY <= OUTPUT_BUNDLE_AWREADY;
        else 
            ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_BUNDLE_WREADY_assign_proc : process(OUTPUT_BUNDLE_WREADY, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) then 
            ap_sig_ioackin_OUTPUT_BUNDLE_WREADY <= OUTPUT_BUNDLE_WREADY;
        else 
            ap_sig_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    convulution_horizont_fu_657_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_654_p1) + unsigned(tmp_5_fu_648_p2));
    convulution_vertical_fu_695_p2 <= std_logic_vector(unsigned(tmp_17_fu_689_p2) + unsigned(tmp_28_cast_fu_682_p1));
    exitcond_flatten_fu_233_p2 <= "1" when (indvar_flatten_phi_fu_191_p4 = ap_const_lv20_FF004) else "0";

    grp_fu_221_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage7_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_221_ce <= ap_const_logic_1;
        else 
            grp_fu_221_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_221_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_1050),32));

    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage3_flag00011001, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage7_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_312_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage3_flag00011001, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage7_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_312_ce <= ap_const_logic_1;
        else 
            grp_fu_312_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_312_p1 <= ap_const_lv20_3FE(11 - 1 downto 0);

    grp_fu_349_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage3_flag00011001, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage7_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_349_ce <= ap_const_logic_1;
        else 
            grp_fu_349_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_349_p1 <= ap_const_lv20_3FE(11 - 1 downto 0);
    grp_fu_872_p0 <= tmp_18_fu_704_p1(11 - 1 downto 0);
    grp_fu_872_p1 <= tmp_18_fu_704_p1(11 - 1 downto 0);
    i_1_fu_558_p2 <= std_logic_vector(unsigned(i_mid2_reg_906) + unsigned(ap_const_lv10_1));
    i_mid2_fu_251_p3 <= 
        ap_const_lv10_1 when (tmp_1_fu_245_p2(0) = '1') else 
        i_phi_fu_214_p4;

    i_phi_fu_214_p4_assign_proc : process(exitcond_flatten_reg_896, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, i_reg_210, i_1_reg_984)
    begin
        if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_phi_fu_214_p4 <= i_1_reg_984;
        else 
            i_phi_fu_214_p4 <= i_reg_210;
        end if; 
    end process;

    icmp_fu_850_p2 <= "0" when (tmp_26_fu_840_p4 = ap_const_lv2_0) else "1";
    indvar_flatten_next_fu_239_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_191_p4) + unsigned(ap_const_lv20_1));

    indvar_flatten_phi_fu_191_p4_assign_proc : process(exitcond_flatten_reg_896, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, indvar_flatten_reg_187, indvar_flatten_next_reg_900)
    begin
        if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_191_p4 <= indvar_flatten_next_reg_900;
        else 
            indvar_flatten_phi_fu_191_p4 <= indvar_flatten_reg_187;
        end if; 
    end process;

    input2_sum1_fu_515_p2 <= std_logic_vector(unsigned(tmp_10_fu_511_p1) + unsigned(input_read_reg_884));
    input2_sum2_fu_547_p2 <= std_logic_vector(unsigned(tmp_14_fu_543_p1) + unsigned(input_read_reg_884));
    input2_sum5_fu_370_p2 <= std_logic_vector(unsigned(sum4_cast_fu_366_p1) + unsigned(input_read_reg_884));
    input2_sum6_fu_390_p2 <= std_logic_vector(unsigned(sum6_cast_fu_386_p1) + unsigned(input_read_reg_884));
    input2_sum7_fu_410_p2 <= std_logic_vector(signed(sum8_cast_fu_406_p1) + signed(input_read_reg_884));
    input2_sum8_fu_483_p2 <= std_logic_vector(unsigned(sum3_cast_fu_479_p1) + unsigned(input_read_reg_884));
    input2_sum9_fu_430_p2 <= std_logic_vector(unsigned(sum5_cast_fu_426_p1) + unsigned(input_read_reg_884));
    input2_sum_fu_338_p2 <= std_logic_vector(signed(sum2_cast_fu_334_p1) + signed(input_read_reg_884));
    isNeg_fu_750_p3 <= sh_assign_fu_744_p2(11 downto 11);

    j_phi_fu_203_p4_assign_proc : process(exitcond_flatten_reg_896, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, j_reg_199, tmp_3_cast_mid2_v_v_s_reg_916)
    begin
        if (((exitcond_flatten_reg_896 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_phi_fu_203_p4 <= tmp_3_cast_mid2_v_v_s_reg_916;
        else 
            j_phi_fu_203_p4 <= j_reg_199;
        end if; 
    end process;

    j_s_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(j_phi_fu_203_p4));
    loc_V_1_fu_737_p1 <= p_Val2_s_fu_723_p1(52 - 1 downto 0);
    output4_sum1_fu_301_p2 <= std_logic_vector(unsigned(tmp_7_mid2_fu_297_p1) + unsigned(output_read_reg_879));
    p_Val2_s_fu_723_p1 <= grp_fu_224_p2;
        sh_assign_1_cast_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_1089),32));

    sh_assign_1_fu_767_p3 <= 
        tmp_41_i_i_i_cast_fu_763_p1 when (isNeg_fu_750_p3(0) = '1') else 
        sh_assign_fu_744_p2;
    sh_assign_fu_744_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast4_fu_741_p1));
    sum1_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_reg_1020),11));
    sum1_fu_608_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_604_p1) + unsigned(tmp_12_cast_fu_574_p1));
        sum2_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_328_p2),32));

    sum2_fu_328_p2 <= std_logic_vector(signed(ap_const_lv21_1FFBFF) + signed(tmp_9_cast_fu_324_p1));
    sum3_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_473_p2),32));
    sum3_fu_473_p2 <= std_logic_vector(unsigned(tmp_3_cast_mid2_fu_454_p1) + unsigned(tmp_8_cast5_fu_470_p1));
    sum4_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_359_p3),32));
    sum4_fu_359_p3 <= (tmp_3_cast_mid2_v_v_s_reg_916 & tmp1_fu_354_p2);
    sum5_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_421_p2),32));
    sum5_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv21_401) + unsigned(tmp_9_cast_reg_929));
        sum5_neg_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum5_neg_fu_620_p2),10));

    sum5_neg_fu_620_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_563_p1) - unsigned(tmp_13_cast_fu_578_p1));
    sum6_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_381_p2),32));
    sum6_fu_381_p2 <= std_logic_vector(unsigned(ap_const_lv21_3FF) + unsigned(tmp_9_cast_reg_929));
    sum6_neg_fu_630_p2 <= std_logic_vector(signed(sum5_neg_cast_fu_626_p1) + signed(tmp_15_cast_fu_581_p1));
        sum8_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum8_fu_401_p2),32));

    sum8_fu_401_p2 <= std_logic_vector(signed(ap_const_lv21_1FFC01) + signed(tmp_9_cast_reg_929));
    tmp1_fu_354_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(i_mid2_reg_906));
    tmp2_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_598_p2),10));
    tmp2_fu_598_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_563_p1) + unsigned(tmp_13_cast_fu_578_p1));
    tmp3_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_1025),11));
    tmp3_fu_614_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_591_p1) + unsigned(tmp_18_cast_fu_595_p1));
    tmp_10_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_504_p3),32));
    tmp_11_fu_663_p3 <= (INPUT_BUNDLE_addr_6_s_reg_1015 & ap_const_lv1_0);
    tmp_12_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_567_p3),10));
    tmp_12_fu_526_p4 <= tmp_5_mid2_fu_464_p2(19 downto 10);
    tmp_13_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(INPUT_BUNDLE_addr_2_s_reg_994),9));
    tmp_13_fu_536_p3 <= (tmp_12_fu_526_p4 & i_mid2_reg_906);
    tmp_14_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_536_p3),32));
    tmp_15_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(INPUT_BUNDLE_addr_3_s_reg_999),10));
    tmp_15_fu_674_p3 <= (reg_229 & ap_const_lv1_0);
    tmp_16_fu_636_p2 <= std_logic_vector(unsigned(sum6_neg_fu_630_p2) - unsigned(tmp_18_cast_fu_595_p1));
    tmp_17_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_584_p3),10));
    tmp_17_fu_689_p2 <= std_logic_vector(signed(tmp_29_cast_fu_686_p1) - signed(tmp_24_cast_fu_670_p1));
    tmp_18_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(INPUT_BUNDLE_addr_5_s_reg_1010),10));
        tmp_18_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(convulution_horizont_reg_1035),20));

    tmp_1_fu_245_p2 <= "1" when (i_phi_fu_214_p4 = ap_const_lv10_3FF) else "0";
    tmp_1_mid1_fu_273_p3 <= (j_s_fu_259_p2 & ap_const_lv10_1);
        tmp_20_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(convulution_vertical_reg_1040),20));

    tmp_21_fu_866_p0 <= tmp_20_fu_701_p1(11 - 1 downto 0);
    tmp_21_fu_866_p1 <= tmp_20_fu_701_p1(11 - 1 downto 0);
    tmp_24_cast1_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_811_p3),68));
    tmp_24_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_663_p3),11));
    tmp_24_fu_823_p4 <= tmp_44_i_i_i_fu_805_p2(120 downto 53);
    tmp_25_fu_833_p3 <= 
        tmp_24_cast1_fu_819_p1 when (isNeg_reg_1084(0) = '1') else 
        tmp_24_fu_823_p4;
    tmp_26_fu_840_p4 <= tmp_25_fu_833_p3(9 downto 8);
    tmp_27_fu_856_p1 <= tmp_25_fu_833_p3(8 - 1 downto 0);
    tmp_28_cast_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_674_p3),11));
    tmp_28_fu_860_p3 <= 
        ap_const_lv8_FF when (icmp_reg_1094(0) = '1') else 
        tmp_27_reg_1099;
        tmp_29_cast_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_1030),11));

    tmp_2_fu_567_p3 <= (INPUT_BUNDLE_addr_1_s_reg_989 & ap_const_lv1_0);
    tmp_30_fu_711_p2 <= "1" when (grp_fu_312_p2 = ap_const_lv20_0) else "0";
    tmp_32_fu_717_p2 <= "1" when (grp_fu_349_p2 = ap_const_lv20_0) else "0";
    tmp_3_cast_mid2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_cast_mid2_v_fu_448_p2),21));
    tmp_3_cast_mid2_v_fu_448_p2 <= (tmp_3_cast_mid2_v_v_fu_441_p3 or ap_const_lv20_1);
    tmp_3_cast_mid2_v_v_fu_441_p3 <= (tmp_3_cast_mid2_v_v_s_reg_916 & ap_const_lv10_0);
    tmp_3_cast_mid2_v_v_s_fu_265_p3 <= 
        j_s_fu_259_p2 when (tmp_1_fu_245_p2(0) = '1') else 
        j_phi_fu_203_p4;
    tmp_3_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(INPUT_BUNDLE_addr_3_s_reg_999),11));
        tmp_41_i_i_i_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_i_i_i_fu_758_p2),12));

    tmp_41_i_i_i_fu_758_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_reg_1073));
    tmp_42_i_i_i_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_788_p1),54));
    tmp_42_i_i_i_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_788_p1),121));
    tmp_43_i_i_i_fu_799_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_775_p4),to_integer(unsigned('0' & tmp_42_i_i_i_cast_fu_795_p1(31-1 downto 0)))));
    tmp_44_i_i_i_fu_805_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_784_p1),to_integer(unsigned('0' & tmp_42_i_i_i_fu_791_p1(31-1 downto 0)))));
    tmp_4_fu_584_p3 <= (INPUT_BUNDLE_addr_4_s_reg_1005 & ap_const_lv1_0);
    tmp_4_mid2_fu_458_p2 <= std_logic_vector(unsigned(ap_const_lv20_400) + unsigned(tmp_3_cast_mid2_v_v_fu_441_p3));
    tmp_5_fu_648_p2 <= std_logic_vector(unsigned(tmp_3_fu_642_p1) - unsigned(sum1_cast_fu_645_p1));
    tmp_5_mid2_fu_464_p2 <= std_logic_vector(signed(ap_const_lv20_FFC00) + signed(tmp_3_cast_mid2_v_v_fu_441_p3));
    tmp_6_fu_281_p3 <= (j_phi_fu_203_p4 & ap_const_lv10_1);
    tmp_7_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_229),9));
    tmp_7_fu_494_p4 <= tmp_4_mid2_fu_458_p2(19 downto 10);
    tmp_7_mid2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_mid2_v_fu_289_p3),32));
    tmp_7_mid2_v_fu_289_p3 <= 
        tmp_1_mid1_fu_273_p3 when (tmp_1_fu_245_p2(0) = '1') else 
        tmp_6_fu_281_p3;
    tmp_8_cast5_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_mid2_reg_906),21));
    tmp_8_fu_318_p3 <= (tmp_3_cast_mid2_v_v_s_reg_916 & i_mid2_reg_906);
    tmp_9_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_318_p3),21));
    tmp_9_fu_504_p3 <= (tmp_7_fu_494_p4 & i_mid2_reg_906);
    tmp_fu_811_p3 <= tmp_43_i_i_i_fu_799_p2(53 downto 53);
    tmp_i_i_i_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_775_p4),121));
    tmp_i_i_i_fu_775_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_1079) & ap_const_lv1_0);
    tmp_i_i_i_i_cast4_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_reg_1073),12));
end behav;
