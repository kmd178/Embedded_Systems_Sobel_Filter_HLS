#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_INPUT_BUNDLE_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_INPUT_BUNDLE_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_INPUT_BUNDLE_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_INPUT_BUNDLE_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_INPUT_BUNDLE_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_INPUT_BUNDLE_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_INPUT_BUNDLE_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_INPUT_BUNDLE_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_INPUT_BUNDLE_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_INPUT_BUNDLE_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_INPUT_BUNDLE_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_INPUT_BUNDLE_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_INPUT_BUNDLE_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_INPUT_BUNDLE_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_INPUT_BUNDLE_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_INPUT_BUNDLE_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_AWUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_WVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_WREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_WDATA", 32, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_WSTRB", 4, hls_out, 1, "m_axi", "STRB", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_WLAST", 1, hls_out, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_WID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_WUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_ARUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_RVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_RREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_RDATA", 32, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_RLAST", 1, hls_in, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_RID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_RUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_RRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_BVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_BREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_BRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_BID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_OUTPUT_BUNDLE_BUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("s_axi_AXILiteS_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "sobel";
