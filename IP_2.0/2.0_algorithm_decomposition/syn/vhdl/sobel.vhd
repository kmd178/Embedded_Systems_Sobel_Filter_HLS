-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
generic (
    C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_INPUT_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_BUNDLE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_BUNDLE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_WREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_BUNDLE_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_BUNDLE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_BUNDLE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_BUNDLE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RVALID : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RLAST : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_BVALID : IN STD_LOGIC;
    m_axi_INPUT_BUNDLE_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_BUNDLE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_BUNDLE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_BUNDLE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_BUNDLE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_BUNDLE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_BUNDLE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_BUNDLE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_BUNDLE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_BUNDLE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_BUNDLE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=69982473,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=4798,HLS_SYN_LUT=6547}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv20_3FF : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111111111";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv12_BFF : STD_LOGIC_VECTOR (11 downto 0) := "101111111111";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal INPUT_BUNDLE_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal OUTPUT_BUNDLE_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal OUTPUT_BUNDLE_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal OUTPUT_BUNDLE_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal icmp_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal INPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal INPUT_BUNDLE_WREADY : STD_LOGIC;
    signal INPUT_BUNDLE_ARVALID : STD_LOGIC;
    signal INPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal INPUT_BUNDLE_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_RVALID : STD_LOGIC;
    signal INPUT_BUNDLE_RREADY : STD_LOGIC;
    signal INPUT_BUNDLE_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_BUNDLE_RLAST : STD_LOGIC;
    signal INPUT_BUNDLE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_BUNDLE_BVALID : STD_LOGIC;
    signal INPUT_BUNDLE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_BUNDLE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_AWVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_BUNDLE_WVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_WREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_RVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_BUNDLE_RLAST : STD_LOGIC;
    signal OUTPUT_BUNDLE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_BUNDLE_BVALID : STD_LOGIC;
    signal OUTPUT_BUNDLE_BREADY : STD_LOGIC;
    signal OUTPUT_BUNDLE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_BUNDLE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_BUNDLE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_INPUT_BUNDLE_ARREADY : STD_LOGIC;
    signal reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_read_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_read_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_210_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_reg_871 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_cast_fu_224_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_cast_reg_880 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_cast_fu_234_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_cast_reg_885 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp1_fu_256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_reg_893 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_BUNDLE_addr_2_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_282_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_reg_904 : STD_LOGIC_VECTOR (10 downto 0);
    signal INPUT_BUNDLE_addr_4_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_308_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal INPUT_BUNDLE_addr_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal INPUT_BUNDLE_addr_1_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_3_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_5_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_6_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_BUNDLE_addr_7_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_498_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum1_reg_957 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum6_neg_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum6_neg_reg_962 : STD_LOGIC_VECTOR (8 downto 0);
    signal convulution_horizont_fu_553_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal convulution_horizont_reg_967 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_568_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_972 : STD_LOGIC_VECTOR (9 downto 0);
    signal convulution_vertical_fu_607_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal convulution_vertical_reg_977 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_10_fu_837_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_10_reg_982 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_843_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_reg_987 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_997 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1002 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal p_Result_s_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal loc_V_1_fu_644_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1012 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_676_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_1022 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_3_fu_742_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_3_reg_1027 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal icmp_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_20_fu_781_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_1036 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_BUNDLE_addr_1_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_BUNDLE_addr_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_831_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state69 : BOOLEAN;
    signal j_reg_160 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_172 : STD_LOGIC_VECTOR (9 downto 0);
    signal input2_sum6_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum8_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum5_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum7_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum9_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum1_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_sum2_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal output4_sum_fu_797_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal output4_sum1_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_INPUT_BUNDLE_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY : STD_LOGIC;
    signal ap_reg_ioackin_OUTPUT_BUNDLE_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_OUTPUT_BUNDLE_WREADY : STD_LOGIC;
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_1_fu_218_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_228_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_cast2_fu_242_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_cast1_fu_238_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum6_fu_262_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum6_cast_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_246_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum3_fu_288_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum3_cast_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_cast_fu_314_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum2_fu_317_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum2_cast_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_337_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum4_fu_343_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum4_cast_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_cast_fu_366_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum8_fu_369_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum8_cast_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_cast_fu_389_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum5_fu_392_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum5_cast_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_412_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_cast_fu_420_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum7_fu_424_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum7_cast_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_cast_fu_444_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum9_fu_448_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum9_cast_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_472_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_cast_fu_468_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_cast_fu_484_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_fu_488_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_cast_fu_494_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_480_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_518_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_fu_514_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum1_cast_fu_534_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_cast_fu_526_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_cast_fu_530_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_fu_543_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_cast_fu_549_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_537_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum6_neg_cast_fu_559_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_cast1_fu_510_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum7_neg_fu_562_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_574_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_586_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_cast_fu_598_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_cast_fu_582_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_601_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_cast_fu_594_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_1_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_fu_634_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast9_fu_648_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_652_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_i_i_i_fu_666_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_i_i_i_cast_fu_672_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_684_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_1_cast_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i_i_i_cast_fu_704_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_693_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_31_i_i_i_fu_700_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_32_i_i_i_fu_708_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_18_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_i_i_fu_714_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_13_fu_728_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_732_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_i_i_i_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_i_fu_752_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_758_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_765_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum10_fu_785_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum11_cast_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_808_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum10_cast_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_837_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal convulution_vertical_1_fu_613_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_10_fu_837_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_843_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal convulution_horizont_1_fu_616_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_843_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);

    component sobel_sitodp_32s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_dsqrt_64ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_mul_mul_11sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component sobel_mac_muladd_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component sobel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_INPUT_BUNDLE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sobel_OUTPUT_BUNDLE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sobel_AXILiteS_s_axi_U : component sobel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r => input_r,
        output_r => output_r);

    sobel_INPUT_BUNDLE_m_axi_U : component sobel_INPUT_BUNDLE_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_BUNDLE_AWVALID,
        AWREADY => m_axi_INPUT_BUNDLE_AWREADY,
        AWADDR => m_axi_INPUT_BUNDLE_AWADDR,
        AWID => m_axi_INPUT_BUNDLE_AWID,
        AWLEN => m_axi_INPUT_BUNDLE_AWLEN,
        AWSIZE => m_axi_INPUT_BUNDLE_AWSIZE,
        AWBURST => m_axi_INPUT_BUNDLE_AWBURST,
        AWLOCK => m_axi_INPUT_BUNDLE_AWLOCK,
        AWCACHE => m_axi_INPUT_BUNDLE_AWCACHE,
        AWPROT => m_axi_INPUT_BUNDLE_AWPROT,
        AWQOS => m_axi_INPUT_BUNDLE_AWQOS,
        AWREGION => m_axi_INPUT_BUNDLE_AWREGION,
        AWUSER => m_axi_INPUT_BUNDLE_AWUSER,
        WVALID => m_axi_INPUT_BUNDLE_WVALID,
        WREADY => m_axi_INPUT_BUNDLE_WREADY,
        WDATA => m_axi_INPUT_BUNDLE_WDATA,
        WSTRB => m_axi_INPUT_BUNDLE_WSTRB,
        WLAST => m_axi_INPUT_BUNDLE_WLAST,
        WID => m_axi_INPUT_BUNDLE_WID,
        WUSER => m_axi_INPUT_BUNDLE_WUSER,
        ARVALID => m_axi_INPUT_BUNDLE_ARVALID,
        ARREADY => m_axi_INPUT_BUNDLE_ARREADY,
        ARADDR => m_axi_INPUT_BUNDLE_ARADDR,
        ARID => m_axi_INPUT_BUNDLE_ARID,
        ARLEN => m_axi_INPUT_BUNDLE_ARLEN,
        ARSIZE => m_axi_INPUT_BUNDLE_ARSIZE,
        ARBURST => m_axi_INPUT_BUNDLE_ARBURST,
        ARLOCK => m_axi_INPUT_BUNDLE_ARLOCK,
        ARCACHE => m_axi_INPUT_BUNDLE_ARCACHE,
        ARPROT => m_axi_INPUT_BUNDLE_ARPROT,
        ARQOS => m_axi_INPUT_BUNDLE_ARQOS,
        ARREGION => m_axi_INPUT_BUNDLE_ARREGION,
        ARUSER => m_axi_INPUT_BUNDLE_ARUSER,
        RVALID => m_axi_INPUT_BUNDLE_RVALID,
        RREADY => m_axi_INPUT_BUNDLE_RREADY,
        RDATA => m_axi_INPUT_BUNDLE_RDATA,
        RLAST => m_axi_INPUT_BUNDLE_RLAST,
        RID => m_axi_INPUT_BUNDLE_RID,
        RUSER => m_axi_INPUT_BUNDLE_RUSER,
        RRESP => m_axi_INPUT_BUNDLE_RRESP,
        BVALID => m_axi_INPUT_BUNDLE_BVALID,
        BREADY => m_axi_INPUT_BUNDLE_BREADY,
        BRESP => m_axi_INPUT_BUNDLE_BRESP,
        BID => m_axi_INPUT_BUNDLE_BID,
        BUSER => m_axi_INPUT_BUNDLE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_BUNDLE_ARVALID,
        I_ARREADY => INPUT_BUNDLE_ARREADY,
        I_ARADDR => INPUT_BUNDLE_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_BUNDLE_RVALID,
        I_RREADY => INPUT_BUNDLE_RREADY,
        I_RDATA => INPUT_BUNDLE_RDATA,
        I_RID => INPUT_BUNDLE_RID,
        I_RUSER => INPUT_BUNDLE_RUSER,
        I_RRESP => INPUT_BUNDLE_RRESP,
        I_RLAST => INPUT_BUNDLE_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_BUNDLE_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_BUNDLE_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => INPUT_BUNDLE_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_BUNDLE_BRESP,
        I_BID => INPUT_BUNDLE_BID,
        I_BUSER => INPUT_BUNDLE_BUSER);

    sobel_OUTPUT_BUNDLE_m_axi_U : component sobel_OUTPUT_BUNDLE_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_BUNDLE_AWVALID,
        AWREADY => m_axi_OUTPUT_BUNDLE_AWREADY,
        AWADDR => m_axi_OUTPUT_BUNDLE_AWADDR,
        AWID => m_axi_OUTPUT_BUNDLE_AWID,
        AWLEN => m_axi_OUTPUT_BUNDLE_AWLEN,
        AWSIZE => m_axi_OUTPUT_BUNDLE_AWSIZE,
        AWBURST => m_axi_OUTPUT_BUNDLE_AWBURST,
        AWLOCK => m_axi_OUTPUT_BUNDLE_AWLOCK,
        AWCACHE => m_axi_OUTPUT_BUNDLE_AWCACHE,
        AWPROT => m_axi_OUTPUT_BUNDLE_AWPROT,
        AWQOS => m_axi_OUTPUT_BUNDLE_AWQOS,
        AWREGION => m_axi_OUTPUT_BUNDLE_AWREGION,
        AWUSER => m_axi_OUTPUT_BUNDLE_AWUSER,
        WVALID => m_axi_OUTPUT_BUNDLE_WVALID,
        WREADY => m_axi_OUTPUT_BUNDLE_WREADY,
        WDATA => m_axi_OUTPUT_BUNDLE_WDATA,
        WSTRB => m_axi_OUTPUT_BUNDLE_WSTRB,
        WLAST => m_axi_OUTPUT_BUNDLE_WLAST,
        WID => m_axi_OUTPUT_BUNDLE_WID,
        WUSER => m_axi_OUTPUT_BUNDLE_WUSER,
        ARVALID => m_axi_OUTPUT_BUNDLE_ARVALID,
        ARREADY => m_axi_OUTPUT_BUNDLE_ARREADY,
        ARADDR => m_axi_OUTPUT_BUNDLE_ARADDR,
        ARID => m_axi_OUTPUT_BUNDLE_ARID,
        ARLEN => m_axi_OUTPUT_BUNDLE_ARLEN,
        ARSIZE => m_axi_OUTPUT_BUNDLE_ARSIZE,
        ARBURST => m_axi_OUTPUT_BUNDLE_ARBURST,
        ARLOCK => m_axi_OUTPUT_BUNDLE_ARLOCK,
        ARCACHE => m_axi_OUTPUT_BUNDLE_ARCACHE,
        ARPROT => m_axi_OUTPUT_BUNDLE_ARPROT,
        ARQOS => m_axi_OUTPUT_BUNDLE_ARQOS,
        ARREGION => m_axi_OUTPUT_BUNDLE_ARREGION,
        ARUSER => m_axi_OUTPUT_BUNDLE_ARUSER,
        RVALID => m_axi_OUTPUT_BUNDLE_RVALID,
        RREADY => m_axi_OUTPUT_BUNDLE_RREADY,
        RDATA => m_axi_OUTPUT_BUNDLE_RDATA,
        RLAST => m_axi_OUTPUT_BUNDLE_RLAST,
        RID => m_axi_OUTPUT_BUNDLE_RID,
        RUSER => m_axi_OUTPUT_BUNDLE_RUSER,
        RRESP => m_axi_OUTPUT_BUNDLE_RRESP,
        BVALID => m_axi_OUTPUT_BUNDLE_BVALID,
        BREADY => m_axi_OUTPUT_BUNDLE_BREADY,
        BRESP => m_axi_OUTPUT_BUNDLE_BRESP,
        BID => m_axi_OUTPUT_BUNDLE_BID,
        BUSER => m_axi_OUTPUT_BUNDLE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_BUNDLE_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_BUNDLE_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_BUNDLE_RDATA,
        I_RID => OUTPUT_BUNDLE_RID,
        I_RUSER => OUTPUT_BUNDLE_RUSER,
        I_RRESP => OUTPUT_BUNDLE_RRESP,
        I_RLAST => OUTPUT_BUNDLE_RLAST,
        I_AWVALID => OUTPUT_BUNDLE_AWVALID,
        I_AWREADY => OUTPUT_BUNDLE_AWREADY,
        I_AWADDR => OUTPUT_BUNDLE_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_BUNDLE_WVALID,
        I_WREADY => OUTPUT_BUNDLE_WREADY,
        I_WDATA => OUTPUT_BUNDLE_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => OUTPUT_BUNDLE_BVALID,
        I_BREADY => OUTPUT_BUNDLE_BREADY,
        I_BRESP => OUTPUT_BUNDLE_BRESP,
        I_BID => OUTPUT_BUNDLE_BID,
        I_BUSER => OUTPUT_BUNDLE_BUSER);

    sobel_sitodp_32s_bkb_U0 : component sobel_sitodp_32s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_184_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p1);

    sobel_dsqrt_64ns_cud_U1 : component sobel_dsqrt_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_11_reg_997,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    sobel_mul_mul_11sdEe_U2 : component sobel_mul_mul_11sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_10_fu_837_p0,
        din1 => tmp_10_fu_837_p1,
        dout => tmp_10_fu_837_p2);

    sobel_mac_muladd_eOg_U3 : component sobel_mac_muladd_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_843_p0,
        din1 => grp_fu_843_p1,
        din2 => tmp_10_reg_982,
        dout => grp_fu_843_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_INPUT_BUNDLE_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_logic_0 = INPUT_BUNDLE_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (INPUT_BUNDLE_RVALID = ap_const_logic_1) and (ap_const_logic_1 = INPUT_BUNDLE_ARREADY)))) then 
                    ap_reg_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_const_logic_1 = OUTPUT_BUNDLE_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (ap_const_logic_1 = OUTPUT_BUNDLE_AWREADY)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_logic_1 = OUTPUT_BUNDLE_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_const_logic_1 = OUTPUT_BUNDLE_WREADY)))) then 
                    ap_reg_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_204_p2))) then 
                i_reg_172 <= ap_const_lv10_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state69) and not((((icmp_reg_1032 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)))))) then 
                i_reg_172 <= i_1_fu_831_p2;
            end if; 
        end if;
    end process;

    j_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond_fu_250_p2))) then 
                j_reg_160 <= j_1_fu_308_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_160 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                INPUT_BUNDLE_addr_1_reg_927 <= input2_sum5_fu_355_p2;
                INPUT_BUNDLE_addr_3_reg_933 <= input2_sum7_fu_378_p2;
                INPUT_BUNDLE_addr_5_reg_939 <= input2_sum9_fu_401_p2;
                INPUT_BUNDLE_addr_6_reg_945 <= input2_sum1_fu_433_p2;
                INPUT_BUNDLE_addr_7_reg_951 <= input2_sum2_fu_457_p2;
                INPUT_BUNDLE_addr_reg_921 <= input2_sum_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_250_p2))) then
                INPUT_BUNDLE_addr_2_reg_898 <= input2_sum6_fu_271_p2;
                INPUT_BUNDLE_addr_4_reg_910 <= input2_sum8_fu_297_p2;
                tmp1_reg_893 <= tmp1_fu_256_p2;
                tmp3_reg_904 <= tmp3_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) and (ap_const_lv1_0 = icmp_fu_775_p2))) then
                OUTPUT_BUNDLE_addr_1_reg_1041 <= output4_sum_fu_797_p2;
                tmp_20_reg_1036 <= tmp_20_fu_781_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) and (ap_const_lv1_1 = icmp_fu_775_p2))) then
                OUTPUT_BUNDLE_addr_reg_1046 <= output4_sum1_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                convulution_horizont_reg_967 <= convulution_horizont_fu_553_p2;
                tmp_7_reg_972 <= tmp_7_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                convulution_vertical_reg_977 <= convulution_vertical_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                icmp_reg_1032 <= icmp_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_read_reg_856 <= input_r;
                output_read_reg_850 <= output_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                isNeg_reg_1017 <= sh_assign_fu_652_p2(11 downto 11);
                loc_V_1_reg_1012 <= loc_V_1_fu_644_p1;
                p_Result_s_reg_1007 <= p_Val2_1_fu_623_p1(63 downto 63);
                sh_assign_1_reg_1022 <= sh_assign_1_fu_676_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                p_Val2_3_reg_1027 <= p_Val2_3_fu_742_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                p_reg_987 <= grp_fu_843_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_logic_0 = INPUT_BUNDLE_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)))) then
                reg_192 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)))) then
                reg_196 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)))) then
                reg_200 <= INPUT_BUNDLE_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                sum1_reg_957 <= sum1_fu_498_p2;
                sum6_neg_reg_962 <= sum6_neg_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_10_reg_982 <= tmp_10_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_11_reg_997 <= grp_fu_184_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_204_p2))) then
                    tmp_1_cast_reg_880(19 downto 10) <= tmp_1_cast_fu_224_p1(19 downto 10);
                    tmp_2_cast_reg_885(19 downto 10) <= tmp_2_cast_fu_234_p1(19 downto 10);
                    tmp_reg_871(19 downto 10) <= tmp_fu_210_p3(19 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                x_assign_reg_1002 <= grp_fu_187_p2;
            end if;
        end if;
    end process;
    tmp_reg_871(9 downto 0) <= "0000000000";
    tmp_1_cast_reg_880(9 downto 0) <= "1111111111";
    tmp_1_cast_reg_880(20) <= '0';
    tmp_2_cast_reg_885(9 downto 0) <= "0000000001";
    tmp_2_cast_reg_885(20) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state69, icmp_reg_1032, ap_CS_fsm_state63, ap_CS_fsm_state64, INPUT_BUNDLE_RVALID, OUTPUT_BUNDLE_BVALID, ap_sig_ioackin_INPUT_BUNDLE_ARREADY, ap_CS_fsm_state2, exitcond1_fu_204_p2, ap_CS_fsm_state3, exitcond_fu_250_p2, icmp_fu_775_p2, ap_CS_fsm_state62, ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY, ap_sig_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_204_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond_fu_250_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_sig_ioackin_INPUT_BUNDLE_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_logic_0 = INPUT_BUNDLE_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (ap_const_lv1_1 = icmp_fu_775_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and not((((icmp_reg_1032 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_sig_ioackin_OUTPUT_BUNDLE_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_BUNDLE_ARADDR_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, INPUT_BUNDLE_RVALID, INPUT_BUNDLE_addr_2_reg_898, INPUT_BUNDLE_addr_4_reg_910, INPUT_BUNDLE_addr_reg_921, INPUT_BUNDLE_addr_1_reg_927, INPUT_BUNDLE_addr_3_reg_933, INPUT_BUNDLE_addr_5_reg_939, INPUT_BUNDLE_addr_6_reg_945, INPUT_BUNDLE_addr_7_reg_951, ap_reg_ioackin_INPUT_BUNDLE_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (INPUT_BUNDLE_RVALID = ap_const_logic_1))) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_7_reg_951;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_6_reg_945;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_5_reg_939;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_4_reg_910;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_3_reg_933;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_2_reg_898;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_1_reg_927;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                INPUT_BUNDLE_ARADDR <= INPUT_BUNDLE_addr_reg_921;
            else 
                INPUT_BUNDLE_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            INPUT_BUNDLE_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_BUNDLE_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, INPUT_BUNDLE_RVALID, ap_reg_ioackin_INPUT_BUNDLE_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (INPUT_BUNDLE_RVALID = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)))) then 
            INPUT_BUNDLE_ARVALID <= ap_const_logic_1;
        else 
            INPUT_BUNDLE_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_BUNDLE_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, INPUT_BUNDLE_RVALID, ap_sig_ioackin_INPUT_BUNDLE_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_logic_0 = INPUT_BUNDLE_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_INPUT_BUNDLE_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (INPUT_BUNDLE_RVALID = ap_const_logic_1)))) then 
            INPUT_BUNDLE_RREADY <= ap_const_logic_1;
        else 
            INPUT_BUNDLE_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_BUNDLE_blk_n_AR_assign_proc : process(m_axi_INPUT_BUNDLE_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            INPUT_BUNDLE_blk_n_AR <= m_axi_INPUT_BUNDLE_ARREADY;
        else 
            INPUT_BUNDLE_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_BUNDLE_blk_n_R_assign_proc : process(m_axi_INPUT_BUNDLE_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            INPUT_BUNDLE_blk_n_R <= m_axi_INPUT_BUNDLE_RVALID;
        else 
            INPUT_BUNDLE_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_AWADDR_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state63, OUTPUT_BUNDLE_addr_1_reg_1041, OUTPUT_BUNDLE_addr_reg_1046, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                OUTPUT_BUNDLE_AWADDR <= OUTPUT_BUNDLE_addr_reg_1046;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                OUTPUT_BUNDLE_AWADDR <= OUTPUT_BUNDLE_addr_1_reg_1041;
            else 
                OUTPUT_BUNDLE_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUTPUT_BUNDLE_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_BUNDLE_AWVALID_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state63, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)))) then 
            OUTPUT_BUNDLE_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_BREADY_assign_proc : process(ap_CS_fsm_state69, icmp_reg_1032, OUTPUT_BUNDLE_BVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state69) and (icmp_reg_1032 = ap_const_lv1_0) and not((((icmp_reg_1032 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID))))) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (icmp_reg_1032 = ap_const_lv1_1) and not((((icmp_reg_1032 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID))))))) then 
            OUTPUT_BUNDLE_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_WDATA_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state64, tmp_20_reg_1036, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                OUTPUT_BUNDLE_WDATA <= ap_const_lv8_FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                OUTPUT_BUNDLE_WDATA <= tmp_20_reg_1036;
            else 
                OUTPUT_BUNDLE_WDATA <= "XXXXXXXX";
            end if;
        else 
            OUTPUT_BUNDLE_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    OUTPUT_BUNDLE_WVALID_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state64, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)))) then 
            OUTPUT_BUNDLE_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_BUNDLE_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_AW_assign_proc : process(m_axi_OUTPUT_BUNDLE_AWREADY, ap_CS_fsm_state70, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            OUTPUT_BUNDLE_blk_n_AW <= m_axi_OUTPUT_BUNDLE_AWREADY;
        else 
            OUTPUT_BUNDLE_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_B_assign_proc : process(m_axi_OUTPUT_BUNDLE_BVALID, ap_CS_fsm_state69, icmp_reg_1032)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state69) and (icmp_reg_1032 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (icmp_reg_1032 = ap_const_lv1_0)))) then 
            OUTPUT_BUNDLE_blk_n_B <= m_axi_OUTPUT_BUNDLE_BVALID;
        else 
            OUTPUT_BUNDLE_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_BUNDLE_blk_n_W_assign_proc : process(m_axi_OUTPUT_BUNDLE_WREADY, ap_CS_fsm_state71, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            OUTPUT_BUNDLE_blk_n_W <= m_axi_OUTPUT_BUNDLE_WREADY;
        else 
            OUTPUT_BUNDLE_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state69_assign_proc : process(icmp_reg_1032, OUTPUT_BUNDLE_BVALID)
    begin
                ap_block_state69 <= (((icmp_reg_1032 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)) or ((icmp_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_BUNDLE_BVALID)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_204_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_204_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_204_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_204_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_INPUT_BUNDLE_ARREADY_assign_proc : process(INPUT_BUNDLE_ARREADY, ap_reg_ioackin_INPUT_BUNDLE_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_BUNDLE_ARREADY)) then 
            ap_sig_ioackin_INPUT_BUNDLE_ARREADY <= INPUT_BUNDLE_ARREADY;
        else 
            ap_sig_ioackin_INPUT_BUNDLE_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY_assign_proc : process(OUTPUT_BUNDLE_AWREADY, ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_AWREADY)) then 
            ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY <= OUTPUT_BUNDLE_AWREADY;
        else 
            ap_sig_ioackin_OUTPUT_BUNDLE_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_BUNDLE_WREADY_assign_proc : process(OUTPUT_BUNDLE_WREADY, ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_BUNDLE_WREADY)) then 
            ap_sig_ioackin_OUTPUT_BUNDLE_WREADY <= OUTPUT_BUNDLE_WREADY;
        else 
            ap_sig_ioackin_OUTPUT_BUNDLE_WREADY <= ap_const_logic_1;
        end if; 
    end process;

        convulution_horizont_1_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(convulution_horizont_reg_967),22));

    convulution_horizont_fu_553_p2 <= std_logic_vector(unsigned(tmp6_cast_fu_549_p1) + unsigned(tmp_4_fu_537_p2));
        convulution_vertical_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(convulution_vertical_reg_977),22));

    convulution_vertical_fu_607_p2 <= std_logic_vector(unsigned(tmp_8_fu_601_p2) + unsigned(tmp_21_cast_fu_594_p1));
    exitcond1_fu_204_p2 <= "1" when (j_reg_160 = ap_const_lv10_3FF) else "0";
    exitcond_fu_250_p2 <= "1" when (i_reg_172 = ap_const_lv10_3FF) else "0";
        grp_fu_184_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_reg_987),32));

    grp_fu_843_p0 <= convulution_horizont_1_fu_616_p1(11 - 1 downto 0);
    grp_fu_843_p1 <= convulution_horizont_1_fu_616_p1(11 - 1 downto 0);
    i_1_fu_831_p2 <= std_logic_vector(unsigned(i_reg_172) + unsigned(ap_const_lv10_1));
    i_cast1_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_172),21));
    i_cast2_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_172),12));
    i_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_172),11));
    icmp_fu_775_p2 <= "1" when (signed(tmp_19_fu_765_p4) > signed(ap_const_lv24_0)) else "0";
    input2_sum1_fu_433_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum7_cast_fu_429_p1));
    input2_sum2_fu_457_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum9_cast_fu_453_p1));
    input2_sum5_fu_355_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum4_cast_fu_351_p1));
    input2_sum6_fu_271_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum6_cast_fu_267_p1));
    input2_sum7_fu_378_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum8_cast_fu_374_p1));
    input2_sum8_fu_297_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum3_cast_fu_293_p1));
    input2_sum9_fu_401_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum5_cast_fu_397_p1));
    input2_sum_fu_326_p2 <= std_logic_vector(unsigned(input_read_reg_856) + unsigned(sum2_cast_fu_322_p1));
    isNeg_fu_658_p3 <= sh_assign_fu_652_p2(11 downto 11);
    j_1_fu_308_p2 <= std_logic_vector(unsigned(j_reg_160) + unsigned(ap_const_lv10_1));
    loc_V_1_fu_644_p1 <= p_Val2_1_fu_623_p1(52 - 1 downto 0);
    loc_V_fu_634_p4 <= p_Val2_1_fu_623_p1(62 downto 52);
    output4_sum1_fu_820_p2 <= std_logic_vector(unsigned(sum10_cast_fu_816_p1) + unsigned(output_read_reg_850));
    output4_sum_fu_797_p2 <= std_logic_vector(unsigned(output_read_reg_850) + unsigned(sum11_cast_fu_793_p1));
    p_Val2_1_fu_623_p1 <= x_assign_reg_1002;
    p_Val2_3_fu_742_p3 <= 
        tmp_13_fu_728_p1 when (isNeg_reg_1017(0) = '1') else 
        tmp_14_fu_732_p4;
    p_Val2_s_fu_758_p3 <= 
        tmp_38_i_i_i_fu_752_p2 when (p_Result_s_reg_1007(0) = '1') else 
        tmp_35_i_i_i_fu_749_p1;
        sh_assign_1_cast_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_1022),32));

    sh_assign_1_fu_676_p3 <= 
        tmp_30_i_i_i_cast_fu_672_p1 when (isNeg_fu_658_p3(0) = '1') else 
        sh_assign_fu_652_p2;
    sh_assign_fu_652_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast9_fu_648_p1));
    sum10_cast_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_808_p3),32));
    sum10_fu_785_p3 <= (j_reg_160 & i_reg_172);
    sum11_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum10_fu_785_p3),32));
    sum1_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_reg_957),11));
    sum1_fu_498_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_494_p1) + unsigned(tmp_cast_fu_480_p1));
    sum2_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_317_p2),32));
    sum2_fu_317_p2 <= std_logic_vector(signed(tmp1_cast_fu_314_p1) + signed(tmp_reg_871));
    sum3_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_288_p2),32));
    sum3_fu_288_p2 <= std_logic_vector(unsigned(i_cast1_fu_238_p1) + unsigned(tmp_2_cast_reg_885));
    sum4_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_343_p3),32));
    sum4_fu_343_p3 <= (j_reg_160 & tmp2_fu_337_p2);
    sum5_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_392_p2),32));
    sum5_fu_392_p2 <= std_logic_vector(unsigned(tmp4_cast_fu_389_p1) + unsigned(tmp_reg_871));
    sum6_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_262_p2),32));
    sum6_fu_262_p2 <= std_logic_vector(unsigned(i_cast1_fu_238_p1) + unsigned(tmp_1_cast_reg_880));
        sum6_neg_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum6_neg_reg_962),10));

    sum6_neg_fu_504_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_468_p1) - unsigned(tmp_3_cast_fu_484_p1));
    sum7_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_424_p2),32));
    sum7_fu_424_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_420_p1) + unsigned(tmp_reg_871));
    sum7_neg_fu_562_p2 <= std_logic_vector(signed(sum6_neg_cast_fu_559_p1) + signed(tmp_8_cast1_fu_510_p1));
    sum8_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_369_p2),32));
    sum8_fu_369_p2 <= std_logic_vector(signed(tmp3_cast_fu_366_p1) + signed(tmp_reg_871));
    sum9_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_448_p2),32));
    sum9_fu_448_p2 <= std_logic_vector(signed(tmp8_cast_fu_444_p1) + signed(tmp_reg_871));
    sum_fu_808_p3 <= (j_reg_160 & i_reg_172);
        tmp1_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_893),20));

    tmp1_fu_256_p2 <= std_logic_vector(signed(ap_const_lv12_BFF) + signed(i_cast2_fu_242_p1));
    tmp2_fu_337_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(i_reg_172));
        tmp3_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_reg_904),20));

    tmp3_fu_282_p2 <= std_logic_vector(signed(ap_const_lv11_401) + signed(i_cast_fu_246_p1));
    tmp4_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_904),20));
    tmp5_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_488_p2),10));
    tmp5_fu_488_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_468_p1) + unsigned(tmp_3_cast_fu_484_p1));
    tmp6_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_543_p2),11));
    tmp6_fu_543_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_526_p1) + unsigned(tmp_13_cast_fu_530_p1));
    tmp7_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_412_p3),20));
    tmp7_fu_412_p3 <= (ap_const_lv1_1 & i_reg_172);
        tmp8_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_412_p3),20));

    tmp_10_fu_837_p0 <= convulution_vertical_1_fu_613_p1(11 - 1 downto 0);
    tmp_10_fu_837_p1 <= convulution_vertical_1_fu_613_p1(11 - 1 downto 0);
    tmp_11_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_518_p3),10));
    tmp_13_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_200),10));
    tmp_13_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_720_p3),31));
    tmp_14_fu_732_p4 <= tmp_33_i_i_i_fu_714_p2(83 downto 53);
    tmp_18_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_574_p3),11));
    tmp_18_fu_720_p3 <= tmp_32_i_i_i_fu_708_p2(53 downto 53);
    tmp_19_fu_765_p4 <= p_Val2_s_fu_758_p3(31 downto 8);
    tmp_1_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_218_p2),21));
    tmp_1_fu_218_p2 <= (tmp_fu_210_p3 or ap_const_lv20_3FF);
    tmp_20_fu_781_p1 <= p_Val2_s_fu_758_p3(8 - 1 downto 0);
    tmp_21_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_586_p3),11));
        tmp_22_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_972),11));

    tmp_2_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_228_p2),21));
    tmp_2_fu_228_p2 <= (tmp_fu_210_p3 or ap_const_lv20_1);
        tmp_30_i_i_i_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_i_i_i_fu_666_p2),12));

    tmp_30_i_i_i_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_634_p4));
    tmp_31_i_i_i_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_697_p1),54));
    tmp_31_i_i_i_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_697_p1),137));
    tmp_32_i_i_i_fu_708_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_684_p4),to_integer(unsigned('0' & tmp_31_i_i_i_cast_fu_704_p1(31-1 downto 0)))));
    tmp_33_i_i_i_fu_714_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_693_p1),to_integer(unsigned('0' & tmp_31_i_i_i_fu_700_p1(31-1 downto 0)))));
    tmp_35_i_i_i_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_reg_1027),32));
    tmp_38_i_i_i_fu_752_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_35_i_i_i_fu_749_p1));
    tmp_3_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_200),9));
    tmp_3_fu_518_p3 <= (reg_196 & ap_const_lv1_0);
    tmp_4_fu_537_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_514_p1) - unsigned(sum1_cast_fu_534_p1));
    tmp_5_fu_574_p3 <= (reg_192 & ap_const_lv1_0);
    tmp_6_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_192),9));
    tmp_6_fu_586_p3 <= (reg_196 & ap_const_lv1_0);
    tmp_7_fu_568_p2 <= std_logic_vector(unsigned(sum7_neg_fu_562_p2) - unsigned(tmp_13_cast_fu_530_p1));
    tmp_8_cast1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_192),10));
    tmp_8_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_192),11));
    tmp_8_fu_601_p2 <= std_logic_vector(signed(tmp_22_cast_fu_598_p1) - signed(tmp_18_cast_fu_582_p1));
    tmp_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_472_p3),10));
    tmp_fu_210_p3 <= (j_reg_160 & ap_const_lv10_0);
    tmp_i_i_i_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_684_p4),137));
    tmp_i_i_i_fu_684_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_1012) & ap_const_lv1_0);
    tmp_i_i_i_i_cast9_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_634_p4),12));
    tmp_s_fu_472_p3 <= (reg_196 & ap_const_lv1_0);
end behav;
